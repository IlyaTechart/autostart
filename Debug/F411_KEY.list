
F411_KEY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006218  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  080063b8  080063b8  000073b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007080  08007080  000091b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007080  08007080  00008080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007088  08007088  000091b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007088  08007088  00008088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800708c  0800708c  0000808c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  08007090  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  200001b4  08007244  000091b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08007244  00009454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001259d  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb7  00000000  00000000  0001b781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0001e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d68  00000000  00000000  0001f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b4d  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154d0  00000000  00000000  00038e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093282  00000000  00000000  0004e305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1587  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005078  00000000  00000000  000e15cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e6644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001b4 	.word	0x200001b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063a0 	.word	0x080063a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001b8 	.word	0x200001b8
 80001dc:	080063a0 	.word	0x080063a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <KEY_Init>:
//static void KEY_Send_EngineStop(void);

extern UART_HandleTypeDef huart1;

void KEY_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	event_flags = malloc(sizeof(KEY_Typedef_flags));
 8000574:	2008      	movs	r0, #8
 8000576:	f004 fefb 	bl	8005370 <malloc>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <KEY_Init+0x84>)
 8000580:	601a      	str	r2, [r3, #0]

    event_flags->TransmitAcepted[0] = 0x20;
 8000582:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <KEY_Init+0x84>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2220      	movs	r2, #32
 8000588:	711a      	strb	r2, [r3, #4]
    event_flags->TransmitAcepted[1] = 0x20;
 800058a:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <KEY_Init+0x84>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2220      	movs	r2, #32
 8000590:	715a      	strb	r2, [r3, #5]
    event_flags->k_15[0] = 0x25;
 8000592:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <KEY_Init+0x84>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2225      	movs	r2, #37	@ 0x25
 8000598:	709a      	strb	r2, [r3, #2]
    event_flags->k_15[1] = 0x00;
 800059a:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <KEY_Init+0x84>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2200      	movs	r2, #0
 80005a0:	70da      	strb	r2, [r3, #3]
    event_flags->k_50[0] = 0x26;
 80005a2:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <KEY_Init+0x84>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2226      	movs	r2, #38	@ 0x26
 80005a8:	701a      	strb	r2, [r3, #0]
    event_flags->k_50[1] = 0x00;
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <KEY_Init+0x84>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2200      	movs	r2, #0
 80005b0:	705a      	strb	r2, [r3, #1]
    event_flags->Error[0] = 0xFF;
 80005b2:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <KEY_Init+0x84>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	22ff      	movs	r2, #255	@ 0xff
 80005b8:	719a      	strb	r2, [r3, #6]
    event_flags->Error[1] = 0xFF;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <KEY_Init+0x84>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	22ff      	movs	r2, #255	@ 0xff
 80005c0:	71da      	strb	r2, [r3, #7]

    command = malloc(sizeof(KEY_Typedef_command));
 80005c2:	2004      	movs	r0, #4
 80005c4:	f004 fed4 	bl	8005370 <malloc>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <KEY_Init+0x88>)
 80005ce:	601a      	str	r2, [r3, #0]

    command->struct_command.start_engine[0] = 0x00;
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <KEY_Init+0x88>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
    command->struct_command.start_engine[1] = 0x00;
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <KEY_Init+0x88>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2200      	movs	r2, #0
 80005de:	705a      	strb	r2, [r3, #1]
    command->struct_command.stop_engine[0] = 0x01;
 80005e0:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <KEY_Init+0x88>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2201      	movs	r2, #1
 80005e6:	709a      	strb	r2, [r3, #2]
    command->struct_command.stop_engine[1] = 0x00;
 80005e8:	4b03      	ldr	r3, [pc, #12]	@ (80005f8 <KEY_Init+0x88>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2200      	movs	r2, #0
 80005ee:	70da      	strb	r2, [r3, #3]

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200001e4 	.word	0x200001e4
 80005f8:	200001e8 	.word	0x200001e8

080005fc <KEY_Press_Button>:

void KEY_Press_Button(uint8_t num_button)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	uint8_t case_ = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
	/*
	 * При case_ == 0 - мы удерживаем кнопку  меньше 1 сек
	 * При case == 1 - мы удерживаем кнопку больше 2 сек
	 */

	if(num_button == NUM_BUTTON_1)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d102      	bne.n	8000616 <KEY_Press_Button+0x1a>
	{
		case_ = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e029      	b.n	800066a <KEY_Press_Button+0x6e>
	}else if(num_button == NUM_BUTTON_2)
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b02      	cmp	r3, #2
 800061a:	d102      	bne.n	8000622 <KEY_Press_Button+0x26>
	{
		case_ = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	e023      	b.n	800066a <KEY_Press_Button+0x6e>
	}else{
		GPIOC->ODR &= ~GPIO_PIN_13;
 8000622:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <KEY_Press_Button+0x98>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a1b      	ldr	r2, [pc, #108]	@ (8000694 <KEY_Press_Button+0x98>)
 8000628:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800062c:	6153      	str	r3, [r2, #20]
		HAL_Delay(50);
 800062e:	2032      	movs	r0, #50	@ 0x32
 8000630:	f001 fa96 	bl	8001b60 <HAL_Delay>
		GPIOC->ODR |= GPIO_PIN_13;
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <KEY_Press_Button+0x98>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a16      	ldr	r2, [pc, #88]	@ (8000694 <KEY_Press_Button+0x98>)
 800063a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800063e:	6153      	str	r3, [r2, #20]
		HAL_Delay(50);
 8000640:	2032      	movs	r0, #50	@ 0x32
 8000642:	f001 fa8d 	bl	8001b60 <HAL_Delay>
		GPIOC->ODR &= ~GPIO_PIN_13;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <KEY_Press_Button+0x98>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a12      	ldr	r2, [pc, #72]	@ (8000694 <KEY_Press_Button+0x98>)
 800064c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000650:	6153      	str	r3, [r2, #20]
		HAL_Delay(50);
 8000652:	2032      	movs	r0, #50	@ 0x32
 8000654:	f001 fa84 	bl	8001b60 <HAL_Delay>
		GPIOC->ODR |= GPIO_PIN_13;
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <KEY_Press_Button+0x98>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <KEY_Press_Button+0x98>)
 800065e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000662:	6153      	str	r3, [r2, #20]
		HAL_Delay(50);
 8000664:	2032      	movs	r0, #50	@ 0x32
 8000666:	f001 fa7b 	bl	8001b60 <HAL_Delay>
	}

	switch(case_)
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d002      	beq.n	8000676 <KEY_Press_Button+0x7a>
 8000670:	2b01      	cmp	r3, #1
 8000672:	d005      	beq.n	8000680 <KEY_Press_Button+0x84>
	case 1:  KEY_Send_Command(ID_STOP_ENGINE, COMMAND_STOP_ENGINE);  break;

	defult: Error_Handler();

	}
}
 8000674:	e009      	b.n	800068a <KEY_Press_Button+0x8e>
	case 0:  KEY_Send_Command(ID_START_ENGINE, COMMAND_START_ENGINE); break;
 8000676:	2101      	movs	r1, #1
 8000678:	2000      	movs	r0, #0
 800067a:	f000 f80d 	bl	8000698 <KEY_Send_Command>
 800067e:	e004      	b.n	800068a <KEY_Press_Button+0x8e>
	case 1:  KEY_Send_Command(ID_STOP_ENGINE, COMMAND_STOP_ENGINE);  break;
 8000680:	2101      	movs	r1, #1
 8000682:	2001      	movs	r0, #1
 8000684:	f000 f808 	bl	8000698 <KEY_Send_Command>
 8000688:	bf00      	nop
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020800 	.word	0x40020800

08000698 <KEY_Send_Command>:

static void KEY_Send_Command(uint8_t type_command,uint8_t value_command)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	uint8_t tabel_comm[2][2] = {
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <KEY_Send_Command+0x34>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	60fb      	str	r3, [r7, #12]
	    {1, 1}
	}; // arr[M][N] M — число строк (rows) N — число столбцов (columns).

//	*(command->ptr + (type_command * 2) + 1) = value_command;

	UART_Transmit(USART1, (uint8_t*)&tabel_comm[type_command][0], 2);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f107 020c 	add.w	r2, r7, #12
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	2202      	movs	r2, #2
 80006ba:	4619      	mov	r1, r3
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <KEY_Send_Command+0x38>)
 80006be:	f000 f9fb 	bl	8000ab8 <UART_Transmit>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	080063b8 	.word	0x080063b8
 80006d0:	40011000 	.word	0x40011000

080006d4 <KEY_Request_state>:
{
	UART_Receive(USART1, Recive_array, 2);
}

void KEY_Request_state(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t command[2] = {0x03, 0x01};
 80006da:	f240 1303 	movw	r3, #259	@ 0x103
 80006de:	80bb      	strh	r3, [r7, #4]

	UART_Transmit(USART1, command, 2);
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2202      	movs	r2, #2
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <KEY_Request_state+0x20>)
 80006e8:	f000 f9e6 	bl	8000ab8 <UART_Transmit>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40011000 	.word	0x40011000

080006f8 <KEY_Event>:

void KEY_Event(uint8_t* res_massage)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	uint8_t id_res_m = *(res_massage + 0);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	73fb      	strb	r3, [r7, #15]
	uint8_t com_res_m = *(res_massage + 1);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	73bb      	strb	r3, [r7, #14]

	if(id_res_m <= 0x19)
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	2b19      	cmp	r3, #25
 8000710:	d91b      	bls.n	800074a <KEY_Event+0x52>
	{


	}else if( (0x20 <= id_res_m) && (id_res_m < 0x40))
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b1f      	cmp	r3, #31
 8000716:	d909      	bls.n	800072c <KEY_Event+0x34>
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b3f      	cmp	r3, #63	@ 0x3f
 800071c:	d806      	bhi.n	800072c <KEY_Event+0x34>
	{
		KEY_Flag_State_Handler(id_res_m , com_res_m);
 800071e:	7bba      	ldrb	r2, [r7, #14]
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f889 	bl	800083c <KEY_Flag_State_Handler>
 800072a:	e00e      	b.n	800074a <KEY_Event+0x52>

	}else if((id_res_m > 0x39) && (id_res_m < 0xAA))
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	2b39      	cmp	r3, #57	@ 0x39
 8000730:	d908      	bls.n	8000744 <KEY_Event+0x4c>
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	2ba9      	cmp	r3, #169	@ 0xa9
 8000736:	d805      	bhi.n	8000744 <KEY_Event+0x4c>
	{
		KEY_Data_Handler(id_res_m, res_massage);
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f969 	bl	8000a14 <KEY_Data_Handler>
 8000742:	e002      	b.n	800074a <KEY_Event+0x52>
	}else
	{
		KEY_Error_Handler();
 8000744:	f000 f806 	bl	8000754 <KEY_Error_Handler>



//    Recive_array[0] = 0x0;
//    Recive_array[1] = 0x0;
}
 8000748:	e7ff      	b.n	800074a <KEY_Event+0x52>
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <KEY_Error_Handler>:
static void KEY_Error_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af02      	add	r7, sp, #8

	 Paint_ClearWindows(1, 130, 1 + Font16.Width * 5, 130 + Font16.Height, WHITE);
 800075a:	4b34      	ldr	r3, [pc, #208]	@ (800082c <KEY_Error_Handler+0xd8>)
 800075c:	889b      	ldrh	r3, [r3, #4]
 800075e:	461a      	mov	r2, r3
 8000760:	0092      	lsls	r2, r2, #2
 8000762:	4413      	add	r3, r2
 8000764:	b29b      	uxth	r3, r3
 8000766:	3301      	adds	r3, #1
 8000768:	b29a      	uxth	r2, r3
 800076a:	4b30      	ldr	r3, [pc, #192]	@ (800082c <KEY_Error_Handler+0xd8>)
 800076c:	88db      	ldrh	r3, [r3, #6]
 800076e:	3382      	adds	r3, #130	@ 0x82
 8000770:	b29b      	uxth	r3, r3
 8000772:	21ff      	movs	r1, #255	@ 0xff
 8000774:	9100      	str	r1, [sp, #0]
 8000776:	2182      	movs	r1, #130	@ 0x82
 8000778:	2001      	movs	r0, #1
 800077a:	f004 f9ed 	bl	8004b58 <Paint_ClearWindows>
	 Paint_DrawString_EN(1, 130,"ERROR", &Font16, WHITE, BLACK);
 800077e:	2300      	movs	r3, #0
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	23ff      	movs	r3, #255	@ 0xff
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	4b29      	ldr	r3, [pc, #164]	@ (800082c <KEY_Error_Handler+0xd8>)
 8000788:	4a29      	ldr	r2, [pc, #164]	@ (8000830 <KEY_Error_Handler+0xdc>)
 800078a:	2182      	movs	r1, #130	@ 0x82
 800078c:	2001      	movs	r0, #1
 800078e:	f004 fab7 	bl	8004d00 <Paint_DrawString_EN>
	 EPD_1IN54_V2_DisplayPart(BlackImage);
 8000792:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <KEY_Error_Handler+0xe0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f004 fda8 	bl	80052ec <EPD_1IN54_V2_DisplayPart>
	 HAL_Delay(500);
 800079c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a0:	f001 f9de 	bl	8001b60 <HAL_Delay>
	 Paint_ClearWindows(1, 130, 1 + Font16.Width * 5, 130 + Font16.Height, WHITE);
 80007a4:	4b21      	ldr	r3, [pc, #132]	@ (800082c <KEY_Error_Handler+0xd8>)
 80007a6:	889b      	ldrh	r3, [r3, #4]
 80007a8:	461a      	mov	r2, r3
 80007aa:	0092      	lsls	r2, r2, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	3301      	adds	r3, #1
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <KEY_Error_Handler+0xd8>)
 80007b6:	88db      	ldrh	r3, [r3, #6]
 80007b8:	3382      	adds	r3, #130	@ 0x82
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	21ff      	movs	r1, #255	@ 0xff
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	2182      	movs	r1, #130	@ 0x82
 80007c2:	2001      	movs	r0, #1
 80007c4:	f004 f9c8 	bl	8004b58 <Paint_ClearWindows>
	 Paint_DrawString_EN(1, 130,"ERROR", &Font16, WHITE, BLACK);
 80007c8:	2300      	movs	r3, #0
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	23ff      	movs	r3, #255	@ 0xff
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4b16      	ldr	r3, [pc, #88]	@ (800082c <KEY_Error_Handler+0xd8>)
 80007d2:	4a17      	ldr	r2, [pc, #92]	@ (8000830 <KEY_Error_Handler+0xdc>)
 80007d4:	2182      	movs	r1, #130	@ 0x82
 80007d6:	2001      	movs	r0, #1
 80007d8:	f004 fa92 	bl	8004d00 <Paint_DrawString_EN>
	 EPD_1IN54_V2_DisplayPart(BlackImage);
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <KEY_Error_Handler+0xe0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f004 fd83 	bl	80052ec <EPD_1IN54_V2_DisplayPart>
	 HAL_Delay(500);
 80007e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ea:	f001 f9b9 	bl	8001b60 <HAL_Delay>
	 Paint_ClearWindows(1, 130, 1 + Font16.Width * 5, 130 + Font16.Height, WHITE);
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <KEY_Error_Handler+0xd8>)
 80007f0:	889b      	ldrh	r3, [r3, #4]
 80007f2:	461a      	mov	r2, r3
 80007f4:	0092      	lsls	r2, r2, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	3301      	adds	r3, #1
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <KEY_Error_Handler+0xd8>)
 8000800:	88db      	ldrh	r3, [r3, #6]
 8000802:	3382      	adds	r3, #130	@ 0x82
 8000804:	b29b      	uxth	r3, r3
 8000806:	21ff      	movs	r1, #255	@ 0xff
 8000808:	9100      	str	r1, [sp, #0]
 800080a:	2182      	movs	r1, #130	@ 0x82
 800080c:	2001      	movs	r0, #1
 800080e:	f004 f9a3 	bl	8004b58 <Paint_ClearWindows>
	 EPD_1IN54_V2_DisplayPart(BlackImage);
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <KEY_Error_Handler+0xe0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f004 fd68 	bl	80052ec <EPD_1IN54_V2_DisplayPart>
	 event_flags->Error[1] = 0x01;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <KEY_Error_Handler+0xe4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2201      	movs	r2, #1
 8000822:	71da      	strb	r2, [r3, #7]

}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000010 	.word	0x20000010
 8000830:	080063bc 	.word	0x080063bc
 8000834:	200002d4 	.word	0x200002d4
 8000838:	200001e4 	.word	0x200001e4

0800083c <KEY_Flag_State_Handler>:

static void KEY_Flag_State_Handler(uint8_t id, uint8_t comm)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af02      	add	r7, sp, #8
 8000842:	4603      	mov	r3, r0
 8000844:	460a      	mov	r2, r1
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	4613      	mov	r3, r2
 800084a:	71bb      	strb	r3, [r7, #6]
	switch(id)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b25      	cmp	r3, #37	@ 0x25
 8000850:	d002      	beq.n	8000858 <KEY_Flag_State_Handler+0x1c>
 8000852:	2b26      	cmp	r3, #38	@ 0x26
 8000854:	d072      	beq.n	800093c <KEY_Flag_State_Handler+0x100>
	break;

	defult: Error_Handler();

	}
}
 8000856:	e0ce      	b.n	80009f6 <KEY_Flag_State_Handler+0x1ba>
	case 0x25:  if(comm == 1)
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d129      	bne.n	80008b2 <KEY_Flag_State_Handler+0x76>
	 event_flags->Error[1] = 0x00;
 800085e:	4b68      	ldr	r3, [pc, #416]	@ (8000a00 <KEY_Flag_State_Handler+0x1c4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2200      	movs	r2, #0
 8000864:	71da      	strb	r2, [r3, #7]
	 event_flags->k_15[1] = 0x01;
 8000866:	4b66      	ldr	r3, [pc, #408]	@ (8000a00 <KEY_Flag_State_Handler+0x1c4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2201      	movs	r2, #1
 800086c:	70da      	strb	r2, [r3, #3]
	 Paint_ClearWindows(1, 1, 1 + Font16.Width * 5, 1 + Font16.Height, WHITE);
 800086e:	4b65      	ldr	r3, [pc, #404]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 8000870:	889b      	ldrh	r3, [r3, #4]
 8000872:	461a      	mov	r2, r3
 8000874:	0092      	lsls	r2, r2, #2
 8000876:	4413      	add	r3, r2
 8000878:	b29b      	uxth	r3, r3
 800087a:	3301      	adds	r3, #1
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b61      	ldr	r3, [pc, #388]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 8000880:	88db      	ldrh	r3, [r3, #6]
 8000882:	3301      	adds	r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	21ff      	movs	r1, #255	@ 0xff
 8000888:	9100      	str	r1, [sp, #0]
 800088a:	2101      	movs	r1, #1
 800088c:	2001      	movs	r0, #1
 800088e:	f004 f963 	bl	8004b58 <Paint_ClearWindows>
	 Paint_DrawString_EN(1, 1,"START", &Font16, BLACK, WHITE);
 8000892:	23ff      	movs	r3, #255	@ 0xff
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	2300      	movs	r3, #0
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 800089c:	4a5a      	ldr	r2, [pc, #360]	@ (8000a08 <KEY_Flag_State_Handler+0x1cc>)
 800089e:	2101      	movs	r1, #1
 80008a0:	2001      	movs	r0, #1
 80008a2:	f004 fa2d 	bl	8004d00 <Paint_DrawString_EN>
	 EPD_1IN54_V2_DisplayPart(BlackImage);
 80008a6:	4b59      	ldr	r3, [pc, #356]	@ (8000a0c <KEY_Flag_State_Handler+0x1d0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fd1e 	bl	80052ec <EPD_1IN54_V2_DisplayPart>
	break;
 80008b0:	e09e      	b.n	80009f0 <KEY_Flag_State_Handler+0x1b4>
	}else if(comm == 0)
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	f040 809b 	bne.w	80009f0 <KEY_Flag_State_Handler+0x1b4>
	 event_flags->Error[1] = 0x00;
 80008ba:	4b51      	ldr	r3, [pc, #324]	@ (8000a00 <KEY_Flag_State_Handler+0x1c4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2200      	movs	r2, #0
 80008c0:	71da      	strb	r2, [r3, #7]
	 event_flags->k_15[1] = 0x00;
 80008c2:	4b4f      	ldr	r3, [pc, #316]	@ (8000a00 <KEY_Flag_State_Handler+0x1c4>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2200      	movs	r2, #0
 80008c8:	70da      	strb	r2, [r3, #3]
	 Paint_ClearWindows(1, 1, 1 + Font16.Width * 5, 1 + Font16.Height, WHITE);
 80008ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 80008cc:	889b      	ldrh	r3, [r3, #4]
 80008ce:	461a      	mov	r2, r3
 80008d0:	0092      	lsls	r2, r2, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	3301      	adds	r3, #1
 80008d8:	b29a      	uxth	r2, r3
 80008da:	4b4a      	ldr	r3, [pc, #296]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 80008dc:	88db      	ldrh	r3, [r3, #6]
 80008de:	3301      	adds	r3, #1
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	21ff      	movs	r1, #255	@ 0xff
 80008e4:	9100      	str	r1, [sp, #0]
 80008e6:	2101      	movs	r1, #1
 80008e8:	2001      	movs	r0, #1
 80008ea:	f004 f935 	bl	8004b58 <Paint_ClearWindows>
	 Paint_DrawString_EN(1, 1,"START", &Font16, WHITE, BLACK);
 80008ee:	2300      	movs	r3, #0
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	23ff      	movs	r3, #255	@ 0xff
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	4b43      	ldr	r3, [pc, #268]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 80008f8:	4a43      	ldr	r2, [pc, #268]	@ (8000a08 <KEY_Flag_State_Handler+0x1cc>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	2001      	movs	r0, #1
 80008fe:	f004 f9ff 	bl	8004d00 <Paint_DrawString_EN>
	 EPD_1IN54_V2_DisplayPart(BlackImage);
 8000902:	4b42      	ldr	r3, [pc, #264]	@ (8000a0c <KEY_Flag_State_Handler+0x1d0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f004 fcf0 	bl	80052ec <EPD_1IN54_V2_DisplayPart>
	 Paint_ClearWindows(1, 67, 1 + Font16.Width * 5, 67 + Font16.Height, WHITE);
 800090c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 800090e:	889b      	ldrh	r3, [r3, #4]
 8000910:	461a      	mov	r2, r3
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	4413      	add	r3, r2
 8000916:	b29b      	uxth	r3, r3
 8000918:	3301      	adds	r3, #1
 800091a:	b29a      	uxth	r2, r3
 800091c:	4b39      	ldr	r3, [pc, #228]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 800091e:	88db      	ldrh	r3, [r3, #6]
 8000920:	3343      	adds	r3, #67	@ 0x43
 8000922:	b29b      	uxth	r3, r3
 8000924:	21ff      	movs	r1, #255	@ 0xff
 8000926:	9100      	str	r1, [sp, #0]
 8000928:	2143      	movs	r1, #67	@ 0x43
 800092a:	2001      	movs	r0, #1
 800092c:	f004 f914 	bl	8004b58 <Paint_ClearWindows>
	 EPD_1IN54_V2_DisplayPart(BlackImage);
 8000930:	4b36      	ldr	r3, [pc, #216]	@ (8000a0c <KEY_Flag_State_Handler+0x1d0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f004 fcd9 	bl	80052ec <EPD_1IN54_V2_DisplayPart>
	break;
 800093a:	e059      	b.n	80009f0 <KEY_Flag_State_Handler+0x1b4>
	case 0x26:  if(comm == 1)
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d129      	bne.n	8000996 <KEY_Flag_State_Handler+0x15a>
	 event_flags->Error[1] = 0x00;
 8000942:	4b2f      	ldr	r3, [pc, #188]	@ (8000a00 <KEY_Flag_State_Handler+0x1c4>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	71da      	strb	r2, [r3, #7]
	 event_flags->k_50[1] = 0x01;
 800094a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a00 <KEY_Flag_State_Handler+0x1c4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2201      	movs	r2, #1
 8000950:	705a      	strb	r2, [r3, #1]
	 Paint_ClearWindows(1, 23, 1 + Font16.Width * 7, 23 + Font16.Height, WHITE);
 8000952:	4b2c      	ldr	r3, [pc, #176]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 8000954:	889b      	ldrh	r3, [r3, #4]
 8000956:	461a      	mov	r2, r3
 8000958:	00d2      	lsls	r2, r2, #3
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	b29b      	uxth	r3, r3
 800095e:	3301      	adds	r3, #1
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b28      	ldr	r3, [pc, #160]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 8000964:	88db      	ldrh	r3, [r3, #6]
 8000966:	3317      	adds	r3, #23
 8000968:	b29b      	uxth	r3, r3
 800096a:	21ff      	movs	r1, #255	@ 0xff
 800096c:	9100      	str	r1, [sp, #0]
 800096e:	2117      	movs	r1, #23
 8000970:	2001      	movs	r0, #1
 8000972:	f004 f8f1 	bl	8004b58 <Paint_ClearWindows>
	 Paint_DrawString_EN(1, 23,"STARTER", &Font16, BLACK, WHITE);
 8000976:	23ff      	movs	r3, #255	@ 0xff
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	2300      	movs	r3, #0
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 8000980:	4a23      	ldr	r2, [pc, #140]	@ (8000a10 <KEY_Flag_State_Handler+0x1d4>)
 8000982:	2117      	movs	r1, #23
 8000984:	2001      	movs	r0, #1
 8000986:	f004 f9bb 	bl	8004d00 <Paint_DrawString_EN>
	 EPD_1IN54_V2_DisplayPart(BlackImage);
 800098a:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <KEY_Flag_State_Handler+0x1d0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f004 fcac 	bl	80052ec <EPD_1IN54_V2_DisplayPart>
	break;
 8000994:	e02e      	b.n	80009f4 <KEY_Flag_State_Handler+0x1b8>
	}else if(comm == 0)
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d12b      	bne.n	80009f4 <KEY_Flag_State_Handler+0x1b8>
	 event_flags->Error[1] = 0x00;
 800099c:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <KEY_Flag_State_Handler+0x1c4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2200      	movs	r2, #0
 80009a2:	71da      	strb	r2, [r3, #7]
	 event_flags->k_50[1] = 0x00;
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <KEY_Flag_State_Handler+0x1c4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2200      	movs	r2, #0
 80009aa:	705a      	strb	r2, [r3, #1]
	 Paint_ClearWindows(1, 23, 1 + Font16.Width * 7, 23 + Font16.Height, WHITE);
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 80009ae:	889b      	ldrh	r3, [r3, #4]
 80009b0:	461a      	mov	r2, r3
 80009b2:	00d2      	lsls	r2, r2, #3
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 80009be:	88db      	ldrh	r3, [r3, #6]
 80009c0:	3317      	adds	r3, #23
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	21ff      	movs	r1, #255	@ 0xff
 80009c6:	9100      	str	r1, [sp, #0]
 80009c8:	2117      	movs	r1, #23
 80009ca:	2001      	movs	r0, #1
 80009cc:	f004 f8c4 	bl	8004b58 <Paint_ClearWindows>
	 Paint_DrawString_EN(1, 23,"STARTER", &Font16, WHITE, BLACK);
 80009d0:	2300      	movs	r3, #0
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	23ff      	movs	r3, #255	@ 0xff
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <KEY_Flag_State_Handler+0x1c8>)
 80009da:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <KEY_Flag_State_Handler+0x1d4>)
 80009dc:	2117      	movs	r1, #23
 80009de:	2001      	movs	r0, #1
 80009e0:	f004 f98e 	bl	8004d00 <Paint_DrawString_EN>
	 EPD_1IN54_V2_DisplayPart(BlackImage);
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <KEY_Flag_State_Handler+0x1d0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f004 fc7f 	bl	80052ec <EPD_1IN54_V2_DisplayPart>
	break;
 80009ee:	e001      	b.n	80009f4 <KEY_Flag_State_Handler+0x1b8>
	break;
 80009f0:	bf00      	nop
 80009f2:	e000      	b.n	80009f6 <KEY_Flag_State_Handler+0x1ba>
	break;
 80009f4:	bf00      	nop
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200001e4 	.word	0x200001e4
 8000a04:	20000010 	.word	0x20000010
 8000a08:	080063c4 	.word	0x080063c4
 8000a0c:	200002d4 	.word	0x200002d4
 8000a10:	080063cc 	.word	0x080063cc

08000a14 <KEY_Data_Handler>:

static void KEY_Data_Handler(uint8_t id, uint8_t* data)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af02      	add	r7, sp, #8
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]

	switch(id)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2b50      	cmp	r3, #80	@ 0x50
 8000a24:	d13d      	bne.n	8000aa2 <KEY_Data_Handler+0x8e>
	{

	case 0x50:
	{
		if(event_flags->k_15[1] == 0x01)
 8000a26:	4b21      	ldr	r3, [pc, #132]	@ (8000aac <KEY_Data_Handler+0x98>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	78db      	ldrb	r3, [r3, #3]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d136      	bne.n	8000aa0 <KEY_Data_Handler+0x8c>
	     {
		 uint8_t string_[6];
		 string_[5] = '\0';
 8000a32:	2300      	movs	r3, #0
 8000a34:	737b      	strb	r3, [r7, #13]
		 for(uint8_t i = 0; i < 5; i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	e00c      	b.n	8000a56 <KEY_Data_Handler+0x42>
		 {
			 string_[i] = data[i + 1];
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	441a      	add	r2, r3
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	3310      	adds	r3, #16
 8000a4a:	443b      	add	r3, r7
 8000a4c:	f803 2c08 	strb.w	r2, [r3, #-8]
		 for(uint8_t i = 0; i < 5; i++)
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	3301      	adds	r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d9ef      	bls.n	8000a3c <KEY_Data_Handler+0x28>
		 }
		 Paint_ClearWindows(1, 67, 1 + Font16.Width * 5, 67 + Font16.Height, WHITE);
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <KEY_Data_Handler+0x9c>)
 8000a5e:	889b      	ldrh	r3, [r3, #4]
 8000a60:	461a      	mov	r2, r3
 8000a62:	0092      	lsls	r2, r2, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <KEY_Data_Handler+0x9c>)
 8000a6e:	88db      	ldrh	r3, [r3, #6]
 8000a70:	3343      	adds	r3, #67	@ 0x43
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	21ff      	movs	r1, #255	@ 0xff
 8000a76:	9100      	str	r1, [sp, #0]
 8000a78:	2143      	movs	r1, #67	@ 0x43
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f004 f86c 	bl	8004b58 <Paint_ClearWindows>
		 Paint_DrawString_EN(1, 67, (char*)string_, &Font16, WHITE, BLACK);
 8000a80:	f107 0208 	add.w	r2, r7, #8
 8000a84:	2300      	movs	r3, #0
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	23ff      	movs	r3, #255	@ 0xff
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <KEY_Data_Handler+0x9c>)
 8000a8e:	2143      	movs	r1, #67	@ 0x43
 8000a90:	2001      	movs	r0, #1
 8000a92:	f004 f935 	bl	8004d00 <Paint_DrawString_EN>
		 EPD_1IN54_V2_DisplayPart(BlackImage);
 8000a96:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <KEY_Data_Handler+0xa0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 fc26 	bl	80052ec <EPD_1IN54_V2_DisplayPart>
		 }
	}

    break;
 8000aa0:	bf00      	nop

	defult: Error_Handler();

	}
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001e4 	.word	0x200001e4
 8000ab0:	20000010 	.word	0x20000010
 8000ab4:	200002d4 	.word	0x200002d4

08000ab8 <UART_Transmit>:


void UART_Transmit(USART_TypeDef* UART,uint8_t* pData, uint32_t size)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < 3 ; i++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	e010      	b.n	8000aec <UART_Transmit+0x34>
	{
		while( (UART->SR & USART_SR_TXE) != USART_SR_TXE){}
 8000aca:	bf00      	nop
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ad4:	2b80      	cmp	r3, #128	@ 0x80
 8000ad6:	d1f9      	bne.n	8000acc <UART_Transmit+0x14>

		UART->DR = (uint8_t)start_uart[i];                     // start transmit
 8000ad8:	4a22      	ldr	r2, [pc, #136]	@ (8000b64 <UART_Transmit+0xac>)
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	4413      	add	r3, r2
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	605a      	str	r2, [r3, #4]
	for(uint32_t i = 0; i < 3 ; i++)
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d9eb      	bls.n	8000aca <UART_Transmit+0x12>
	}

	for(uint32_t i = 0; i < size ; i++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	e010      	b.n	8000b1a <UART_Transmit+0x62>
	{
	while( (UART->SR & USART_SR_TXE) != USART_SR_TXE){}
 8000af8:	bf00      	nop
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b02:	2b80      	cmp	r3, #128	@ 0x80
 8000b04:	d1f9      	bne.n	8000afa <UART_Transmit+0x42>

	UART->DR = (uint8_t)pData[i];
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	605a      	str	r2, [r3, #4]
	for(uint32_t i = 0; i < size ; i++)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	3301      	adds	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d3ea      	bcc.n	8000af8 <UART_Transmit+0x40>
	}

	for(uint8_t t = 0; t < 27; t++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	75fb      	strb	r3, [r7, #23]
 8000b26:	e00c      	b.n	8000b42 <UART_Transmit+0x8a>
	{
		while( (UART->SR & USART_SR_TXE) != USART_SR_TXE){}
 8000b28:	bf00      	nop
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b32:	2b80      	cmp	r3, #128	@ 0x80
 8000b34:	d1f9      	bne.n	8000b2a <UART_Transmit+0x72>

		UART->DR = (uint8_t)0xFF;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	22ff      	movs	r2, #255	@ 0xff
 8000b3a:	605a      	str	r2, [r3, #4]
	for(uint8_t t = 0; t < 27; t++)
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	75fb      	strb	r3, [r7, #23]
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	2b1a      	cmp	r3, #26
 8000b46:	d9ef      	bls.n	8000b28 <UART_Transmit+0x70>
	}

	while( (UART->SR & USART_SR_TC) != USART_SR_TC){}
 8000b48:	bf00      	nop
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b52:	2b40      	cmp	r3, #64	@ 0x40
 8000b54:	d1f9      	bne.n	8000b4a <UART_Transmit+0x92>

}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3724      	adds	r7, #36	@ 0x24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	20000000 	.word	0x20000000

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	@ (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db12      	blt.n	8000bdc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	490a      	ldr	r1, [pc, #40]	@ (8000be8 <__NVIC_DisableIRQ+0x44>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	3320      	adds	r3, #32
 8000bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd0:	f3bf 8f4f 	dsb	sy
}
 8000bd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bd6:	f3bf 8f6f 	isb	sy
}
 8000bda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	@ (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c46:	f000 ff19 	bl	8001a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4a:	f000 f8d5 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4e:	f000 f9e9 	bl	8001024 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c52:	f000 f9bd 	bl	8000fd0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000c56:	f000 f937 	bl	8000ec8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000c5a:	f000 f96b 	bl	8000f34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TIM2->DIER |= TIM_DIER_UIE;
 8000c5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	60d3      	str	r3, [r2, #12]
  TIM2->CR1 |= TIM_CR1_CEN;
 8000c6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6013      	str	r3, [r2, #0]

  KEY_Init();
 8000c7e:	f7ff fc77 	bl	8000570 <KEY_Init>
  USART1->CR1 |= USART_CR1_RXNEIE;
 8000c82:	4b52      	ldr	r3, [pc, #328]	@ (8000dcc <main+0x18c>)
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	4a51      	ldr	r2, [pc, #324]	@ (8000dcc <main+0x18c>)
 8000c88:	f043 0320 	orr.w	r3, r3, #32
 8000c8c:	60d3      	str	r3, [r2, #12]

  NVIC_DisableIRQ(EXTI1_IRQn);
 8000c8e:	2007      	movs	r0, #7
 8000c90:	f7ff ff88 	bl	8000ba4 <__NVIC_DisableIRQ>

 // EPD_test();
  NVIC_DisableIRQ(TIM2_IRQn);
 8000c94:	201c      	movs	r0, #28
 8000c96:	f7ff ff85 	bl	8000ba4 <__NVIC_DisableIRQ>


  DEV_Module_Init();
 8000c9a:	f003 fcd7 	bl	800464c <DEV_Module_Init>

  EPD_1IN54_V2_Init();
 8000c9e:	f004 f9cf 	bl	8005040 <EPD_1IN54_V2_Init>
  EPD_1IN54_V2_Clear();
 8000ca2:	f004 fa53 	bl	800514c <EPD_1IN54_V2_Clear>
  HAL_Delay(500);
 8000ca6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000caa:	f000 ff59 	bl	8001b60 <HAL_Delay>


  uint16_t Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
 8000cae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000cb2:	80fb      	strh	r3, [r7, #6]
  if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 fb5a 	bl	8005370 <malloc>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b43      	ldr	r3, [pc, #268]	@ (8000dd0 <main+0x190>)
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	4b42      	ldr	r3, [pc, #264]	@ (8000dd0 <main+0x190>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <main+0x90>
	  while(1);
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <main+0x8c>
  }

  Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 180, WHITE);
 8000cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd0 <main+0x190>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	23ff      	movs	r3, #255	@ 0xff
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	23b4      	movs	r3, #180	@ 0xb4
 8000cda:	22c8      	movs	r2, #200	@ 0xc8
 8000cdc:	21c8      	movs	r1, #200	@ 0xc8
 8000cde:	f003 fce1 	bl	80046a4 <Paint_NewImage>
  Paint_Clear(WHITE);
 8000ce2:	20ff      	movs	r0, #255	@ 0xff
 8000ce4:	f003 fe94 	bl	8004a10 <Paint_Clear>
  EPD_1IN54_V2_Display(BlackImage);
 8000ce8:	4b39      	ldr	r3, [pc, #228]	@ (8000dd0 <main+0x190>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f004 fa6e 	bl	80051ce <EPD_1IN54_V2_Display>
  HAL_Delay(300);
 8000cf2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cf6:	f000 ff33 	bl	8001b60 <HAL_Delay>

  Paint_DrawString_EN(1, 1,"START", &Font16, WHITE, BLACK);
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	23ff      	movs	r3, #255	@ 0xff
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	4b34      	ldr	r3, [pc, #208]	@ (8000dd4 <main+0x194>)
 8000d04:	4a34      	ldr	r2, [pc, #208]	@ (8000dd8 <main+0x198>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f003 fff9 	bl	8004d00 <Paint_DrawString_EN>
  Paint_DrawString_EN(1, 23,"STARTER", &Font16, WHITE, BLACK);
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	23ff      	movs	r3, #255	@ 0xff
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd4 <main+0x194>)
 8000d18:	4a30      	ldr	r2, [pc, #192]	@ (8000ddc <main+0x19c>)
 8000d1a:	2117      	movs	r1, #23
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f003 ffef 	bl	8004d00 <Paint_DrawString_EN>
  Paint_DrawString_EN(1, 45,"Battery Voltage:", &Font16, WHITE, BLACK);
 8000d22:	2300      	movs	r3, #0
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	23ff      	movs	r3, #255	@ 0xff
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <main+0x194>)
 8000d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8000de0 <main+0x1a0>)
 8000d2e:	212d      	movs	r1, #45	@ 0x2d
 8000d30:	2001      	movs	r0, #1
 8000d32:	f003 ffe5 	bl	8004d00 <Paint_DrawString_EN>
  Paint_DrawString_EN(1, 67,"00.00 V", &Font16, WHITE, BLACK);
 8000d36:	2300      	movs	r3, #0
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	23ff      	movs	r3, #255	@ 0xff
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	4b25      	ldr	r3, [pc, #148]	@ (8000dd4 <main+0x194>)
 8000d40:	4a28      	ldr	r2, [pc, #160]	@ (8000de4 <main+0x1a4>)
 8000d42:	2143      	movs	r1, #67	@ 0x43
 8000d44:	2001      	movs	r0, #1
 8000d46:	f003 ffdb 	bl	8004d00 <Paint_DrawString_EN>
  Paint_DrawString_EN(1, 89,"Time of start:", &Font16, WHITE, BLACK);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	23ff      	movs	r3, #255	@ 0xff
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <main+0x194>)
 8000d54:	4a24      	ldr	r2, [pc, #144]	@ (8000de8 <main+0x1a8>)
 8000d56:	2159      	movs	r1, #89	@ 0x59
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f003 ffd1 	bl	8004d00 <Paint_DrawString_EN>
  Paint_DrawString_EN(1, 111,"000 Sec", &Font16, WHITE, BLACK);
 8000d5e:	2300      	movs	r3, #0
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	23ff      	movs	r3, #255	@ 0xff
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <main+0x194>)
 8000d68:	4a20      	ldr	r2, [pc, #128]	@ (8000dec <main+0x1ac>)
 8000d6a:	216f      	movs	r1, #111	@ 0x6f
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f003 ffc7 	bl	8004d00 <Paint_DrawString_EN>

  EPD_1IN54_V2_Display(BlackImage);
 8000d72:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <main+0x190>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 fa29 	bl	80051ce <EPD_1IN54_V2_Display>

  HAL_Delay(500);
 8000d7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d80:	f000 feee 	bl	8001b60 <HAL_Delay>

  EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <main+0x190>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f004 fa55 	bl	8005238 <EPD_1IN54_V2_DisplayPartBaseImage>
  EPD_1IN54_V2_Init_Partial();
 8000d8e:	f004 f99d 	bl	80050cc <EPD_1IN54_V2_Init_Partial>
  Paint_SelectImage(BlackImage);
 8000d92:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <main+0x190>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 fcda 	bl	8004750 <Paint_SelectImage>

  HAL_Delay(1000);
 8000d9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000da0:	f000 fede 	bl	8001b60 <HAL_Delay>

  NVIC_EnableIRQ(TIM2_IRQn);
 8000da4:	201c      	movs	r0, #28
 8000da6:	f7ff fedf 	bl	8000b68 <__NVIC_EnableIRQ>

  KEY_Request_state();
 8000daa:	f7ff fc93 	bl	80006d4 <KEY_Request_state>
//		KEY_Press_Button();
//
//	}


	  if(!state)
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <main+0x1b0>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	f083 0301 	eor.w	r3, r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f8      	beq.n	8000dae <main+0x16e>
	  {
		KEY_Event(Recive_array);
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <main+0x1b4>)
 8000dbe:	f7ff fc9b 	bl	80006f8 <KEY_Event>
		state = 1;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <main+0x1b0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
	  if(!state)
 8000dc8:	e7f1      	b.n	8000dae <main+0x16e>
 8000dca:	bf00      	nop
 8000dcc:	40011000 	.word	0x40011000
 8000dd0:	200002d4 	.word	0x200002d4
 8000dd4:	20000010 	.word	0x20000010
 8000dd8:	080063d4 	.word	0x080063d4
 8000ddc:	080063dc 	.word	0x080063dc
 8000de0:	080063e4 	.word	0x080063e4
 8000de4:	080063f8 	.word	0x080063f8
 8000de8:	08006400 	.word	0x08006400
 8000dec:	08006410 	.word	0x08006410
 8000df0:	20000003 	.word	0x20000003
 8000df4:	200001d8 	.word	0x200001d8

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	@ 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2230      	movs	r2, #48	@ 0x30
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 fd80 	bl	800590c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	4b27      	ldr	r3, [pc, #156]	@ (8000ec0 <SystemClock_Config+0xc8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	4a26      	ldr	r2, [pc, #152]	@ (8000ec0 <SystemClock_Config+0xc8>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2c:	4b24      	ldr	r3, [pc, #144]	@ (8000ec0 <SystemClock_Config+0xc8>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <SystemClock_Config+0xcc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a20      	ldr	r2, [pc, #128]	@ (8000ec4 <SystemClock_Config+0xcc>)
 8000e42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <SystemClock_Config+0xcc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e54:	2301      	movs	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000e68:	230c      	movs	r3, #12
 8000e6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000e6c:	2360      	movs	r3, #96	@ 0x60
 8000e6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 f9d5 	bl	800222c <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e88:	f000 fa06 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2302      	movs	r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 fc37 	bl	800271c <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eb4:	f000 f9f0 	bl	8001298 <Error_Handler>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3750      	adds	r7, #80	@ 0x50
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000ece:	4a18      	ldr	r2, [pc, #96]	@ (8000f30 <MX_SPI1_Init+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000ed4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000efc:	2210      	movs	r2, #16
 8000efe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000f14:	220a      	movs	r2, #10
 8000f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_SPI1_Init+0x64>)
 8000f1a:	f001 fddf 	bl	8002adc <HAL_SPI_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f24:	f000 f9b8 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200001ec 	.word	0x200001ec
 8000f30:	40013000 	.word	0x40013000

08000f34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f50:	4b1e      	ldr	r3, [pc, #120]	@ (8000fcc <MX_TIM2_Init+0x98>)
 8000f52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <MX_TIM2_Init+0x98>)
 8000f5a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000f5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <MX_TIM2_Init+0x98>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <MX_TIM2_Init+0x98>)
 8000f68:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_TIM2_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <MX_TIM2_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7a:	4814      	ldr	r0, [pc, #80]	@ (8000fcc <MX_TIM2_Init+0x98>)
 8000f7c:	f002 f856 	bl	800302c <HAL_TIM_Base_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f86:	f000 f987 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4619      	mov	r1, r3
 8000f96:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <MX_TIM2_Init+0x98>)
 8000f98:	f002 f987 	bl	80032aa <HAL_TIM_ConfigClockSource>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fa2:	f000 f979 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	@ (8000fcc <MX_TIM2_Init+0x98>)
 8000fb4:	f002 fb98 	bl	80036e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fbe:	f000 f96b 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000244 	.word	0x20000244

08000fd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <MX_USART1_UART_Init+0x4c>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <MX_USART1_UART_Init+0x50>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <MX_USART1_UART_Init+0x4c>)
 8000fdc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_USART1_UART_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <MX_USART1_UART_Init+0x4c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <MX_USART1_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_USART1_UART_Init+0x4c>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <MX_USART1_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_USART1_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_USART1_UART_Init+0x4c>)
 8001008:	f002 fbf0 	bl	80037ec <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001012:	f000 f941 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000028c 	.word	0x2000028c
 8001020:	40011000 	.word	0x40011000

08001024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/*
 * For PIN PA0
 */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b90      	ldr	r3, [pc, #576]	@ (8001280 <MX_GPIO_Init+0x25c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a8f      	ldr	r2, [pc, #572]	@ (8001280 <MX_GPIO_Init+0x25c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b8d      	ldr	r3, [pc, #564]	@ (8001280 <MX_GPIO_Init+0x25c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
GPIOA->MODER &= ~GPIO_MODER_MODER0;
 8001056:	4b8b      	ldr	r3, [pc, #556]	@ (8001284 <MX_GPIO_Init+0x260>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a8a      	ldr	r2, [pc, #552]	@ (8001284 <MX_GPIO_Init+0x260>)
 800105c:	f023 0303 	bic.w	r3, r3, #3
 8001060:	6013      	str	r3, [r2, #0]
GPIOA->PUPDR |= GPIO_PUPDR_PUPD0_0;
 8001062:	4b88      	ldr	r3, [pc, #544]	@ (8001284 <MX_GPIO_Init+0x260>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	4a87      	ldr	r2, [pc, #540]	@ (8001284 <MX_GPIO_Init+0x260>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	60d3      	str	r3, [r2, #12]
SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
 800106e:	4b86      	ldr	r3, [pc, #536]	@ (8001288 <MX_GPIO_Init+0x264>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	4a85      	ldr	r2, [pc, #532]	@ (8001288 <MX_GPIO_Init+0x264>)
 8001074:	f023 030f 	bic.w	r3, r3, #15
 8001078:	6093      	str	r3, [r2, #8]
EXTI->EMR |= EXTI_EMR_EM0;
 800107a:	4b84      	ldr	r3, [pc, #528]	@ (800128c <MX_GPIO_Init+0x268>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a83      	ldr	r2, [pc, #524]	@ (800128c <MX_GPIO_Init+0x268>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6053      	str	r3, [r2, #4]
EXTI->IMR |= EXTI_IMR_IM0;
 8001086:	4b81      	ldr	r3, [pc, #516]	@ (800128c <MX_GPIO_Init+0x268>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a80      	ldr	r2, [pc, #512]	@ (800128c <MX_GPIO_Init+0x268>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6013      	str	r3, [r2, #0]
EXTI->FTSR |= EXTI_FTSR_TR0;
 8001092:	4b7e      	ldr	r3, [pc, #504]	@ (800128c <MX_GPIO_Init+0x268>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	4a7d      	ldr	r2, [pc, #500]	@ (800128c <MX_GPIO_Init+0x268>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	60d3      	str	r3, [r2, #12]
EXTI->RTSR &= ~EXTI_RTSR_TR0;
 800109e:	4b7b      	ldr	r3, [pc, #492]	@ (800128c <MX_GPIO_Init+0x268>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	4a7a      	ldr	r2, [pc, #488]	@ (800128c <MX_GPIO_Init+0x268>)
 80010a4:	f023 0301 	bic.w	r3, r3, #1
 80010a8:	6093      	str	r3, [r2, #8]
EXTI->PR |= EXTI_PR_PR0;
 80010aa:	4b78      	ldr	r3, [pc, #480]	@ (800128c <MX_GPIO_Init+0x268>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a77      	ldr	r2, [pc, #476]	@ (800128c <MX_GPIO_Init+0x268>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6153      	str	r3, [r2, #20]
NVIC_SetPriority(EXTI0_IRQn, 7);
 80010b6:	2107      	movs	r1, #7
 80010b8:	2006      	movs	r0, #6
 80010ba:	f7ff fd97 	bl	8000bec <__NVIC_SetPriority>
NVIC_EnableIRQ(EXTI0_IRQn);
 80010be:	2006      	movs	r0, #6
 80010c0:	f7ff fd52 	bl	8000b68 <__NVIC_EnableIRQ>

/*
 * For PIN PA15
 */

GPIOA->MODER &= ~GPIO_MODER_MODER15;
 80010c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001284 <MX_GPIO_Init+0x260>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a6e      	ldr	r2, [pc, #440]	@ (8001284 <MX_GPIO_Init+0x260>)
 80010ca:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80010ce:	6013      	str	r3, [r2, #0]
GPIOA->PUPDR |= GPIO_PUPDR_PUPD15_0;
 80010d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001284 <MX_GPIO_Init+0x260>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	4a6b      	ldr	r2, [pc, #428]	@ (8001284 <MX_GPIO_Init+0x260>)
 80010d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010da:	60d3      	str	r3, [r2, #12]
SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI3;
 80010dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001288 <MX_GPIO_Init+0x264>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	4a69      	ldr	r2, [pc, #420]	@ (8001288 <MX_GPIO_Init+0x264>)
 80010e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80010e6:	6153      	str	r3, [r2, #20]
EXTI->EMR |= EXTI_EMR_EM15;
 80010e8:	4b68      	ldr	r3, [pc, #416]	@ (800128c <MX_GPIO_Init+0x268>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a67      	ldr	r2, [pc, #412]	@ (800128c <MX_GPIO_Init+0x268>)
 80010ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010f2:	6053      	str	r3, [r2, #4]
EXTI->IMR |= EXTI_IMR_IM15;
 80010f4:	4b65      	ldr	r3, [pc, #404]	@ (800128c <MX_GPIO_Init+0x268>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a64      	ldr	r2, [pc, #400]	@ (800128c <MX_GPIO_Init+0x268>)
 80010fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010fe:	6013      	str	r3, [r2, #0]
EXTI->FTSR |= EXTI_FTSR_TR15;
 8001100:	4b62      	ldr	r3, [pc, #392]	@ (800128c <MX_GPIO_Init+0x268>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4a61      	ldr	r2, [pc, #388]	@ (800128c <MX_GPIO_Init+0x268>)
 8001106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800110a:	60d3      	str	r3, [r2, #12]
EXTI->RTSR &= ~EXTI_RTSR_TR15;
 800110c:	4b5f      	ldr	r3, [pc, #380]	@ (800128c <MX_GPIO_Init+0x268>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4a5e      	ldr	r2, [pc, #376]	@ (800128c <MX_GPIO_Init+0x268>)
 8001112:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001116:	6093      	str	r3, [r2, #8]
EXTI->PR |= EXTI_PR_PR15;
 8001118:	4b5c      	ldr	r3, [pc, #368]	@ (800128c <MX_GPIO_Init+0x268>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	4a5b      	ldr	r2, [pc, #364]	@ (800128c <MX_GPIO_Init+0x268>)
 800111e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001122:	6153      	str	r3, [r2, #20]
NVIC_SetPriority(EXTI15_10_IRQn, 4);
 8001124:	2104      	movs	r1, #4
 8001126:	2028      	movs	r0, #40	@ 0x28
 8001128:	f7ff fd60 	bl	8000bec <__NVIC_SetPriority>
NVIC_EnableIRQ(EXTI15_10_IRQn);
 800112c:	2028      	movs	r0, #40	@ 0x28
 800112e:	f7ff fd1b 	bl	8000b68 <__NVIC_EnableIRQ>


/*
 * For PIN PB0
 */
__HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b52      	ldr	r3, [pc, #328]	@ (8001280 <MX_GPIO_Init+0x25c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a51      	ldr	r2, [pc, #324]	@ (8001280 <MX_GPIO_Init+0x25c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <MX_GPIO_Init+0x25c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
//NVIC_EnableIRQ(EXTI1_IRQn);

/*
 * For PIN PB5
 */
GPIOB->MODER &= ~(0x3U << 10);
 800114e:	4b50      	ldr	r3, [pc, #320]	@ (8001290 <MX_GPIO_Init+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a4f      	ldr	r2, [pc, #316]	@ (8001290 <MX_GPIO_Init+0x26c>)
 8001154:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001158:	6013      	str	r3, [r2, #0]
GPIOB->PUPDR |= GPIO_PUPDR_PUPD5_0;
 800115a:	4b4d      	ldr	r3, [pc, #308]	@ (8001290 <MX_GPIO_Init+0x26c>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	4a4c      	ldr	r2, [pc, #304]	@ (8001290 <MX_GPIO_Init+0x26c>)
 8001160:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001164:	60d3      	str	r3, [r2, #12]
SYSCFG->EXTICR[1] |= (0x1UL << SYSCFG_EXTICR1_EXTI1_Pos);
 8001166:	4b48      	ldr	r3, [pc, #288]	@ (8001288 <MX_GPIO_Init+0x264>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	4a47      	ldr	r2, [pc, #284]	@ (8001288 <MX_GPIO_Init+0x264>)
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	60d3      	str	r3, [r2, #12]
EXTI->EMR |= EXTI_EMR_EM5;
 8001172:	4b46      	ldr	r3, [pc, #280]	@ (800128c <MX_GPIO_Init+0x268>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4a45      	ldr	r2, [pc, #276]	@ (800128c <MX_GPIO_Init+0x268>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	6053      	str	r3, [r2, #4]
EXTI->IMR |= EXTI_IMR_IM5;
 800117e:	4b43      	ldr	r3, [pc, #268]	@ (800128c <MX_GPIO_Init+0x268>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a42      	ldr	r2, [pc, #264]	@ (800128c <MX_GPIO_Init+0x268>)
 8001184:	f043 0320 	orr.w	r3, r3, #32
 8001188:	6013      	str	r3, [r2, #0]
EXTI->FTSR |= EXTI_FTSR_TR5;
 800118a:	4b40      	ldr	r3, [pc, #256]	@ (800128c <MX_GPIO_Init+0x268>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	4a3f      	ldr	r2, [pc, #252]	@ (800128c <MX_GPIO_Init+0x268>)
 8001190:	f043 0320 	orr.w	r3, r3, #32
 8001194:	60d3      	str	r3, [r2, #12]
EXTI->RTSR &= ~EXTI_RTSR_TR5;
 8001196:	4b3d      	ldr	r3, [pc, #244]	@ (800128c <MX_GPIO_Init+0x268>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	4a3c      	ldr	r2, [pc, #240]	@ (800128c <MX_GPIO_Init+0x268>)
 800119c:	f023 0320 	bic.w	r3, r3, #32
 80011a0:	6093      	str	r3, [r2, #8]
EXTI->PR |= EXTI_PR_PR5;
 80011a2:	4b3a      	ldr	r3, [pc, #232]	@ (800128c <MX_GPIO_Init+0x268>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a39      	ldr	r2, [pc, #228]	@ (800128c <MX_GPIO_Init+0x268>)
 80011a8:	f043 0320 	orr.w	r3, r3, #32
 80011ac:	6153      	str	r3, [r2, #20]

NVIC_SetPriority(EXTI9_5_IRQn, 5);
 80011ae:	2105      	movs	r1, #5
 80011b0:	2017      	movs	r0, #23
 80011b2:	f7ff fd1b 	bl	8000bec <__NVIC_SetPriority>
NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011b6:	2017      	movs	r0, #23
 80011b8:	f7ff fcd6 	bl	8000b68 <__NVIC_EnableIRQ>

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001280 <MX_GPIO_Init+0x25c>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001280 <MX_GPIO_Init+0x25c>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80011cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <MX_GPIO_Init+0x25c>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4b28      	ldr	r3, [pc, #160]	@ (8001280 <MX_GPIO_Init+0x25c>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	4a27      	ldr	r2, [pc, #156]	@ (8001280 <MX_GPIO_Init+0x25c>)
 80011e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e8:	4b25      	ldr	r3, [pc, #148]	@ (8001280 <MX_GPIO_Init+0x25c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <MX_GPIO_Init+0x25c>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fc:	4a20      	ldr	r2, [pc, #128]	@ (8001280 <MX_GPIO_Init+0x25c>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6313      	str	r3, [r2, #48]	@ 0x30
 8001204:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <MX_GPIO_Init+0x25c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001216:	481f      	ldr	r0, [pc, #124]	@ (8001294 <MX_GPIO_Init+0x270>)
 8001218:	f000 ffee 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2116      	movs	r1, #22
 8001220:	4818      	ldr	r0, [pc, #96]	@ (8001284 <MX_GPIO_Init+0x260>)
 8001222:	f000 ffe9 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001226:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4815      	ldr	r0, [pc, #84]	@ (8001294 <MX_GPIO_Init+0x270>)
 8001240:	f000 fe56 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 8001244:	2316      	movs	r3, #22
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	480a      	ldr	r0, [pc, #40]	@ (8001284 <MX_GPIO_Init+0x260>)
 800125c:	f000 fe48 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8001260:	2308      	movs	r3, #8
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001268:	2302      	movs	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4804      	ldr	r0, [pc, #16]	@ (8001284 <MX_GPIO_Init+0x260>)
 8001274:	f000 fe3c 	bl	8001ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	@ 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000
 8001288:	40013800 	.word	0x40013800
 800128c:	40013c00 	.word	0x40013c00
 8001290:	40020400 	.word	0x40020400
 8001294:	40020800 	.word	0x40020800

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <Error_Handler+0x8>

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	4a0f      	ldr	r2, [pc, #60]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	@ 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	@ (8001378 <HAL_SPI_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12b      	bne.n	800136e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b18      	ldr	r3, [pc, #96]	@ (800137c <HAL_SPI_MspInit+0x88>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	4a17      	ldr	r2, [pc, #92]	@ (800137c <HAL_SPI_MspInit+0x88>)
 8001320:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001324:	6453      	str	r3, [r2, #68]	@ 0x44
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <HAL_SPI_MspInit+0x88>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <HAL_SPI_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a10      	ldr	r2, [pc, #64]	@ (800137c <HAL_SPI_MspInit+0x88>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <HAL_SPI_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = CLK_Pin|DIN_Pin;
 800134e:	23a0      	movs	r3, #160	@ 0xa0
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135e:	2305      	movs	r3, #5
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	@ (8001380 <HAL_SPI_MspInit+0x8c>)
 800136a:	f000 fdc1 	bl	8001ef0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	@ 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40013000 	.word	0x40013000
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000

08001384 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001394:	d115      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_TIM_Base_MspInit+0x48>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <HAL_TIM_Base_MspInit+0x48>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_TIM_Base_MspInit+0x48>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	210a      	movs	r1, #10
 80013b6:	201c      	movs	r0, #28
 80013b8:	f000 fcd1 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013bc:	201c      	movs	r0, #28
 80013be:	f000 fcea 	bl	8001d96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001464 <HAL_UART_MspInit+0x94>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d134      	bne.n	800145c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <HAL_UART_MspInit+0x98>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <HAL_UART_MspInit+0x98>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_UART_MspInit+0x98>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <HAL_UART_MspInit+0x98>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a14      	ldr	r2, [pc, #80]	@ (8001468 <HAL_UART_MspInit+0x98>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_UART_MspInit+0x98>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800142a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001434:	2301      	movs	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800143c:	2307      	movs	r3, #7
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	4809      	ldr	r0, [pc, #36]	@ (800146c <HAL_UART_MspInit+0x9c>)
 8001448:	f000 fd52 	bl	8001ef0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2103      	movs	r1, #3
 8001450:	2025      	movs	r0, #37	@ 0x25
 8001452:	f000 fc84 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001456:	2025      	movs	r0, #37	@ 0x25
 8001458:	f000 fc9d 	bl	8001d96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	@ 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40011000 	.word	0x40011000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <__NVIC_EnableIRQ>:
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4907      	ldr	r1, [pc, #28]	@ (80014a8 <__NVIC_EnableIRQ+0x38>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_DisableIRQ>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db12      	blt.n	80014e4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	490a      	ldr	r1, [pc, #40]	@ (80014f0 <__NVIC_DisableIRQ+0x44>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	3320      	adds	r3, #32
 80014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80014d8:	f3bf 8f4f 	dsb	sy
}
 80014dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014de:	f3bf 8f6f 	isb	sy
}
 80014e2:	bf00      	nop
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <NMI_Handler+0x4>

080014fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <MemManage_Handler+0x4>

0800150c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <UsageFault_Handler+0x4>

0800151c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154a:	f000 fae9 	bl	8001b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */
	refresh_e_ink_cnt++;
 800155a:	4b43      	ldr	r3, [pc, #268]	@ (8001668 <TIM2_IRQHandler+0x114>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	4a41      	ldr	r2, [pc, #260]	@ (8001668 <TIM2_IRQHandler+0x114>)
 8001562:	6013      	str	r3, [r2, #0]

	if( (refresh_e_ink_cnt > 30) && !falg_disp_sleep)
 8001564:	4b40      	ldr	r3, [pc, #256]	@ (8001668 <TIM2_IRQHandler+0x114>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b1e      	cmp	r3, #30
 800156a:	d916      	bls.n	800159a <TIM2_IRQHandler+0x46>
 800156c:	4b3f      	ldr	r3, [pc, #252]	@ (800166c <TIM2_IRQHandler+0x118>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	f083 0301 	eor.w	r3, r3, #1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00f      	beq.n	800159a <TIM2_IRQHandler+0x46>
	{
//	    EPD_1IN54_V2_Init();
		EPD_1IN54_V2_ReadBusy();
 800157a:	f003 fc6d 	bl	8004e58 <EPD_1IN54_V2_ReadBusy>
	    EPD_1IN54_V2_Init();
 800157e:	f003 fd5f 	bl	8005040 <EPD_1IN54_V2_Init>
	    EPD_1IN54_V2_Clear();
 8001582:	f003 fde3 	bl	800514c <EPD_1IN54_V2_Clear>
	    EPD_1IN54_V2_Sleep();
 8001586:	f003 fee6 	bl	8005356 <EPD_1IN54_V2_Sleep>
	    DEV_Module_Exit();
 800158a:	f003 f875 	bl	8004678 <DEV_Module_Exit>
	    refresh_e_ink_cnt = 0;
 800158e:	4b36      	ldr	r3, [pc, #216]	@ (8001668 <TIM2_IRQHandler+0x114>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
	    falg_disp_sleep = 1;
 8001594:	4b35      	ldr	r3, [pc, #212]	@ (800166c <TIM2_IRQHandler+0x118>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
	}

	if(event_flags->k_15[1])
 800159a:	4b35      	ldr	r3, [pc, #212]	@ (8001670 <TIM2_IRQHandler+0x11c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	78db      	ldrb	r3, [r3, #3]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d036      	beq.n	8001614 <TIM2_IRQHandler+0xc0>
	{
		uint8_t string_[4];
		string_[3] = '\0';
 80015a6:	2300      	movs	r3, #0
 80015a8:	71fb      	strb	r3, [r7, #7]
		start_time++;
 80015aa:	4b32      	ldr	r3, [pc, #200]	@ (8001674 <TIM2_IRQHandler+0x120>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a30      	ldr	r2, [pc, #192]	@ (8001674 <TIM2_IRQHandler+0x120>)
 80015b2:	6013      	str	r3, [r2, #0]
		sprintf((char*)string_,"%d",start_time);
 80015b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001674 <TIM2_IRQHandler+0x120>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	492f      	ldr	r1, [pc, #188]	@ (8001678 <TIM2_IRQHandler+0x124>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 f8ad 	bl	800571c <siprintf>
	    Paint_ClearWindows(1, 111, 1 + Font16.Width * 3, 111 + Font16.Height, WHITE);
 80015c2:	4b2e      	ldr	r3, [pc, #184]	@ (800167c <TIM2_IRQHandler+0x128>)
 80015c4:	889b      	ldrh	r3, [r3, #4]
 80015c6:	461a      	mov	r2, r3
 80015c8:	0052      	lsls	r2, r2, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <TIM2_IRQHandler+0x128>)
 80015d4:	88db      	ldrh	r3, [r3, #6]
 80015d6:	336f      	adds	r3, #111	@ 0x6f
 80015d8:	b29b      	uxth	r3, r3
 80015da:	21ff      	movs	r1, #255	@ 0xff
 80015dc:	9100      	str	r1, [sp, #0]
 80015de:	216f      	movs	r1, #111	@ 0x6f
 80015e0:	2001      	movs	r0, #1
 80015e2:	f003 fab9 	bl	8004b58 <Paint_ClearWindows>
	    Paint_DrawString_EN(1, 111, (char*)string_, &Font16, WHITE, BLACK);
 80015e6:	1d3a      	adds	r2, r7, #4
 80015e8:	2300      	movs	r3, #0
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	23ff      	movs	r3, #255	@ 0xff
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <TIM2_IRQHandler+0x128>)
 80015f2:	216f      	movs	r1, #111	@ 0x6f
 80015f4:	2001      	movs	r0, #1
 80015f6:	f003 fb83 	bl	8004d00 <Paint_DrawString_EN>
	    if(!falg_disp_sleep)
 80015fa:	4b1c      	ldr	r3, [pc, #112]	@ (800166c <TIM2_IRQHandler+0x118>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	f083 0301 	eor.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01f      	beq.n	8001648 <TIM2_IRQHandler+0xf4>
	    {
		    EPD_1IN54_V2_DisplayPart(BlackImage);
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <TIM2_IRQHandler+0x12c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fe6d 	bl	80052ec <EPD_1IN54_V2_DisplayPart>
 8001612:	e019      	b.n	8001648 <TIM2_IRQHandler+0xf4>
	    }
	}else{
	    Paint_ClearWindows(1, 111, 1 + Font16.Width * 3, 111 + Font16.Height, WHITE);
 8001614:	4b19      	ldr	r3, [pc, #100]	@ (800167c <TIM2_IRQHandler+0x128>)
 8001616:	889b      	ldrh	r3, [r3, #4]
 8001618:	461a      	mov	r2, r3
 800161a:	0052      	lsls	r2, r2, #1
 800161c:	4413      	add	r3, r2
 800161e:	b29b      	uxth	r3, r3
 8001620:	3301      	adds	r3, #1
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b15      	ldr	r3, [pc, #84]	@ (800167c <TIM2_IRQHandler+0x128>)
 8001626:	88db      	ldrh	r3, [r3, #6]
 8001628:	336f      	adds	r3, #111	@ 0x6f
 800162a:	b29b      	uxth	r3, r3
 800162c:	21ff      	movs	r1, #255	@ 0xff
 800162e:	9100      	str	r1, [sp, #0]
 8001630:	216f      	movs	r1, #111	@ 0x6f
 8001632:	2001      	movs	r0, #1
 8001634:	f003 fa90 	bl	8004b58 <Paint_ClearWindows>
	    EPD_1IN54_V2_DisplayPart(BlackImage);
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <TIM2_IRQHandler+0x12c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fe55 	bl	80052ec <EPD_1IN54_V2_DisplayPart>
		start_time = 0;
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <TIM2_IRQHandler+0x120>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001648:	480e      	ldr	r0, [pc, #56]	@ (8001684 <TIM2_IRQHandler+0x130>)
 800164a:	f001 fd3e 	bl	80030ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TIM2->SR &= ~TIM_SR_UIF;
 800164e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM2_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200001d0 	.word	0x200001d0
 800166c:	200001d4 	.word	0x200001d4
 8001670:	200001e4 	.word	0x200001e4
 8001674:	200002d8 	.word	0x200002d8
 8001678:	08006418 	.word	0x08006418
 800167c:	20000010 	.word	0x20000010
 8001680:	200002d4 	.word	0x200002d4
 8001684:	20000244 	.word	0x20000244

08001688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	static uint32_t cnt = 0;
	uint8_t data1 = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	71fb      	strb	r3, [r7, #7]
	static bool SByte1 = 0;
	static bool SByte2 = 0;
	static bool SByte3 = 0;
	static bool enter = 0;

    if(enter)
 8001692:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <USART1_IRQHandler+0xb4>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d029      	beq.n	80016ee <USART1_IRQHandler+0x66>
    {
    	while(cnt < 6)
 800169a:	e012      	b.n	80016c2 <USART1_IRQHandler+0x3a>
    	{
    		while((USART1->SR & USART_SR_RXNE) != USART_SR_RXNE){}
 800169c:	bf00      	nop
 800169e:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <USART1_IRQHandler+0xb8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	2b20      	cmp	r3, #32
 80016a8:	d1f9      	bne.n	800169e <USART1_IRQHandler+0x16>
    		Recive_array[cnt] = (uint8_t)(USART1->DR & 0xFF);
 80016aa:	4b25      	ldr	r3, [pc, #148]	@ (8001740 <USART1_IRQHandler+0xb8>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4b25      	ldr	r3, [pc, #148]	@ (8001744 <USART1_IRQHandler+0xbc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	b2d1      	uxtb	r1, r2
 80016b4:	4a24      	ldr	r2, [pc, #144]	@ (8001748 <USART1_IRQHandler+0xc0>)
 80016b6:	54d1      	strb	r1, [r2, r3]
    		cnt++;
 80016b8:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <USART1_IRQHandler+0xbc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	4a21      	ldr	r2, [pc, #132]	@ (8001744 <USART1_IRQHandler+0xbc>)
 80016c0:	6013      	str	r3, [r2, #0]
    	while(cnt < 6)
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <USART1_IRQHandler+0xbc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d9e8      	bls.n	800169c <USART1_IRQHandler+0x14>
    	}

    	SByte1 = 0;
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <USART1_IRQHandler+0xc4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
    	SByte2 = 0;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <USART1_IRQHandler+0xc8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
    	SByte3 = 0;
 80016d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001754 <USART1_IRQHandler+0xcc>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
    	enter = 0;
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <USART1_IRQHandler+0xb4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
    	cnt = 0;
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <USART1_IRQHandler+0xbc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
    	state = 0;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <USART1_IRQHandler+0xd0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
    }

    if (USART1->SR & USART_SR_RXNE) {
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <USART1_IRQHandler+0xb8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <USART1_IRQHandler+0x78>
    	data1 = (uint8_t)(USART1->DR & 0xFF);  // Чтение данных из регистра
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <USART1_IRQHandler+0xb8>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	71fb      	strb	r3, [r7, #7]
    }

    if(data1 == 0xAA)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2baa      	cmp	r3, #170	@ 0xaa
 8001704:	d103      	bne.n	800170e <USART1_IRQHandler+0x86>
    {
    	SByte1 = 1;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <USART1_IRQHandler+0xc4>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e00f      	b.n	800172e <USART1_IRQHandler+0xa6>
    }else if(data1 == 0xBB)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2bbb      	cmp	r3, #187	@ 0xbb
 8001712:	d103      	bne.n	800171c <USART1_IRQHandler+0x94>
    {
    	SByte2 = 1;
 8001714:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <USART1_IRQHandler+0xc8>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e008      	b.n	800172e <USART1_IRQHandler+0xa6>
    }else if(data1 == 0xCC)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2bcc      	cmp	r3, #204	@ 0xcc
 8001720:	d105      	bne.n	800172e <USART1_IRQHandler+0xa6>
    {
    	SByte3 = 1;
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <USART1_IRQHandler+0xcc>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
    	enter = 1;
 8001728:	4b04      	ldr	r3, [pc, #16]	@ (800173c <USART1_IRQHandler+0xb4>)
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
    }


  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800172e:	480b      	ldr	r0, [pc, #44]	@ (800175c <USART1_IRQHandler+0xd4>)
 8001730:	f002 f8ac 	bl	800388c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200002dc 	.word	0x200002dc
 8001740:	40011000 	.word	0x40011000
 8001744:	200002e0 	.word	0x200002e0
 8001748:	200001d8 	.word	0x200001d8
 800174c:	200002e4 	.word	0x200002e4
 8001750:	200002e5 	.word	0x200002e5
 8001754:	200002e6 	.word	0x200002e6
 8001758:	20000003 	.word	0x20000003
 800175c:	2000028c 	.word	0x2000028c

08001760 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */


void EXTI9_5_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001764:	2028      	movs	r0, #40	@ 0x28
 8001766:	f7ff fea1 	bl	80014ac <__NVIC_DisableIRQ>
	HAL_Delay(250);
 800176a:	20fa      	movs	r0, #250	@ 0xfa
 800176c:	f000 f9f8 	bl	8001b60 <HAL_Delay>
	if( (GPIOB->IDR & GPIO_IDR_ID5) != GPIO_IDR_ID5)
 8001770:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <EXTI9_5_IRQHandler+0x54>)
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b20      	cmp	r3, #32
 800177a:	d002      	beq.n	8001782 <EXTI9_5_IRQHandler+0x22>
	{
		KEY_Press_Button(NUM_BUTTON_2);
 800177c:	2002      	movs	r0, #2
 800177e:	f7fe ff3d 	bl	80005fc <KEY_Press_Button>
	}
	if(falg_disp_sleep)
 8001782:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <EXTI9_5_IRQHandler+0x58>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <EXTI9_5_IRQHandler+0x2e>
	{
		EXIT_Eink_of_sleep();
 800178a:	f000 f84d 	bl	8001828 <EXIT_Eink_of_sleep>
	}
	refresh_e_ink_cnt = 0;
 800178e:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <EXTI9_5_IRQHandler+0x5c>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 8001794:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001798:	f000 f9e2 	bl	8001b60 <HAL_Delay>
	EXTI->PR |= EXTI_PR_PR5;
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <EXTI9_5_IRQHandler+0x60>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <EXTI9_5_IRQHandler+0x60>)
 80017a2:	f043 0320 	orr.w	r3, r3, #32
 80017a6:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017a8:	2028      	movs	r0, #40	@ 0x28
 80017aa:	f7ff fe61 	bl	8001470 <__NVIC_EnableIRQ>

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40020400 	.word	0x40020400
 80017b8:	200001d4 	.word	0x200001d4
 80017bc:	200001d0 	.word	0x200001d0
 80017c0:	40013c00 	.word	0x40013c00

080017c4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(EXTI9_5_IRQn);
 80017c8:	2017      	movs	r0, #23
 80017ca:	f7ff fe6f 	bl	80014ac <__NVIC_DisableIRQ>
	HAL_Delay(250);
 80017ce:	20fa      	movs	r0, #250	@ 0xfa
 80017d0:	f000 f9c6 	bl	8001b60 <HAL_Delay>
	if( (GPIOA->IDR & GPIO_IDR_ID15) != GPIO_IDR_ID15)
 80017d4:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <EXTI15_10_IRQHandler+0x54>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017e0:	d002      	beq.n	80017e8 <EXTI15_10_IRQHandler+0x24>
	{
		KEY_Press_Button(NUM_BUTTON_1);
 80017e2:	2001      	movs	r0, #1
 80017e4:	f7fe ff0a 	bl	80005fc <KEY_Press_Button>
	}
	if(falg_disp_sleep)
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <EXTI15_10_IRQHandler+0x58>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <EXTI15_10_IRQHandler+0x30>
	{
		EXIT_Eink_of_sleep();
 80017f0:	f000 f81a 	bl	8001828 <EXIT_Eink_of_sleep>
	}
	refresh_e_ink_cnt = 0;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <EXTI15_10_IRQHandler+0x5c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 80017fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017fe:	f000 f9af 	bl	8001b60 <HAL_Delay>
	EXTI->PR |= EXTI_PR_PR15;
 8001802:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <EXTI15_10_IRQHandler+0x60>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <EXTI15_10_IRQHandler+0x60>)
 8001808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800180c:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 800180e:	2017      	movs	r0, #23
 8001810:	f7ff fe2e 	bl	8001470 <__NVIC_EnableIRQ>

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40020000 	.word	0x40020000
 800181c:	200001d4 	.word	0x200001d4
 8001820:	200001d0 	.word	0x200001d0
 8001824:	40013c00 	.word	0x40013c00

08001828 <EXIT_Eink_of_sleep>:

void EXIT_Eink_of_sleep(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	DEV_Module_Init();
 800182c:	f002 ff0e 	bl	800464c <DEV_Module_Init>
	EPD_1IN54_V2_Init();
 8001830:	f003 fc06 	bl	8005040 <EPD_1IN54_V2_Init>
	EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 8001834:	4b09      	ldr	r3, [pc, #36]	@ (800185c <EXIT_Eink_of_sleep+0x34>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 fcfd 	bl	8005238 <EPD_1IN54_V2_DisplayPartBaseImage>
    EPD_1IN54_V2_Init_Partial();
 800183e:	f003 fc45 	bl	80050cc <EPD_1IN54_V2_Init_Partial>
    Paint_SelectImage(BlackImage);
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <EXIT_Eink_of_sleep+0x34>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f002 ff82 	bl	8004750 <Paint_SelectImage>
	refresh_e_ink_cnt = 0;
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <EXIT_Eink_of_sleep+0x38>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
	falg_disp_sleep = 0;
 8001852:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <EXIT_Eink_of_sleep+0x3c>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200002d4 	.word	0x200002d4
 8001860:	200001d0 	.word	0x200001d0
 8001864:	200001d4 	.word	0x200001d4

08001868 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	HAL_Delay(250);
 800186c:	20fa      	movs	r0, #250	@ 0xfa
 800186e:	f000 f977 	bl	8001b60 <HAL_Delay>
	if( (GPIOA->IDR & GPIO_IDR_ID0) != GPIO_IDR_ID0)
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <EXTI0_IRQHandler+0x44>)
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b01      	cmp	r3, #1
 800187c:	d001      	beq.n	8001882 <EXTI0_IRQHandler+0x1a>
	{
		KEY_Request_state();
 800187e:	f7fe ff29 	bl	80006d4 <KEY_Request_state>
	}
	if(falg_disp_sleep)
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <EXTI0_IRQHandler+0x48>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <EXTI0_IRQHandler+0x26>
	{
		EXIT_Eink_of_sleep();
 800188a:	f7ff ffcd 	bl	8001828 <EXIT_Eink_of_sleep>
	}
	refresh_e_ink_cnt = 0;
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <EXTI0_IRQHandler+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 8001894:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001898:	f000 f962 	bl	8001b60 <HAL_Delay>

	EXTI->PR |= EXTI_PR_PR0;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <EXTI0_IRQHandler+0x50>)
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <EXTI0_IRQHandler+0x50>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6153      	str	r3, [r2, #20]
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40020000 	.word	0x40020000
 80018b0:	200001d4 	.word	0x200001d4
 80018b4:	200001d0 	.word	0x200001d0
 80018b8:	40013c00 	.word	0x40013c00

080018bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e00a      	b.n	80018e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ce:	f3af 8000 	nop.w
 80018d2:	4601      	mov	r1, r0
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	60ba      	str	r2, [r7, #8]
 80018da:	b2ca      	uxtb	r2, r1
 80018dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbf0      	blt.n	80018ce <_read+0x12>
  }

  return len;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e009      	b.n	800191c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf1      	blt.n	8001908 <_write+0x12>
  }
  return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_close>:

int _close(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001956:	605a      	str	r2, [r3, #4]
  return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_isatty>:

int _isatty(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f003 fffe 	bl	80059c8 <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20020000 	.word	0x20020000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	200002e8 	.word	0x200002e8
 8001a00:	20000458 	.word	0x20000458

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a2c:	f7ff ffea 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a32:	490d      	ldr	r1, [pc, #52]	@ (8001a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a48:	4c0a      	ldr	r4, [pc, #40]	@ (8001a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a56:	f003 ffbd 	bl	80059d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5a:	f7ff f8f1 	bl	8000c40 <main>
  bx  lr    
 8001a5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8001a6c:	08007090 	.word	0x08007090
  ldr r2, =_sbss
 8001a70:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001a74:	20000454 	.word	0x20000454

08001a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC_IRQHandler>
	...

08001a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a80:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0d      	ldr	r2, [pc, #52]	@ (8001abc <HAL_Init+0x40>)
 8001a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <HAL_Init+0x40>)
 8001a92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	@ (8001abc <HAL_Init+0x40>)
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 f94f 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 f808 	bl	8001ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab0:	f7ff fbf8 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <HAL_InitTick+0x54>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_InitTick+0x58>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f967 	bl	8001db2 <HAL_SYSTICK_Config>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00e      	b.n	8001b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b0f      	cmp	r3, #15
 8001af2:	d80a      	bhi.n	8001b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f000 f92f 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b00:	4a06      	ldr	r2, [pc, #24]	@ (8001b1c <HAL_InitTick+0x5c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000004 	.word	0x20000004
 8001b18:	2000000c 	.word	0x2000000c
 8001b1c:	20000008 	.word	0x20000008

08001b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_IncTick+0x20>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_IncTick+0x24>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <HAL_IncTick+0x24>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	2000000c 	.word	0x2000000c
 8001b44:	200002ec 	.word	0x200002ec

08001b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <HAL_GetTick+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	200002ec 	.word	0x200002ec

08001b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff ffee 	bl	8001b48 <HAL_GetTick>
 8001b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d005      	beq.n	8001b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <HAL_Delay+0x44>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b86:	bf00      	nop
 8001b88:	f7ff ffde 	bl	8001b48 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d8f7      	bhi.n	8001b88 <HAL_Delay+0x28>
  {
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000000c 	.word	0x2000000c

08001ba8 <__NVIC_SetPriorityGrouping>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_GetPriorityGrouping>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_EnableIRQ>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db0b      	blt.n	8001c36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4907      	ldr	r1, [pc, #28]	@ (8001c44 <__NVIC_EnableIRQ+0x38>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	@ (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	@ (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	@ 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	@ 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff8e 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff29 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d70:	f7ff ff3e 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7ff ff8e 	bl	8001c9c <NVIC_EncodePriority>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff5d 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff31 	bl	8001c0c <__NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffa2 	bl	8001d04 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff feb6 	bl	8001b48 <HAL_GetTick>
 8001ddc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d008      	beq.n	8001dfc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2280      	movs	r2, #128	@ 0x80
 8001dee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e052      	b.n	8001ea2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0216 	bic.w	r2, r2, #22
 8001e0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d103      	bne.n	8001e2c <HAL_DMA_Abort+0x62>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0208 	bic.w	r2, r2, #8
 8001e3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4c:	e013      	b.n	8001e76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e4e:	f7ff fe7b 	bl	8001b48 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d90c      	bls.n	8001e76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2203      	movs	r2, #3
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e015      	b.n	8001ea2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e4      	bne.n	8001e4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	223f      	movs	r2, #63	@ 0x3f
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2280      	movs	r2, #128	@ 0x80
 8001ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e00c      	b.n	8001ee2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2205      	movs	r2, #5
 8001ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	@ 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	e159      	b.n	80021c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	f040 8148 	bne.w	80021ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d005      	beq.n	8001f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d130      	bne.n	8001fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 0201 	and.w	r2, r3, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d017      	beq.n	8001fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d123      	bne.n	8002034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	08da      	lsrs	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3208      	adds	r2, #8
 8001ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	08da      	lsrs	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3208      	adds	r2, #8
 800202e:	69b9      	ldr	r1, [r7, #24]
 8002030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0203 	and.w	r2, r3, #3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a2 	beq.w	80021ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b57      	ldr	r3, [pc, #348]	@ (80021d8 <HAL_GPIO_Init+0x2e8>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	4a56      	ldr	r2, [pc, #344]	@ (80021d8 <HAL_GPIO_Init+0x2e8>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002084:	6453      	str	r3, [r2, #68]	@ 0x44
 8002086:	4b54      	ldr	r3, [pc, #336]	@ (80021d8 <HAL_GPIO_Init+0x2e8>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002092:	4a52      	ldr	r2, [pc, #328]	@ (80021dc <HAL_GPIO_Init+0x2ec>)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a49      	ldr	r2, [pc, #292]	@ (80021e0 <HAL_GPIO_Init+0x2f0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d019      	beq.n	80020f2 <HAL_GPIO_Init+0x202>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a48      	ldr	r2, [pc, #288]	@ (80021e4 <HAL_GPIO_Init+0x2f4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_GPIO_Init+0x1fe>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a47      	ldr	r2, [pc, #284]	@ (80021e8 <HAL_GPIO_Init+0x2f8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00d      	beq.n	80020ea <HAL_GPIO_Init+0x1fa>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a46      	ldr	r2, [pc, #280]	@ (80021ec <HAL_GPIO_Init+0x2fc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d007      	beq.n	80020e6 <HAL_GPIO_Init+0x1f6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a45      	ldr	r2, [pc, #276]	@ (80021f0 <HAL_GPIO_Init+0x300>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_GPIO_Init+0x1f2>
 80020de:	2304      	movs	r3, #4
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x204>
 80020e2:	2307      	movs	r3, #7
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x204>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x204>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x204>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x204>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002104:	4935      	ldr	r1, [pc, #212]	@ (80021dc <HAL_GPIO_Init+0x2ec>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002112:	4b38      	ldr	r3, [pc, #224]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002136:	4a2f      	ldr	r2, [pc, #188]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800213c:	4b2d      	ldr	r3, [pc, #180]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002160:	4a24      	ldr	r2, [pc, #144]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002166:	4b23      	ldr	r3, [pc, #140]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800218a:	4a1a      	ldr	r2, [pc, #104]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002190:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b4:	4a0f      	ldr	r2, [pc, #60]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f aea2 	bls.w	8001f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40013c00 	.word	0x40013c00

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002214:	e003      	b.n	800221e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	041a      	lsls	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	619a      	str	r2, [r3, #24]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e267      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d075      	beq.n	8002336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224a:	4b88      	ldr	r3, [pc, #544]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b04      	cmp	r3, #4
 8002254:	d00c      	beq.n	8002270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4b85      	ldr	r3, [pc, #532]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800225e:	2b08      	cmp	r3, #8
 8002260:	d112      	bne.n	8002288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002262:	4b82      	ldr	r3, [pc, #520]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800226e:	d10b      	bne.n	8002288 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	4b7e      	ldr	r3, [pc, #504]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d05b      	beq.n	8002334 <HAL_RCC_OscConfig+0x108>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d157      	bne.n	8002334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e242      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002290:	d106      	bne.n	80022a0 <HAL_RCC_OscConfig+0x74>
 8002292:	4b76      	ldr	r3, [pc, #472]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a75      	ldr	r2, [pc, #468]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e01d      	b.n	80022dc <HAL_RCC_OscConfig+0xb0>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x98>
 80022aa:	4b70      	ldr	r3, [pc, #448]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6f      	ldr	r2, [pc, #444]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b6d      	ldr	r3, [pc, #436]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6c      	ldr	r2, [pc, #432]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0xb0>
 80022c4:	4b69      	ldr	r3, [pc, #420]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a68      	ldr	r2, [pc, #416]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b66      	ldr	r3, [pc, #408]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a65      	ldr	r2, [pc, #404]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff fc30 	bl	8001b48 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff fc2c 	bl	8001b48 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e207      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b5b      	ldr	r3, [pc, #364]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0xc0>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff fc1c 	bl	8001b48 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff fc18 	bl	8001b48 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	@ 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1f3      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	4b51      	ldr	r3, [pc, #324]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0xe8>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d063      	beq.n	800240a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002342:	4b4a      	ldr	r3, [pc, #296]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234e:	4b47      	ldr	r3, [pc, #284]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002356:	2b08      	cmp	r3, #8
 8002358:	d11c      	bne.n	8002394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235a:	4b44      	ldr	r3, [pc, #272]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d116      	bne.n	8002394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	4b41      	ldr	r3, [pc, #260]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_RCC_OscConfig+0x152>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d001      	beq.n	800237e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e1c7      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	4b3b      	ldr	r3, [pc, #236]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4937      	ldr	r1, [pc, #220]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	e03a      	b.n	800240a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800239c:	4b34      	ldr	r3, [pc, #208]	@ (8002470 <HAL_RCC_OscConfig+0x244>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7ff fbd1 	bl	8001b48 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023aa:	f7ff fbcd 	bl	8001b48 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e1a8      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	4b2b      	ldr	r3, [pc, #172]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b28      	ldr	r3, [pc, #160]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4925      	ldr	r1, [pc, #148]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023de:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <HAL_RCC_OscConfig+0x244>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7ff fbb0 	bl	8001b48 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ec:	f7ff fbac 	bl	8001b48 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e187      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d036      	beq.n	8002484 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_RCC_OscConfig+0x248>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7ff fb90 	bl	8001b48 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff fb8c 	bl	8001b48 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e167      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243e:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_RCC_OscConfig+0x240>)
 8002440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x200>
 800244a:	e01b      	b.n	8002484 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244c:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <HAL_RCC_OscConfig+0x248>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7ff fb79 	bl	8001b48 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	e00e      	b.n	8002478 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245a:	f7ff fb75 	bl	8001b48 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d907      	bls.n	8002478 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e150      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
 800246c:	40023800 	.word	0x40023800
 8002470:	42470000 	.word	0x42470000
 8002474:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002478:	4b88      	ldr	r3, [pc, #544]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800247a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ea      	bne.n	800245a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8097 	beq.w	80025c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002496:	4b81      	ldr	r3, [pc, #516]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10f      	bne.n	80024c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	4b7d      	ldr	r3, [pc, #500]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4a7c      	ldr	r2, [pc, #496]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b2:	4b7a      	ldr	r3, [pc, #488]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	4b77      	ldr	r3, [pc, #476]	@ (80026a0 <HAL_RCC_OscConfig+0x474>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d118      	bne.n	8002500 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ce:	4b74      	ldr	r3, [pc, #464]	@ (80026a0 <HAL_RCC_OscConfig+0x474>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a73      	ldr	r2, [pc, #460]	@ (80026a0 <HAL_RCC_OscConfig+0x474>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024da:	f7ff fb35 	bl	8001b48 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e2:	f7ff fb31 	bl	8001b48 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e10c      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f4:	4b6a      	ldr	r3, [pc, #424]	@ (80026a0 <HAL_RCC_OscConfig+0x474>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x2ea>
 8002508:	4b64      	ldr	r3, [pc, #400]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250c:	4a63      	ldr	r2, [pc, #396]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6713      	str	r3, [r2, #112]	@ 0x70
 8002514:	e01c      	b.n	8002550 <HAL_RCC_OscConfig+0x324>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b05      	cmp	r3, #5
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x30c>
 800251e:	4b5f      	ldr	r3, [pc, #380]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002522:	4a5e      	ldr	r2, [pc, #376]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6713      	str	r3, [r2, #112]	@ 0x70
 800252a:	4b5c      	ldr	r3, [pc, #368]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252e:	4a5b      	ldr	r2, [pc, #364]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6713      	str	r3, [r2, #112]	@ 0x70
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0x324>
 8002538:	4b58      	ldr	r3, [pc, #352]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253c:	4a57      	ldr	r2, [pc, #348]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	6713      	str	r3, [r2, #112]	@ 0x70
 8002544:	4b55      	ldr	r3, [pc, #340]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002548:	4a54      	ldr	r2, [pc, #336]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 800254a:	f023 0304 	bic.w	r3, r3, #4
 800254e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d015      	beq.n	8002584 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7ff faf6 	bl	8001b48 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f7ff faf2 	bl	8001b48 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e0cb      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002576:	4b49      	ldr	r3, [pc, #292]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0ee      	beq.n	8002560 <HAL_RCC_OscConfig+0x334>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002584:	f7ff fae0 	bl	8001b48 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7ff fadc 	bl	8001b48 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0b5      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a2:	4b3e      	ldr	r3, [pc, #248]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1ee      	bne.n	800258c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d105      	bne.n	80025c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b4:	4b39      	ldr	r3, [pc, #228]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	4a38      	ldr	r2, [pc, #224]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80025ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80a1 	beq.w	800270c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ca:	4b34      	ldr	r3, [pc, #208]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d05c      	beq.n	8002690 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d141      	bne.n	8002662 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025de:	4b31      	ldr	r3, [pc, #196]	@ (80026a4 <HAL_RCC_OscConfig+0x478>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff fab0 	bl	8001b48 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ec:	f7ff faac 	bl	8001b48 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e087      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fe:	4b27      	ldr	r3, [pc, #156]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	019b      	lsls	r3, r3, #6
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	3b01      	subs	r3, #1
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	491b      	ldr	r1, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_RCC_OscConfig+0x478>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7ff fa85 	bl	8001b48 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002642:	f7ff fa81 	bl	8001b48 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e05c      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x416>
 8002660:	e054      	b.n	800270c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <HAL_RCC_OscConfig+0x478>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff fa6e 	bl	8001b48 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7ff fa6a 	bl	8001b48 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e045      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_RCC_OscConfig+0x470>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x444>
 800268e:	e03d      	b.n	800270c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e038      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
 800269c:	40023800 	.word	0x40023800
 80026a0:	40007000 	.word	0x40007000
 80026a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <HAL_RCC_OscConfig+0x4ec>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d028      	beq.n	8002708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d121      	bne.n	8002708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d11a      	bne.n	8002708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026d8:	4013      	ands	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d111      	bne.n	8002708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	3b01      	subs	r3, #1
 80026f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002702:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0cc      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b68      	ldr	r3, [pc, #416]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d90c      	bls.n	8002758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b65      	ldr	r3, [pc, #404]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b63      	ldr	r3, [pc, #396]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0b8      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b59      	ldr	r3, [pc, #356]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800277a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002788:	4b53      	ldr	r3, [pc, #332]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a52      	ldr	r2, [pc, #328]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b50      	ldr	r3, [pc, #320]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	494d      	ldr	r1, [pc, #308]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d044      	beq.n	800283c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b47      	ldr	r3, [pc, #284]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d119      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d003      	beq.n	80027da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	4b3f      	ldr	r3, [pc, #252]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e06f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	4b3b      	ldr	r3, [pc, #236]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e067      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fa:	4b37      	ldr	r3, [pc, #220]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f023 0203 	bic.w	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4934      	ldr	r1, [pc, #208]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	4313      	orrs	r3, r2
 800280a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800280c:	f7ff f99c 	bl	8001b48 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	e00a      	b.n	800282a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	f7ff f998 	bl	8001b48 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e04f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	4b2b      	ldr	r3, [pc, #172]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 020c 	and.w	r2, r3, #12
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	429a      	cmp	r2, r3
 800283a:	d1eb      	bne.n	8002814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800283c:	4b25      	ldr	r3, [pc, #148]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d20c      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b22      	ldr	r3, [pc, #136]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e032      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4916      	ldr	r1, [pc, #88]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	490e      	ldr	r1, [pc, #56]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028a2:	f000 f821 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	490a      	ldr	r1, [pc, #40]	@ (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	5ccb      	ldrb	r3, [r1, r3]
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	4a09      	ldr	r2, [pc, #36]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028be:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f8fc 	bl	8001ac0 <HAL_InitTick>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023c00 	.word	0x40023c00
 80028d8:	40023800 	.word	0x40023800
 80028dc:	08006454 	.word	0x08006454
 80028e0:	20000004 	.word	0x20000004
 80028e4:	20000008 	.word	0x20000008

080028e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ec:	b090      	sub	sp, #64	@ 0x40
 80028ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f4:	2300      	movs	r3, #0
 80028f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028f8:	2300      	movs	r3, #0
 80028fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002900:	4b59      	ldr	r3, [pc, #356]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d00d      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x40>
 800290c:	2b08      	cmp	r3, #8
 800290e:	f200 80a1 	bhi.w	8002a54 <HAL_RCC_GetSysClockFreq+0x16c>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x34>
 8002916:	2b04      	cmp	r3, #4
 8002918:	d003      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x3a>
 800291a:	e09b      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800291c:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x184>)
 800291e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002920:	e09b      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002922:	4b53      	ldr	r3, [pc, #332]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002924:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002926:	e098      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002928:	4b4f      	ldr	r3, [pc, #316]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002930:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002932:	4b4d      	ldr	r3, [pc, #308]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d028      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	099b      	lsrs	r3, r3, #6
 8002944:	2200      	movs	r2, #0
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	627a      	str	r2, [r7, #36]	@ 0x24
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002950:	2100      	movs	r1, #0
 8002952:	4b47      	ldr	r3, [pc, #284]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002954:	fb03 f201 	mul.w	r2, r3, r1
 8002958:	2300      	movs	r3, #0
 800295a:	fb00 f303 	mul.w	r3, r0, r3
 800295e:	4413      	add	r3, r2
 8002960:	4a43      	ldr	r2, [pc, #268]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002962:	fba0 1202 	umull	r1, r2, r0, r2
 8002966:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002968:	460a      	mov	r2, r1
 800296a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800296c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800296e:	4413      	add	r3, r2
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002974:	2200      	movs	r2, #0
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	61fa      	str	r2, [r7, #28]
 800297a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002982:	f7fd fc7d 	bl	8000280 <__aeabi_uldivmod>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4613      	mov	r3, r2
 800298c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800298e:	e053      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002990:	4b35      	ldr	r3, [pc, #212]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	2200      	movs	r2, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	617a      	str	r2, [r7, #20]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029a2:	f04f 0b00 	mov.w	fp, #0
 80029a6:	4652      	mov	r2, sl
 80029a8:	465b      	mov	r3, fp
 80029aa:	f04f 0000 	mov.w	r0, #0
 80029ae:	f04f 0100 	mov.w	r1, #0
 80029b2:	0159      	lsls	r1, r3, #5
 80029b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b8:	0150      	lsls	r0, r2, #5
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	ebb2 080a 	subs.w	r8, r2, sl
 80029c2:	eb63 090b 	sbc.w	r9, r3, fp
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029da:	ebb2 0408 	subs.w	r4, r2, r8
 80029de:	eb63 0509 	sbc.w	r5, r3, r9
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	00eb      	lsls	r3, r5, #3
 80029ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029f0:	00e2      	lsls	r2, r4, #3
 80029f2:	4614      	mov	r4, r2
 80029f4:	461d      	mov	r5, r3
 80029f6:	eb14 030a 	adds.w	r3, r4, sl
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	eb45 030b 	adc.w	r3, r5, fp
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a0e:	4629      	mov	r1, r5
 8002a10:	028b      	lsls	r3, r1, #10
 8002a12:	4621      	mov	r1, r4
 8002a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a18:	4621      	mov	r1, r4
 8002a1a:	028a      	lsls	r2, r1, #10
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a22:	2200      	movs	r2, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	60fa      	str	r2, [r7, #12]
 8002a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a2c:	f7fd fc28 	bl	8000280 <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4613      	mov	r3, r2
 8002a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	3301      	adds	r3, #1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002a48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a52:	e002      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3740      	adds	r7, #64	@ 0x40
 8002a60:	46bd      	mov	sp, r7
 8002a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	017d7840 	.word	0x017d7840

08002a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000004 	.word	0x20000004

08002a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a90:	f7ff fff0 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	0a9b      	lsrs	r3, r3, #10
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4903      	ldr	r1, [pc, #12]	@ (8002ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08006464 	.word	0x08006464

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ab8:	f7ff ffdc 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	0b5b      	lsrs	r3, r3, #13
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4903      	ldr	r1, [pc, #12]	@ (8002ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08006464 	.word	0x08006464

08002adc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e07b      	b.n	8002be6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d108      	bne.n	8002b08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002afe:	d009      	beq.n	8002b14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
 8002b06:	e005      	b.n	8002b14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe fbe0 	bl	80012f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b98:	ea42 0103 	orr.w	r1, r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	0c1b      	lsrs	r3, r3, #16
 8002bb2:	f003 0104 	and.w	r1, r3, #4
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	f003 0210 	and.w	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b088      	sub	sp, #32
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_SPI_Transmit+0x22>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e12d      	b.n	8002e6c <HAL_SPI_Transmit+0x27e>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c18:	f7fe ff96 	bl	8001b48 <HAL_GetTick>
 8002c1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d002      	beq.n	8002c34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c32:	e116      	b.n	8002e62 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_SPI_Transmit+0x52>
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c44:	e10d      	b.n	8002e62 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	88fa      	ldrh	r2, [r7, #6]
 8002c5e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c8c:	d10f      	bne.n	8002cae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb8:	2b40      	cmp	r3, #64	@ 0x40
 8002cba:	d007      	beq.n	8002ccc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cd4:	d14f      	bne.n	8002d76 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_SPI_Transmit+0xf6>
 8002cde:	8afb      	ldrh	r3, [r7, #22]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d142      	bne.n	8002d6a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	881a      	ldrh	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	1c9a      	adds	r2, r3, #2
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d08:	e02f      	b.n	8002d6a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d112      	bne.n	8002d3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	881a      	ldrh	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	1c9a      	adds	r2, r3, #2
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d3c:	e015      	b.n	8002d6a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d3e:	f7fe ff03 	bl	8001b48 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d803      	bhi.n	8002d56 <HAL_SPI_Transmit+0x168>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d102      	bne.n	8002d5c <HAL_SPI_Transmit+0x16e>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002d68:	e07b      	b.n	8002e62 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ca      	bne.n	8002d0a <HAL_SPI_Transmit+0x11c>
 8002d74:	e050      	b.n	8002e18 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_SPI_Transmit+0x196>
 8002d7e:	8afb      	ldrh	r3, [r7, #22]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d144      	bne.n	8002e0e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	7812      	ldrb	r2, [r2, #0]
 8002d90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002daa:	e030      	b.n	8002e0e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d113      	bne.n	8002de2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002de0:	e015      	b.n	8002e0e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002de2:	f7fe feb1 	bl	8001b48 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d803      	bhi.n	8002dfa <HAL_SPI_Transmit+0x20c>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d102      	bne.n	8002e00 <HAL_SPI_Transmit+0x212>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002e0c:	e029      	b.n	8002e62 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1c9      	bne.n	8002dac <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f8b1 	bl	8002f84 <SPI_EndRxTxTransaction>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e003      	b.n	8002e62 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002e6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e84:	f7fe fe60 	bl	8001b48 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e94:	f7fe fe58 	bl	8001b48 <HAL_GetTick>
 8002e98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e9a:	4b39      	ldr	r3, [pc, #228]	@ (8002f80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	015b      	lsls	r3, r3, #5
 8002ea0:	0d1b      	lsrs	r3, r3, #20
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eaa:	e054      	b.n	8002f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d050      	beq.n	8002f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eb4:	f7fe fe48 	bl	8001b48 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d902      	bls.n	8002eca <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d13d      	bne.n	8002f46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ed8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ee2:	d111      	bne.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eec:	d004      	beq.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef6:	d107      	bne.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f10:	d10f      	bne.n	8002f32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e017      	b.n	8002f76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d19b      	bne.n	8002eac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000004 	.word	0x20000004

08002f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2201      	movs	r2, #1
 8002f98:	2102      	movs	r1, #2
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff ff6a 	bl	8002e74 <SPI_WaitFlagStateUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e032      	b.n	800301c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <SPI_EndRxTxTransaction+0xa0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1b      	ldr	r2, [pc, #108]	@ (8003028 <SPI_EndRxTxTransaction+0xa4>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	0d5b      	lsrs	r3, r3, #21
 8002fc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fd4:	d112      	bne.n	8002ffc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	@ 0x80
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7ff ff47 	bl	8002e74 <SPI_WaitFlagStateUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d016      	beq.n	800301a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e00f      	b.n	800301c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	3b01      	subs	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	2b80      	cmp	r3, #128	@ 0x80
 8003014:	d0f2      	beq.n	8002ffc <SPI_EndRxTxTransaction+0x78>
 8003016:	e000      	b.n	800301a <SPI_EndRxTxTransaction+0x96>
        break;
 8003018:	bf00      	nop
  }

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000004 	.word	0x20000004
 8003028:	165e9f81 	.word	0x165e9f81

0800302c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e041      	b.n	80030c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe f996 	bl	8001384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f000 fa16 	bl	800349c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d01b      	beq.n	800312e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f06f 0202 	mvn.w	r2, #2
 80030fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f9a3 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 800311a:	e005      	b.n	8003128 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f995 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f9a6 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01b      	beq.n	800317a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f06f 0204 	mvn.w	r2, #4
 800314a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f97d 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 8003166:	e005      	b.n	8003174 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f96f 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f980 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d020      	beq.n	80031c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01b      	beq.n	80031c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f06f 0208 	mvn.w	r2, #8
 8003196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2204      	movs	r2, #4
 800319c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f957 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 80031b2:	e005      	b.n	80031c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f949 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f95a 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01b      	beq.n	8003212 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f06f 0210 	mvn.w	r2, #16
 80031e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2208      	movs	r2, #8
 80031e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f931 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 80031fe:	e005      	b.n	800320c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f923 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f934 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00c      	beq.n	8003236 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f06f 0201 	mvn.w	r2, #1
 800322e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f901 	bl	8003438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00c      	beq.n	800325a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fabf 	bl	80037d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00c      	beq.n	800327e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f905 	bl	8003488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00c      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f06f 0220 	mvn.w	r2, #32
 800329a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fa91 	bl	80037c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_TIM_ConfigClockSource+0x1c>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e0b4      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x186>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032fe:	d03e      	beq.n	800337e <HAL_TIM_ConfigClockSource+0xd4>
 8003300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003304:	f200 8087 	bhi.w	8003416 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800330c:	f000 8086 	beq.w	800341c <HAL_TIM_ConfigClockSource+0x172>
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003314:	d87f      	bhi.n	8003416 <HAL_TIM_ConfigClockSource+0x16c>
 8003316:	2b70      	cmp	r3, #112	@ 0x70
 8003318:	d01a      	beq.n	8003350 <HAL_TIM_ConfigClockSource+0xa6>
 800331a:	2b70      	cmp	r3, #112	@ 0x70
 800331c:	d87b      	bhi.n	8003416 <HAL_TIM_ConfigClockSource+0x16c>
 800331e:	2b60      	cmp	r3, #96	@ 0x60
 8003320:	d050      	beq.n	80033c4 <HAL_TIM_ConfigClockSource+0x11a>
 8003322:	2b60      	cmp	r3, #96	@ 0x60
 8003324:	d877      	bhi.n	8003416 <HAL_TIM_ConfigClockSource+0x16c>
 8003326:	2b50      	cmp	r3, #80	@ 0x50
 8003328:	d03c      	beq.n	80033a4 <HAL_TIM_ConfigClockSource+0xfa>
 800332a:	2b50      	cmp	r3, #80	@ 0x50
 800332c:	d873      	bhi.n	8003416 <HAL_TIM_ConfigClockSource+0x16c>
 800332e:	2b40      	cmp	r3, #64	@ 0x40
 8003330:	d058      	beq.n	80033e4 <HAL_TIM_ConfigClockSource+0x13a>
 8003332:	2b40      	cmp	r3, #64	@ 0x40
 8003334:	d86f      	bhi.n	8003416 <HAL_TIM_ConfigClockSource+0x16c>
 8003336:	2b30      	cmp	r3, #48	@ 0x30
 8003338:	d064      	beq.n	8003404 <HAL_TIM_ConfigClockSource+0x15a>
 800333a:	2b30      	cmp	r3, #48	@ 0x30
 800333c:	d86b      	bhi.n	8003416 <HAL_TIM_ConfigClockSource+0x16c>
 800333e:	2b20      	cmp	r3, #32
 8003340:	d060      	beq.n	8003404 <HAL_TIM_ConfigClockSource+0x15a>
 8003342:	2b20      	cmp	r3, #32
 8003344:	d867      	bhi.n	8003416 <HAL_TIM_ConfigClockSource+0x16c>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d05c      	beq.n	8003404 <HAL_TIM_ConfigClockSource+0x15a>
 800334a:	2b10      	cmp	r3, #16
 800334c:	d05a      	beq.n	8003404 <HAL_TIM_ConfigClockSource+0x15a>
 800334e:	e062      	b.n	8003416 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003360:	f000 f9a2 	bl	80036a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003372:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	609a      	str	r2, [r3, #8]
      break;
 800337c:	e04f      	b.n	800341e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800338e:	f000 f98b 	bl	80036a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033a0:	609a      	str	r2, [r3, #8]
      break;
 80033a2:	e03c      	b.n	800341e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b0:	461a      	mov	r2, r3
 80033b2:	f000 f8ff 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2150      	movs	r1, #80	@ 0x50
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f958 	bl	8003672 <TIM_ITRx_SetConfig>
      break;
 80033c2:	e02c      	b.n	800341e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d0:	461a      	mov	r2, r3
 80033d2:	f000 f91e 	bl	8003612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2160      	movs	r1, #96	@ 0x60
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 f948 	bl	8003672 <TIM_ITRx_SetConfig>
      break;
 80033e2:	e01c      	b.n	800341e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f0:	461a      	mov	r2, r3
 80033f2:	f000 f8df 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2140      	movs	r1, #64	@ 0x40
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f938 	bl	8003672 <TIM_ITRx_SetConfig>
      break;
 8003402:	e00c      	b.n	800341e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f000 f92f 	bl	8003672 <TIM_ITRx_SetConfig>
      break;
 8003414:	e003      	b.n	800341e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
      break;
 800341a:	e000      	b.n	800341e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800341c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003598 <TIM_Base_SetConfig+0xfc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00f      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a37      	ldr	r2, [pc, #220]	@ (800359c <TIM_Base_SetConfig+0x100>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a36      	ldr	r2, [pc, #216]	@ (80035a0 <TIM_Base_SetConfig+0x104>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a35      	ldr	r2, [pc, #212]	@ (80035a4 <TIM_Base_SetConfig+0x108>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003598 <TIM_Base_SetConfig+0xfc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01b      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f4:	d017      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a28      	ldr	r2, [pc, #160]	@ (800359c <TIM_Base_SetConfig+0x100>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a27      	ldr	r2, [pc, #156]	@ (80035a0 <TIM_Base_SetConfig+0x104>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00f      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a26      	ldr	r2, [pc, #152]	@ (80035a4 <TIM_Base_SetConfig+0x108>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00b      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a25      	ldr	r2, [pc, #148]	@ (80035a8 <TIM_Base_SetConfig+0x10c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d007      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a24      	ldr	r2, [pc, #144]	@ (80035ac <TIM_Base_SetConfig+0x110>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d003      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a23      	ldr	r2, [pc, #140]	@ (80035b0 <TIM_Base_SetConfig+0x114>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d108      	bne.n	8003538 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800352c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a0e      	ldr	r2, [pc, #56]	@ (8003598 <TIM_Base_SetConfig+0xfc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d103      	bne.n	800356c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d105      	bne.n	800358a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f023 0201 	bic.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	611a      	str	r2, [r3, #16]
  }
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40010000 	.word	0x40010000
 800359c:	40000400 	.word	0x40000400
 80035a0:	40000800 	.word	0x40000800
 80035a4:	40000c00 	.word	0x40000c00
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40014400 	.word	0x40014400
 80035b0:	40014800 	.word	0x40014800

080035b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 030a 	bic.w	r3, r3, #10
 80035f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003612:	b480      	push	{r7}
 8003614:	b087      	sub	sp, #28
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 0210 	bic.w	r2, r3, #16
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800363c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	031b      	lsls	r3, r3, #12
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800364e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	f043 0307 	orr.w	r3, r3, #7
 8003694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	609a      	str	r2, [r3, #8]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e050      	b.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1c      	ldr	r2, [pc, #112]	@ (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d018      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374c:	d013      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a18      	ldr	r2, [pc, #96]	@ (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a16      	ldr	r2, [pc, #88]	@ (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d009      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a15      	ldr	r2, [pc, #84]	@ (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a13      	ldr	r2, [pc, #76]	@ (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10c      	bne.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800377c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4313      	orrs	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40000c00 	.word	0x40000c00
 80037c0:	40014000 	.word	0x40014000

080037c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e042      	b.n	8003884 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd fddc 	bl	80013d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2224      	movs	r2, #36	@ 0x24
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800382e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fc85 	bl	8004140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b0ba      	sub	sp, #232	@ 0xe8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80038ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HAL_UART_IRQHandler+0x66>
 80038de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fb69 	bl	8003fc2 <UART_Receive_IT>
      return;
 80038f0:	e25b      	b.n	8003daa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80de 	beq.w	8003ab8 <HAL_UART_IRQHandler+0x22c>
 80038fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800390c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80d1 	beq.w	8003ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_UART_IRQHandler+0xae>
 8003922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800393a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_UART_IRQHandler+0xd2>
 8003946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003956:	f043 0202 	orr.w	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_UART_IRQHandler+0xf6>
 800396a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397a:	f043 0204 	orr.w	r2, r3, #4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d011      	beq.n	80039b2 <HAL_UART_IRQHandler+0x126>
 800398e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800399a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	f043 0208 	orr.w	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 81f2 	beq.w	8003da0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_UART_IRQHandler+0x14e>
 80039c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 faf4 	bl	8003fc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e4:	2b40      	cmp	r3, #64	@ 0x40
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <HAL_UART_IRQHandler+0x17a>
 80039fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04f      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f9fc 	bl	8003e04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a16:	2b40      	cmp	r3, #64	@ 0x40
 8003a18:	d141      	bne.n	8003a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3314      	adds	r3, #20
 8003a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1d9      	bne.n	8003a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d013      	beq.n	8003a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a72:	4a7e      	ldr	r2, [pc, #504]	@ (8003c6c <HAL_UART_IRQHandler+0x3e0>)
 8003a74:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe fa15 	bl	8001eaa <HAL_DMA_Abort_IT>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d016      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a90:	4610      	mov	r0, r2
 8003a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e00e      	b.n	8003ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f99e 	bl	8003dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	e00a      	b.n	8003ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f99a 	bl	8003dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	e006      	b.n	8003ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f996 	bl	8003dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ab2:	e175      	b.n	8003da0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab4:	bf00      	nop
    return;
 8003ab6:	e173      	b.n	8003da0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f040 814f 	bne.w	8003d60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8148 	beq.w	8003d60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8141 	beq.w	8003d60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afe:	2b40      	cmp	r3, #64	@ 0x40
 8003b00:	f040 80b6 	bne.w	8003c70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8145 	beq.w	8003da4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b22:	429a      	cmp	r2, r3
 8003b24:	f080 813e 	bcs.w	8003da4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b3a:	f000 8088 	beq.w	8003c4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	330c      	adds	r3, #12
 8003b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1d9      	bne.n	8003b3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3314      	adds	r3, #20
 8003b90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3314      	adds	r3, #20
 8003baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e1      	bne.n	8003b8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3314      	adds	r3, #20
 8003bcc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003bd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3314      	adds	r3, #20
 8003be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003bea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003bf0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e3      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c1e:	f023 0310 	bic.w	r3, r3, #16
 8003c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	330c      	adds	r3, #12
 8003c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e3      	bne.n	8003c0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe f8be 	bl	8001dca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	4619      	mov	r1, r3
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8c1 	bl	8003dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c6a:	e09b      	b.n	8003da4 <HAL_UART_IRQHandler+0x518>
 8003c6c:	08003ecb 	.word	0x08003ecb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 808e 	beq.w	8003da8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8089 	beq.w	8003da8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003cba:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e3      	bne.n	8003c96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3314      	adds	r3, #20
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	623b      	str	r3, [r7, #32]
   return(result);
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3314      	adds	r3, #20
 8003cee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cf2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e3      	bne.n	8003cce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0310 	bic.w	r3, r3, #16
 8003d2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d38:	61fa      	str	r2, [r7, #28]
 8003d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	69b9      	ldr	r1, [r7, #24]
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	617b      	str	r3, [r7, #20]
   return(result);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e3      	bne.n	8003d14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d56:	4619      	mov	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f847 	bl	8003dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d5e:	e023      	b.n	8003da8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_UART_IRQHandler+0x4f4>
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f8ba 	bl	8003ef2 <UART_Transmit_IT>
    return;
 8003d7e:	e014      	b.n	8003daa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <HAL_UART_IRQHandler+0x51e>
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f8fa 	bl	8003f92 <UART_EndTransmit_IT>
    return;
 8003d9e:	e004      	b.n	8003daa <HAL_UART_IRQHandler+0x51e>
    return;
 8003da0:	bf00      	nop
 8003da2:	e002      	b.n	8003daa <HAL_UART_IRQHandler+0x51e>
      return;
 8003da4:	bf00      	nop
 8003da6:	e000      	b.n	8003daa <HAL_UART_IRQHandler+0x51e>
      return;
 8003da8:	bf00      	nop
  }
}
 8003daa:	37e8      	adds	r7, #232	@ 0xe8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b095      	sub	sp, #84	@ 0x54
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3314      	adds	r3, #20
 8003e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3314      	adds	r3, #20
 8003e5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e5      	bne.n	8003e40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d119      	bne.n	8003eb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 0310 	bic.w	r3, r3, #16
 8003e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e9c:	61ba      	str	r2, [r7, #24]
 8003e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	6979      	ldr	r1, [r7, #20]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e5      	bne.n	8003e7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ebe:	bf00      	nop
 8003ec0:	3754      	adds	r7, #84	@ 0x54
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff ff77 	bl	8003dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b21      	cmp	r3, #33	@ 0x21
 8003f04:	d13e      	bne.n	8003f84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0e:	d114      	bne.n	8003f3a <UART_Transmit_IT+0x48>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d110      	bne.n	8003f3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	621a      	str	r2, [r3, #32]
 8003f38:	e008      	b.n	8003f4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	1c59      	adds	r1, r3, #1
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6211      	str	r1, [r2, #32]
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10f      	bne.n	8003f80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fefc 	bl	8003db0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b08c      	sub	sp, #48	@ 0x30
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b22      	cmp	r3, #34	@ 0x22
 8003fd4:	f040 80ae 	bne.w	8004134 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe0:	d117      	bne.n	8004012 <UART_Receive_IT+0x50>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d113      	bne.n	8004012 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004000:	b29a      	uxth	r2, r3
 8004002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004004:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400a:	1c9a      	adds	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004010:	e026      	b.n	8004060 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004024:	d007      	beq.n	8004036 <UART_Receive_IT+0x74>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <UART_Receive_IT+0x82>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	e008      	b.n	8004056 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004050:	b2da      	uxtb	r2, r3
 8004052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004054:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29b      	uxth	r3, r3
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4619      	mov	r1, r3
 800406e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004070:	2b00      	cmp	r3, #0
 8004072:	d15d      	bne.n	8004130 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0220 	bic.w	r2, r2, #32
 8004082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d135      	bne.n	8004126 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	613b      	str	r3, [r7, #16]
   return(result);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f023 0310 	bic.w	r3, r3, #16
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e0:	623a      	str	r2, [r7, #32]
 80040e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	69f9      	ldr	r1, [r7, #28]
 80040e6:	6a3a      	ldr	r2, [r7, #32]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e5      	bne.n	80040c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d10a      	bne.n	8004118 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fe64 	bl	8003dec <HAL_UARTEx_RxEventCallback>
 8004124:	e002      	b.n	800412c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff fe4c 	bl	8003dc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	e002      	b.n	8004136 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3730      	adds	r7, #48	@ 0x30
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004144:	b0c0      	sub	sp, #256	@ 0x100
 8004146:	af00      	add	r7, sp, #0
 8004148:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415c:	68d9      	ldr	r1, [r3, #12]
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	ea40 0301 	orr.w	r3, r0, r1
 8004168:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	431a      	orrs	r2, r3
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	431a      	orrs	r2, r3
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004198:	f021 010c 	bic.w	r1, r1, #12
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041a6:	430b      	orrs	r3, r1
 80041a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ba:	6999      	ldr	r1, [r3, #24]
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	ea40 0301 	orr.w	r3, r0, r1
 80041c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b8f      	ldr	r3, [pc, #572]	@ (800440c <UART_SetConfig+0x2cc>)
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d005      	beq.n	80041e0 <UART_SetConfig+0xa0>
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4b8d      	ldr	r3, [pc, #564]	@ (8004410 <UART_SetConfig+0x2d0>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	d104      	bne.n	80041ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041e0:	f7fe fc68 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 80041e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041e8:	e003      	b.n	80041f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ea:	f7fe fc4f 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 80041ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041fc:	f040 810c 	bne.w	8004418 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004204:	2200      	movs	r2, #0
 8004206:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800420a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800420e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004212:	4622      	mov	r2, r4
 8004214:	462b      	mov	r3, r5
 8004216:	1891      	adds	r1, r2, r2
 8004218:	65b9      	str	r1, [r7, #88]	@ 0x58
 800421a:	415b      	adcs	r3, r3
 800421c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800421e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004222:	4621      	mov	r1, r4
 8004224:	eb12 0801 	adds.w	r8, r2, r1
 8004228:	4629      	mov	r1, r5
 800422a:	eb43 0901 	adc.w	r9, r3, r1
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800423e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004242:	4690      	mov	r8, r2
 8004244:	4699      	mov	r9, r3
 8004246:	4623      	mov	r3, r4
 8004248:	eb18 0303 	adds.w	r3, r8, r3
 800424c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004250:	462b      	mov	r3, r5
 8004252:	eb49 0303 	adc.w	r3, r9, r3
 8004256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800425a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004266:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800426a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800426e:	460b      	mov	r3, r1
 8004270:	18db      	adds	r3, r3, r3
 8004272:	653b      	str	r3, [r7, #80]	@ 0x50
 8004274:	4613      	mov	r3, r2
 8004276:	eb42 0303 	adc.w	r3, r2, r3
 800427a:	657b      	str	r3, [r7, #84]	@ 0x54
 800427c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004280:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004284:	f7fb fffc 	bl	8000280 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4b61      	ldr	r3, [pc, #388]	@ (8004414 <UART_SetConfig+0x2d4>)
 800428e:	fba3 2302 	umull	r2, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	011c      	lsls	r4, r3, #4
 8004296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800429a:	2200      	movs	r2, #0
 800429c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	1891      	adds	r1, r2, r2
 80042ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042b0:	415b      	adcs	r3, r3
 80042b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042b8:	4641      	mov	r1, r8
 80042ba:	eb12 0a01 	adds.w	sl, r2, r1
 80042be:	4649      	mov	r1, r9
 80042c0:	eb43 0b01 	adc.w	fp, r3, r1
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d8:	4692      	mov	sl, r2
 80042da:	469b      	mov	fp, r3
 80042dc:	4643      	mov	r3, r8
 80042de:	eb1a 0303 	adds.w	r3, sl, r3
 80042e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042e6:	464b      	mov	r3, r9
 80042e8:	eb4b 0303 	adc.w	r3, fp, r3
 80042ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004300:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004304:	460b      	mov	r3, r1
 8004306:	18db      	adds	r3, r3, r3
 8004308:	643b      	str	r3, [r7, #64]	@ 0x40
 800430a:	4613      	mov	r3, r2
 800430c:	eb42 0303 	adc.w	r3, r2, r3
 8004310:	647b      	str	r3, [r7, #68]	@ 0x44
 8004312:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004316:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800431a:	f7fb ffb1 	bl	8000280 <__aeabi_uldivmod>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4611      	mov	r1, r2
 8004324:	4b3b      	ldr	r3, [pc, #236]	@ (8004414 <UART_SetConfig+0x2d4>)
 8004326:	fba3 2301 	umull	r2, r3, r3, r1
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2264      	movs	r2, #100	@ 0x64
 800432e:	fb02 f303 	mul.w	r3, r2, r3
 8004332:	1acb      	subs	r3, r1, r3
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800433a:	4b36      	ldr	r3, [pc, #216]	@ (8004414 <UART_SetConfig+0x2d4>)
 800433c:	fba3 2302 	umull	r2, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004348:	441c      	add	r4, r3
 800434a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004354:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004358:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800435c:	4642      	mov	r2, r8
 800435e:	464b      	mov	r3, r9
 8004360:	1891      	adds	r1, r2, r2
 8004362:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004364:	415b      	adcs	r3, r3
 8004366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004368:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800436c:	4641      	mov	r1, r8
 800436e:	1851      	adds	r1, r2, r1
 8004370:	6339      	str	r1, [r7, #48]	@ 0x30
 8004372:	4649      	mov	r1, r9
 8004374:	414b      	adcs	r3, r1
 8004376:	637b      	str	r3, [r7, #52]	@ 0x34
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004384:	4659      	mov	r1, fp
 8004386:	00cb      	lsls	r3, r1, #3
 8004388:	4651      	mov	r1, sl
 800438a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800438e:	4651      	mov	r1, sl
 8004390:	00ca      	lsls	r2, r1, #3
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	4603      	mov	r3, r0
 8004398:	4642      	mov	r2, r8
 800439a:	189b      	adds	r3, r3, r2
 800439c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043a0:	464b      	mov	r3, r9
 80043a2:	460a      	mov	r2, r1
 80043a4:	eb42 0303 	adc.w	r3, r2, r3
 80043a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043c0:	460b      	mov	r3, r1
 80043c2:	18db      	adds	r3, r3, r3
 80043c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043c6:	4613      	mov	r3, r2
 80043c8:	eb42 0303 	adc.w	r3, r2, r3
 80043cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043d6:	f7fb ff53 	bl	8000280 <__aeabi_uldivmod>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <UART_SetConfig+0x2d4>)
 80043e0:	fba3 1302 	umull	r1, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	2164      	movs	r1, #100	@ 0x64
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	3332      	adds	r3, #50	@ 0x32
 80043f2:	4a08      	ldr	r2, [pc, #32]	@ (8004414 <UART_SetConfig+0x2d4>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	f003 0207 	and.w	r2, r3, #7
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4422      	add	r2, r4
 8004406:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004408:	e106      	b.n	8004618 <UART_SetConfig+0x4d8>
 800440a:	bf00      	nop
 800440c:	40011000 	.word	0x40011000
 8004410:	40011400 	.word	0x40011400
 8004414:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004422:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004426:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800442a:	4642      	mov	r2, r8
 800442c:	464b      	mov	r3, r9
 800442e:	1891      	adds	r1, r2, r2
 8004430:	6239      	str	r1, [r7, #32]
 8004432:	415b      	adcs	r3, r3
 8004434:	627b      	str	r3, [r7, #36]	@ 0x24
 8004436:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800443a:	4641      	mov	r1, r8
 800443c:	1854      	adds	r4, r2, r1
 800443e:	4649      	mov	r1, r9
 8004440:	eb43 0501 	adc.w	r5, r3, r1
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	00eb      	lsls	r3, r5, #3
 800444e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004452:	00e2      	lsls	r2, r4, #3
 8004454:	4614      	mov	r4, r2
 8004456:	461d      	mov	r5, r3
 8004458:	4643      	mov	r3, r8
 800445a:	18e3      	adds	r3, r4, r3
 800445c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004460:	464b      	mov	r3, r9
 8004462:	eb45 0303 	adc.w	r3, r5, r3
 8004466:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004476:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004486:	4629      	mov	r1, r5
 8004488:	008b      	lsls	r3, r1, #2
 800448a:	4621      	mov	r1, r4
 800448c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004490:	4621      	mov	r1, r4
 8004492:	008a      	lsls	r2, r1, #2
 8004494:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004498:	f7fb fef2 	bl	8000280 <__aeabi_uldivmod>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4b60      	ldr	r3, [pc, #384]	@ (8004624 <UART_SetConfig+0x4e4>)
 80044a2:	fba3 2302 	umull	r2, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	011c      	lsls	r4, r3, #4
 80044aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044bc:	4642      	mov	r2, r8
 80044be:	464b      	mov	r3, r9
 80044c0:	1891      	adds	r1, r2, r2
 80044c2:	61b9      	str	r1, [r7, #24]
 80044c4:	415b      	adcs	r3, r3
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044cc:	4641      	mov	r1, r8
 80044ce:	1851      	adds	r1, r2, r1
 80044d0:	6139      	str	r1, [r7, #16]
 80044d2:	4649      	mov	r1, r9
 80044d4:	414b      	adcs	r3, r1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044e4:	4659      	mov	r1, fp
 80044e6:	00cb      	lsls	r3, r1, #3
 80044e8:	4651      	mov	r1, sl
 80044ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ee:	4651      	mov	r1, sl
 80044f0:	00ca      	lsls	r2, r1, #3
 80044f2:	4610      	mov	r0, r2
 80044f4:	4619      	mov	r1, r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	4642      	mov	r2, r8
 80044fa:	189b      	adds	r3, r3, r2
 80044fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004500:	464b      	mov	r3, r9
 8004502:	460a      	mov	r2, r1
 8004504:	eb42 0303 	adc.w	r3, r2, r3
 8004508:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004516:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004524:	4649      	mov	r1, r9
 8004526:	008b      	lsls	r3, r1, #2
 8004528:	4641      	mov	r1, r8
 800452a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800452e:	4641      	mov	r1, r8
 8004530:	008a      	lsls	r2, r1, #2
 8004532:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004536:	f7fb fea3 	bl	8000280 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4611      	mov	r1, r2
 8004540:	4b38      	ldr	r3, [pc, #224]	@ (8004624 <UART_SetConfig+0x4e4>)
 8004542:	fba3 2301 	umull	r2, r3, r3, r1
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	2264      	movs	r2, #100	@ 0x64
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	1acb      	subs	r3, r1, r3
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	3332      	adds	r3, #50	@ 0x32
 8004554:	4a33      	ldr	r2, [pc, #204]	@ (8004624 <UART_SetConfig+0x4e4>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004560:	441c      	add	r4, r3
 8004562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004566:	2200      	movs	r2, #0
 8004568:	673b      	str	r3, [r7, #112]	@ 0x70
 800456a:	677a      	str	r2, [r7, #116]	@ 0x74
 800456c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	1891      	adds	r1, r2, r2
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	415b      	adcs	r3, r3
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004580:	4641      	mov	r1, r8
 8004582:	1851      	adds	r1, r2, r1
 8004584:	6039      	str	r1, [r7, #0]
 8004586:	4649      	mov	r1, r9
 8004588:	414b      	adcs	r3, r1
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004598:	4659      	mov	r1, fp
 800459a:	00cb      	lsls	r3, r1, #3
 800459c:	4651      	mov	r1, sl
 800459e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a2:	4651      	mov	r1, sl
 80045a4:	00ca      	lsls	r2, r1, #3
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	4642      	mov	r2, r8
 80045ae:	189b      	adds	r3, r3, r2
 80045b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045b2:	464b      	mov	r3, r9
 80045b4:	460a      	mov	r2, r1
 80045b6:	eb42 0303 	adc.w	r3, r2, r3
 80045ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80045c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045d4:	4649      	mov	r1, r9
 80045d6:	008b      	lsls	r3, r1, #2
 80045d8:	4641      	mov	r1, r8
 80045da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045de:	4641      	mov	r1, r8
 80045e0:	008a      	lsls	r2, r1, #2
 80045e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045e6:	f7fb fe4b 	bl	8000280 <__aeabi_uldivmod>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004624 <UART_SetConfig+0x4e4>)
 80045f0:	fba3 1302 	umull	r1, r3, r3, r2
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	2164      	movs	r1, #100	@ 0x64
 80045f8:	fb01 f303 	mul.w	r3, r1, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	3332      	adds	r3, #50	@ 0x32
 8004602:	4a08      	ldr	r2, [pc, #32]	@ (8004624 <UART_SetConfig+0x4e4>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	f003 020f 	and.w	r2, r3, #15
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4422      	add	r2, r4
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	bf00      	nop
 800461a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800461e:	46bd      	mov	sp, r7
 8004620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004624:	51eb851f 	.word	0x51eb851f

08004628 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8004632:	1df9      	adds	r1, r7, #7
 8004634:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004638:	2201      	movs	r2, #1
 800463a:	4803      	ldr	r0, [pc, #12]	@ (8004648 <DEV_SPI_WriteByte+0x20>)
 800463c:	f7fe fad7 	bl	8002bee <HAL_SPI_Transmit>
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	200001ec 	.word	0x200001ec

0800464c <DEV_Module_Init>:
	DEV_Digital_Write(EPD_CS_PIN, 1);
	return j;
}

int DEV_Module_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8004650:	2200      	movs	r2, #0
 8004652:	2104      	movs	r1, #4
 8004654:	4807      	ldr	r0, [pc, #28]	@ (8004674 <DEV_Module_Init+0x28>)
 8004656:	f7fd fdcf 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	2110      	movs	r1, #16
 800465e:	4805      	ldr	r0, [pc, #20]	@ (8004674 <DEV_Module_Init+0x28>)
 8004660:	f7fd fdca 	bl	80021f8 <HAL_GPIO_WritePin>
//	DEV_Digital_Write(EPD_PWR_PIN, 1);
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8004664:	2201      	movs	r2, #1
 8004666:	2102      	movs	r1, #2
 8004668:	4802      	ldr	r0, [pc, #8]	@ (8004674 <DEV_Module_Init+0x28>)
 800466a:	f7fd fdc5 	bl	80021f8 <HAL_GPIO_WritePin>
    return 0;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40020000 	.word	0x40020000

08004678 <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800467c:	2200      	movs	r2, #0
 800467e:	2104      	movs	r1, #4
 8004680:	4807      	ldr	r0, [pc, #28]	@ (80046a0 <DEV_Module_Exit+0x28>)
 8004682:	f7fd fdb9 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	2110      	movs	r1, #16
 800468a:	4805      	ldr	r0, [pc, #20]	@ (80046a0 <DEV_Module_Exit+0x28>)
 800468c:	f7fd fdb4 	bl	80021f8 <HAL_GPIO_WritePin>

    //close 5V
//	DEV_Digital_Write(EPD_PWR_PIN, 0);
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8004690:	2200      	movs	r2, #0
 8004692:	2102      	movs	r1, #2
 8004694:	4802      	ldr	r0, [pc, #8]	@ (80046a0 <DEV_Module_Exit+0x28>)
 8004696:	f7fd fdaf 	bl	80021f8 <HAL_GPIO_WritePin>
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40020000 	.word	0x40020000

080046a4 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	4608      	mov	r0, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	461a      	mov	r2, r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	817b      	strh	r3, [r7, #10]
 80046b6:	460b      	mov	r3, r1
 80046b8:	813b      	strh	r3, [r7, #8]
 80046ba:	4613      	mov	r3, r2
 80046bc:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80046be:	4b23      	ldr	r3, [pc, #140]	@ (800474c <Paint_NewImage+0xa8>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80046c4:	4a21      	ldr	r2, [pc, #132]	@ (800474c <Paint_NewImage+0xa8>)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 80046ca:	4a20      	ldr	r2, [pc, #128]	@ (800474c <Paint_NewImage+0xa8>)
 80046cc:	897b      	ldrh	r3, [r7, #10]
 80046ce:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80046d0:	4a1e      	ldr	r2, [pc, #120]	@ (800474c <Paint_NewImage+0xa8>)
 80046d2:	893b      	ldrh	r3, [r7, #8]
 80046d4:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80046d6:	4a1d      	ldr	r2, [pc, #116]	@ (800474c <Paint_NewImage+0xa8>)
 80046d8:	8b3b      	ldrh	r3, [r7, #24]
 80046da:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80046dc:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <Paint_NewImage+0xa8>)
 80046de:	2202      	movs	r2, #2
 80046e0:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80046e2:	897b      	ldrh	r3, [r7, #10]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <Paint_NewImage+0x52>
 80046ee:	897b      	ldrh	r3, [r7, #10]
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	e004      	b.n	8004700 <Paint_NewImage+0x5c>
 80046f6:	897b      	ldrh	r3, [r7, #10]
 80046f8:	08db      	lsrs	r3, r3, #3
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3301      	adds	r3, #1
 80046fe:	b29b      	uxth	r3, r3
 8004700:	4a12      	ldr	r2, [pc, #72]	@ (800474c <Paint_NewImage+0xa8>)
 8004702:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8004704:	4a11      	ldr	r2, [pc, #68]	@ (800474c <Paint_NewImage+0xa8>)
 8004706:	893b      	ldrh	r3, [r7, #8]
 8004708:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800470a:	4a10      	ldr	r2, [pc, #64]	@ (800474c <Paint_NewImage+0xa8>)
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8004710:	4b0e      	ldr	r3, [pc, #56]	@ (800474c <Paint_NewImage+0xa8>)
 8004712:	2200      	movs	r2, #0
 8004714:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <Paint_NewImage+0x7e>
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	2bb4      	cmp	r3, #180	@ 0xb4
 8004720:	d106      	bne.n	8004730 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8004722:	4a0a      	ldr	r2, [pc, #40]	@ (800474c <Paint_NewImage+0xa8>)
 8004724:	897b      	ldrh	r3, [r7, #10]
 8004726:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8004728:	4a08      	ldr	r2, [pc, #32]	@ (800474c <Paint_NewImage+0xa8>)
 800472a:	893b      	ldrh	r3, [r7, #8]
 800472c:	80d3      	strh	r3, [r2, #6]
 800472e:	e006      	b.n	800473e <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8004730:	4a06      	ldr	r2, [pc, #24]	@ (800474c <Paint_NewImage+0xa8>)
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8004736:	4a05      	ldr	r2, [pc, #20]	@ (800474c <Paint_NewImage+0xa8>)
 8004738:	897b      	ldrh	r3, [r7, #10]
 800473a:	80d3      	strh	r3, [r2, #6]
    }
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	200002f0 	.word	0x200002f0

08004750 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8004758:	4a04      	ldr	r2, [pc, #16]	@ (800476c <Paint_SelectImage+0x1c>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6013      	str	r3, [r2, #0]
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	200002f0 	.word	0x200002f0

08004770 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8004770:	b480      	push	{r7}
 8004772:	b08b      	sub	sp, #44	@ 0x2c
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	80fb      	strh	r3, [r7, #6]
 800477a:	460b      	mov	r3, r1
 800477c:	80bb      	strh	r3, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004782:	4ba2      	ldr	r3, [pc, #648]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004784:	889b      	ldrh	r3, [r3, #4]
 8004786:	88fa      	ldrh	r2, [r7, #6]
 8004788:	429a      	cmp	r2, r3
 800478a:	f200 8133 	bhi.w	80049f4 <Paint_SetPixel+0x284>
 800478e:	4b9f      	ldr	r3, [pc, #636]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004790:	88db      	ldrh	r3, [r3, #6]
 8004792:	88ba      	ldrh	r2, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	f200 812d 	bhi.w	80049f4 <Paint_SetPixel+0x284>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800479a:	4b9c      	ldr	r3, [pc, #624]	@ (8004a0c <Paint_SetPixel+0x29c>)
 800479c:	89db      	ldrh	r3, [r3, #14]
 800479e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80047a2:	d02b      	beq.n	80047fc <Paint_SetPixel+0x8c>
 80047a4:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80047a8:	f300 8126 	bgt.w	80049f8 <Paint_SetPixel+0x288>
 80047ac:	2bb4      	cmp	r3, #180	@ 0xb4
 80047ae:	d016      	beq.n	80047de <Paint_SetPixel+0x6e>
 80047b0:	2bb4      	cmp	r3, #180	@ 0xb4
 80047b2:	f300 8121 	bgt.w	80049f8 <Paint_SetPixel+0x288>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <Paint_SetPixel+0x50>
 80047ba:	2b5a      	cmp	r3, #90	@ 0x5a
 80047bc:	d005      	beq.n	80047ca <Paint_SetPixel+0x5a>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80047be:	e11b      	b.n	80049f8 <Paint_SetPixel+0x288>
        X = Xpoint;
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Ypoint;  
 80047c4:	88bb      	ldrh	r3, [r7, #4]
 80047c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80047c8:	e022      	b.n	8004810 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Ypoint - 1;
 80047ca:	4b90      	ldr	r3, [pc, #576]	@ (8004a0c <Paint_SetPixel+0x29c>)
 80047cc:	891a      	ldrh	r2, [r3, #8]
 80047ce:	88bb      	ldrh	r3, [r7, #4]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Xpoint;
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80047dc:	e018      	b.n	8004810 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Xpoint - 1;
 80047de:	4b8b      	ldr	r3, [pc, #556]	@ (8004a0c <Paint_SetPixel+0x29c>)
 80047e0:	891a      	ldrh	r2, [r3, #8]
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 80047ec:	4b87      	ldr	r3, [pc, #540]	@ (8004a0c <Paint_SetPixel+0x29c>)
 80047ee:	895a      	ldrh	r2, [r3, #10]
 80047f0:	88bb      	ldrh	r3, [r7, #4]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80047fa:	e009      	b.n	8004810 <Paint_SetPixel+0xa0>
        X = Ypoint;
 80047fc:	88bb      	ldrh	r3, [r7, #4]
 80047fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8004800:	4b82      	ldr	r3, [pc, #520]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004802:	895a      	ldrh	r2, [r3, #10]
 8004804:	88fb      	ldrh	r3, [r7, #6]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800480e:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8004810:	4b7e      	ldr	r3, [pc, #504]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004812:	8a1b      	ldrh	r3, [r3, #16]
 8004814:	2b03      	cmp	r3, #3
 8004816:	f200 80f1 	bhi.w	80049fc <Paint_SetPixel+0x28c>
 800481a:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <Paint_SetPixel+0xb0>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	0800486f 	.word	0x0800486f
 8004824:	08004831 	.word	0x08004831
 8004828:	08004841 	.word	0x08004841
 800482c:	08004851 	.word	0x08004851
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8004830:	4b76      	ldr	r3, [pc, #472]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004832:	891a      	ldrh	r2, [r3, #8]
 8004834:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        break;
 800483e:	e017      	b.n	8004870 <Paint_SetPixel+0x100>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8004840:	4b72      	ldr	r3, [pc, #456]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004842:	895a      	ldrh	r2, [r3, #10]
 8004844:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800484e:	e00f      	b.n	8004870 <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8004850:	4b6e      	ldr	r3, [pc, #440]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004852:	891a      	ldrh	r2, [r3, #8]
 8004854:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Y - 1;
 800485e:	4b6b      	ldr	r3, [pc, #428]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004860:	895a      	ldrh	r2, [r3, #10]
 8004862:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 800486c:	e000      	b.n	8004870 <Paint_SetPixel+0x100>
        break;
 800486e:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8004870:	4b66      	ldr	r3, [pc, #408]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004872:	891b      	ldrh	r3, [r3, #8]
 8004874:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004876:	429a      	cmp	r2, r3
 8004878:	f200 80c2 	bhi.w	8004a00 <Paint_SetPixel+0x290>
 800487c:	4b63      	ldr	r3, [pc, #396]	@ (8004a0c <Paint_SetPixel+0x29c>)
 800487e:	895b      	ldrh	r3, [r3, #10]
 8004880:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004882:	429a      	cmp	r2, r3
 8004884:	f200 80bc 	bhi.w	8004a00 <Paint_SetPixel+0x290>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }
    
    if(Paint.Scale == 2){
 8004888:	4b60      	ldr	r3, [pc, #384]	@ (8004a0c <Paint_SetPixel+0x29c>)
 800488a:	8adb      	ldrh	r3, [r3, #22]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d139      	bne.n	8004904 <Paint_SetPixel+0x194>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8004890:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004892:	08db      	lsrs	r3, r3, #3
 8004894:	b29b      	uxth	r3, r3
 8004896:	4619      	mov	r1, r3
 8004898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800489a:	4a5c      	ldr	r2, [pc, #368]	@ (8004a0c <Paint_SetPixel+0x29c>)
 800489c:	8a52      	ldrh	r2, [r2, #18]
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	440b      	add	r3, r1
 80048a4:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80048a6:	4b59      	ldr	r3, [pc, #356]	@ (8004a0c <Paint_SetPixel+0x29c>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4413      	add	r3, r2
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80048b2:	887b      	ldrh	r3, [r7, #2]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d113      	bne.n	80048e0 <Paint_SetPixel+0x170>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80048b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	2280      	movs	r2, #128	@ 0x80
 80048c0:	fa42 f303 	asr.w	r3, r2, r3
 80048c4:	b25b      	sxtb	r3, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	b25a      	sxtb	r2, r3
 80048ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ce:	4013      	ands	r3, r2
 80048d0:	b259      	sxtb	r1, r3
 80048d2:	4b4e      	ldr	r3, [pc, #312]	@ (8004a0c <Paint_SetPixel+0x29c>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4413      	add	r3, r2
 80048da:	b2ca      	uxtb	r2, r1
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	e090      	b.n	8004a02 <Paint_SetPixel+0x292>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80048e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	2280      	movs	r2, #128	@ 0x80
 80048e8:	fa42 f303 	asr.w	r3, r2, r3
 80048ec:	b25a      	sxtb	r2, r3
 80048ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	b259      	sxtb	r1, r3
 80048f6:	4b45      	ldr	r3, [pc, #276]	@ (8004a0c <Paint_SetPixel+0x29c>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4413      	add	r3, r2
 80048fe:	b2ca      	uxtb	r2, r1
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e07e      	b.n	8004a02 <Paint_SetPixel+0x292>
    }else if(Paint.Scale == 4){
 8004904:	4b41      	ldr	r3, [pc, #260]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004906:	8adb      	ldrh	r3, [r3, #22]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d137      	bne.n	800497c <Paint_SetPixel+0x20c>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800490c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800490e:	089b      	lsrs	r3, r3, #2
 8004910:	b29b      	uxth	r3, r3
 8004912:	4619      	mov	r1, r3
 8004914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004916:	4a3d      	ldr	r2, [pc, #244]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004918:	8a52      	ldrh	r2, [r2, #18]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	440b      	add	r3, r1
 8004920:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8004922:	887b      	ldrh	r3, [r7, #2]
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800492a:	4b38      	ldr	r3, [pc, #224]	@ (8004a0c <Paint_SetPixel+0x29c>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	4413      	add	r3, r2
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8004936:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	22c0      	movs	r2, #192	@ 0xc0
 8004940:	fa42 f303 	asr.w	r3, r2, r3
 8004944:	b25b      	sxtb	r3, r3
 8004946:	43db      	mvns	r3, r3
 8004948:	b25a      	sxtb	r2, r3
 800494a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800494e:	4013      	ands	r3, r2
 8004950:	b25b      	sxtb	r3, r3
 8004952:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8004954:	887b      	ldrh	r3, [r7, #2]
 8004956:	019a      	lsls	r2, r3, #6
 8004958:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fa42 f303 	asr.w	r3, r2, r3
 8004964:	b25a      	sxtb	r2, r3
 8004966:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800496a:	4313      	orrs	r3, r2
 800496c:	b259      	sxtb	r1, r3
 800496e:	4b27      	ldr	r3, [pc, #156]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	4413      	add	r3, r2
 8004976:	b2ca      	uxtb	r2, r1
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	e042      	b.n	8004a02 <Paint_SetPixel+0x292>
    }else if(Paint.Scale == 6 || Paint.Scale == 7){
 800497c:	4b23      	ldr	r3, [pc, #140]	@ (8004a0c <Paint_SetPixel+0x29c>)
 800497e:	8adb      	ldrh	r3, [r3, #22]
 8004980:	2b06      	cmp	r3, #6
 8004982:	d003      	beq.n	800498c <Paint_SetPixel+0x21c>
 8004984:	4b21      	ldr	r3, [pc, #132]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004986:	8adb      	ldrh	r3, [r3, #22]
 8004988:	2b07      	cmp	r3, #7
 800498a:	d13a      	bne.n	8004a02 <Paint_SetPixel+0x292>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 800498c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	b29b      	uxth	r3, r3
 8004992:	4619      	mov	r1, r3
 8004994:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004996:	4a1d      	ldr	r2, [pc, #116]	@ (8004a0c <Paint_SetPixel+0x29c>)
 8004998:	8a52      	ldrh	r2, [r2, #18]
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	440b      	add	r3, r1
 80049a0:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 80049a2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a0c <Paint_SetPixel+0x29c>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	4413      	add	r3, r2
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80049ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	22f0      	movs	r2, #240	@ 0xf0
 80049b8:	fa42 f303 	asr.w	r3, r2, r3
 80049bc:	b25b      	sxtb	r3, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	b25a      	sxtb	r2, r3
 80049c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80049c6:	4013      	ands	r3, r2
 80049c8:	b25b      	sxtb	r3, r3
 80049ca:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	011a      	lsls	r2, r3, #4
 80049d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	fa42 f303 	asr.w	r3, r2, r3
 80049dc:	b25a      	sxtb	r2, r3
 80049de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	b259      	sxtb	r1, r3
 80049e6:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <Paint_SetPixel+0x29c>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	4413      	add	r3, r2
 80049ee:	b2ca      	uxtb	r2, r1
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	e006      	b.n	8004a02 <Paint_SetPixel+0x292>
        return;
 80049f4:	bf00      	nop
 80049f6:	e004      	b.n	8004a02 <Paint_SetPixel+0x292>
        return;
 80049f8:	bf00      	nop
 80049fa:	e002      	b.n	8004a02 <Paint_SetPixel+0x292>
        return;
 80049fc:	bf00      	nop
 80049fe:	e000      	b.n	8004a02 <Paint_SetPixel+0x292>
        return;
 8004a00:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8004a02:	372c      	adds	r7, #44	@ 0x2c
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	200002f0 	.word	0x200002f0

08004a10 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b089      	sub	sp, #36	@ 0x24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8004a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b54 <Paint_Clear+0x144>)
 8004a1c:	8adb      	ldrh	r3, [r3, #22]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d125      	bne.n	8004a6e <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8004a22:	2300      	movs	r3, #0
 8004a24:	83fb      	strh	r3, [r7, #30]
 8004a26:	e01c      	b.n	8004a62 <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8004a28:	2300      	movs	r3, #0
 8004a2a:	83bb      	strh	r3, [r7, #28]
 8004a2c:	e011      	b.n	8004a52 <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8004a2e:	8bba      	ldrh	r2, [r7, #28]
 8004a30:	8bfb      	ldrh	r3, [r7, #30]
 8004a32:	4948      	ldr	r1, [pc, #288]	@ (8004b54 <Paint_Clear+0x144>)
 8004a34:	8a49      	ldrh	r1, [r1, #18]
 8004a36:	fb01 f303 	mul.w	r3, r1, r3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8004a3e:	4b45      	ldr	r3, [pc, #276]	@ (8004b54 <Paint_Clear+0x144>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4413      	add	r3, r2
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8004a4c:	8bbb      	ldrh	r3, [r7, #28]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	83bb      	strh	r3, [r7, #28]
 8004a52:	4b40      	ldr	r3, [pc, #256]	@ (8004b54 <Paint_Clear+0x144>)
 8004a54:	8a5b      	ldrh	r3, [r3, #18]
 8004a56:	8bba      	ldrh	r2, [r7, #28]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d3e8      	bcc.n	8004a2e <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8004a5c:	8bfb      	ldrh	r3, [r7, #30]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	83fb      	strh	r3, [r7, #30]
 8004a62:	4b3c      	ldr	r3, [pc, #240]	@ (8004b54 <Paint_Clear+0x144>)
 8004a64:	8a9b      	ldrh	r3, [r3, #20]
 8004a66:	8bfa      	ldrh	r2, [r7, #30]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d3dd      	bcc.n	8004a28 <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8004a6c:	e06c      	b.n	8004b48 <Paint_Clear+0x138>
    }else if(Paint.Scale == 4) {
 8004a6e:	4b39      	ldr	r3, [pc, #228]	@ (8004b54 <Paint_Clear+0x144>)
 8004a70:	8adb      	ldrh	r3, [r3, #22]
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d135      	bne.n	8004ae2 <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8004a76:	2300      	movs	r3, #0
 8004a78:	837b      	strh	r3, [r7, #26]
 8004a7a:	e02c      	b.n	8004ad6 <Paint_Clear+0xc6>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	833b      	strh	r3, [r7, #24]
 8004a80:	e021      	b.n	8004ac6 <Paint_Clear+0xb6>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8004a82:	8b3a      	ldrh	r2, [r7, #24]
 8004a84:	8b7b      	ldrh	r3, [r7, #26]
 8004a86:	4933      	ldr	r1, [pc, #204]	@ (8004b54 <Paint_Clear+0x144>)
 8004a88:	8a49      	ldrh	r1, [r1, #18]
 8004a8a:	fb01 f303 	mul.w	r3, r1, r3
 8004a8e:	4413      	add	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	019b      	lsls	r3, r3, #6
 8004a96:	b25a      	sxtb	r2, r3
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	b25b      	sxtb	r3, r3
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	b25a      	sxtb	r2, r3
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	b25b      	sxtb	r3, r3
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	b25a      	sxtb	r2, r3
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	b25b      	sxtb	r3, r3
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	b259      	sxtb	r1, r3
 8004ab4:	4b27      	ldr	r3, [pc, #156]	@ (8004b54 <Paint_Clear+0x144>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	b2ca      	uxtb	r2, r1
 8004abe:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8004ac0:	8b3b      	ldrh	r3, [r7, #24]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	833b      	strh	r3, [r7, #24]
 8004ac6:	4b23      	ldr	r3, [pc, #140]	@ (8004b54 <Paint_Clear+0x144>)
 8004ac8:	8a5b      	ldrh	r3, [r3, #18]
 8004aca:	8b3a      	ldrh	r2, [r7, #24]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3d8      	bcc.n	8004a82 <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8004ad0:	8b7b      	ldrh	r3, [r7, #26]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	837b      	strh	r3, [r7, #26]
 8004ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8004b54 <Paint_Clear+0x144>)
 8004ad8:	8a9b      	ldrh	r3, [r3, #20]
 8004ada:	8b7a      	ldrh	r2, [r7, #26]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d3cd      	bcc.n	8004a7c <Paint_Clear+0x6c>
}
 8004ae0:	e032      	b.n	8004b48 <Paint_Clear+0x138>
	}else if(Paint.Scale == 6 || Paint.Scale == 7) {
 8004ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b54 <Paint_Clear+0x144>)
 8004ae4:	8adb      	ldrh	r3, [r3, #22]
 8004ae6:	2b06      	cmp	r3, #6
 8004ae8:	d003      	beq.n	8004af2 <Paint_Clear+0xe2>
 8004aea:	4b1a      	ldr	r3, [pc, #104]	@ (8004b54 <Paint_Clear+0x144>)
 8004aec:	8adb      	ldrh	r3, [r3, #22]
 8004aee:	2b07      	cmp	r3, #7
 8004af0:	d12a      	bne.n	8004b48 <Paint_Clear+0x138>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8004af2:	2300      	movs	r3, #0
 8004af4:	82fb      	strh	r3, [r7, #22]
 8004af6:	e022      	b.n	8004b3e <Paint_Clear+0x12e>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8004af8:	2300      	movs	r3, #0
 8004afa:	82bb      	strh	r3, [r7, #20]
 8004afc:	e017      	b.n	8004b2e <Paint_Clear+0x11e>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8004afe:	8aba      	ldrh	r2, [r7, #20]
 8004b00:	8afb      	ldrh	r3, [r7, #22]
 8004b02:	4914      	ldr	r1, [pc, #80]	@ (8004b54 <Paint_Clear+0x144>)
 8004b04:	8a49      	ldrh	r1, [r1, #18]
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	b25a      	sxtb	r2, r3
 8004b14:	88fb      	ldrh	r3, [r7, #6]
 8004b16:	b25b      	sxtb	r3, r3
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	b259      	sxtb	r1, r3
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b54 <Paint_Clear+0x144>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4413      	add	r3, r2
 8004b24:	b2ca      	uxtb	r2, r1
 8004b26:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8004b28:	8abb      	ldrh	r3, [r7, #20]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	82bb      	strh	r3, [r7, #20]
 8004b2e:	4b09      	ldr	r3, [pc, #36]	@ (8004b54 <Paint_Clear+0x144>)
 8004b30:	8a5b      	ldrh	r3, [r3, #18]
 8004b32:	8aba      	ldrh	r2, [r7, #20]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d3e2      	bcc.n	8004afe <Paint_Clear+0xee>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8004b38:	8afb      	ldrh	r3, [r7, #22]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	82fb      	strh	r3, [r7, #22]
 8004b3e:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <Paint_Clear+0x144>)
 8004b40:	8a9b      	ldrh	r3, [r3, #20]
 8004b42:	8afa      	ldrh	r2, [r7, #22]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d3d7      	bcc.n	8004af8 <Paint_Clear+0xe8>
}
 8004b48:	bf00      	nop
 8004b4a:	3724      	adds	r7, #36	@ 0x24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	200002f0 	.word	0x200002f0

08004b58 <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	461a      	mov	r2, r3
 8004b66:	4623      	mov	r3, r4
 8004b68:	80fb      	strh	r3, [r7, #6]
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	80bb      	strh	r3, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	807b      	strh	r3, [r7, #2]
 8004b72:	4613      	mov	r3, r2
 8004b74:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 8004b76:	88bb      	ldrh	r3, [r7, #4]
 8004b78:	81bb      	strh	r3, [r7, #12]
 8004b7a:	e012      	b.n	8004ba2 <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	81fb      	strh	r3, [r7, #14]
 8004b80:	e008      	b.n	8004b94 <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 8004b82:	8c3a      	ldrh	r2, [r7, #32]
 8004b84:	89b9      	ldrh	r1, [r7, #12]
 8004b86:	89fb      	ldrh	r3, [r7, #14]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fdf1 	bl	8004770 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8004b8e:	89fb      	ldrh	r3, [r7, #14]
 8004b90:	3301      	adds	r3, #1
 8004b92:	81fb      	strh	r3, [r7, #14]
 8004b94:	89fa      	ldrh	r2, [r7, #14]
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d3f2      	bcc.n	8004b82 <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 8004b9c:	89bb      	ldrh	r3, [r7, #12]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	81bb      	strh	r3, [r7, #12]
 8004ba2:	89ba      	ldrh	r2, [r7, #12]
 8004ba4:	883b      	ldrh	r3, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d3e8      	bcc.n	8004b7c <Paint_ClearWindows+0x24>
        }
    }
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd90      	pop	{r4, r7, pc}

08004bb4 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	81fb      	strh	r3, [r7, #14]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	81bb      	strh	r3, [r7, #12]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004bc8:	4b4c      	ldr	r3, [pc, #304]	@ (8004cfc <Paint_DrawChar+0x148>)
 8004bca:	889b      	ldrh	r3, [r3, #4]
 8004bcc:	89fa      	ldrh	r2, [r7, #14]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	f200 808f 	bhi.w	8004cf2 <Paint_DrawChar+0x13e>
 8004bd4:	4b49      	ldr	r3, [pc, #292]	@ (8004cfc <Paint_DrawChar+0x148>)
 8004bd6:	88db      	ldrh	r3, [r3, #6]
 8004bd8:	89ba      	ldrh	r2, [r7, #12]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	f200 8089 	bhi.w	8004cf2 <Paint_DrawChar+0x13e>
 //       Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8004be0:	7afb      	ldrb	r3, [r7, #11]
 8004be2:	3b20      	subs	r3, #32
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	88d2      	ldrh	r2, [r2, #6]
 8004be8:	fb02 f303 	mul.w	r3, r2, r3
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	8892      	ldrh	r2, [r2, #4]
 8004bf0:	08d2      	lsrs	r2, r2, #3
 8004bf2:	b292      	uxth	r2, r2
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	8892      	ldrh	r2, [r2, #4]
 8004bfa:	f002 0207 	and.w	r2, r2, #7
 8004bfe:	b292      	uxth	r2, r2
 8004c00:	2a00      	cmp	r2, #0
 8004c02:	bf14      	ite	ne
 8004c04:	2201      	movne	r2, #1
 8004c06:	2200      	moveq	r2, #0
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	440a      	add	r2, r1
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4413      	add	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	83fb      	strh	r3, [r7, #30]
 8004c20:	e061      	b.n	8004ce6 <Paint_DrawChar+0x132>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004c22:	2300      	movs	r3, #0
 8004c24:	83bb      	strh	r3, [r7, #28]
 8004c26:	e04c      	b.n	8004cc2 <Paint_DrawChar+0x10e>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8004c28:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c2a:	2bff      	cmp	r3, #255	@ 0xff
 8004c2c:	d118      	bne.n	8004c60 <Paint_DrawChar+0xac>
                if (*ptr & (0x80 >> (Column % 8)))
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	8bbb      	ldrh	r3, [r7, #28]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	2280      	movs	r2, #128	@ 0x80
 8004c3c:	fa42 f303 	asr.w	r3, r2, r3
 8004c40:	400b      	ands	r3, r1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d031      	beq.n	8004caa <Paint_DrawChar+0xf6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8004c46:	89fa      	ldrh	r2, [r7, #14]
 8004c48:	8bbb      	ldrh	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	b298      	uxth	r0, r3
 8004c4e:	89ba      	ldrh	r2, [r7, #12]
 8004c50:	8bfb      	ldrh	r3, [r7, #30]
 8004c52:	4413      	add	r3, r2
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004c58:	4619      	mov	r1, r3
 8004c5a:	f7ff fd89 	bl	8004770 <Paint_SetPixel>
 8004c5e:	e024      	b.n	8004caa <Paint_DrawChar+0xf6>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	4619      	mov	r1, r3
 8004c66:	8bbb      	ldrh	r3, [r7, #28]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	2280      	movs	r2, #128	@ 0x80
 8004c6e:	fa42 f303 	asr.w	r3, r2, r3
 8004c72:	400b      	ands	r3, r1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00c      	beq.n	8004c92 <Paint_DrawChar+0xde>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8004c78:	89fa      	ldrh	r2, [r7, #14]
 8004c7a:	8bbb      	ldrh	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	b298      	uxth	r0, r3
 8004c80:	89ba      	ldrh	r2, [r7, #12]
 8004c82:	8bfb      	ldrh	r3, [r7, #30]
 8004c84:	4413      	add	r3, r2
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	f7ff fd70 	bl	8004770 <Paint_SetPixel>
 8004c90:	e00b      	b.n	8004caa <Paint_DrawChar+0xf6>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8004c92:	89fa      	ldrh	r2, [r7, #14]
 8004c94:	8bbb      	ldrh	r3, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	b298      	uxth	r0, r3
 8004c9a:	89ba      	ldrh	r2, [r7, #12]
 8004c9c:	8bfb      	ldrh	r3, [r7, #30]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f7ff fd63 	bl	8004770 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8004caa:	8bbb      	ldrh	r3, [r7, #28]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b07      	cmp	r3, #7
 8004cb4:	d102      	bne.n	8004cbc <Paint_DrawChar+0x108>
                ptr++;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004cbc:	8bbb      	ldrh	r3, [r7, #28]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	83bb      	strh	r3, [r7, #28]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	889b      	ldrh	r3, [r3, #4]
 8004cc6:	8bba      	ldrh	r2, [r7, #28]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d3ad      	bcc.n	8004c28 <Paint_DrawChar+0x74>
        }// Write a line
        if (Font->Width % 8 != 0)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	889b      	ldrh	r3, [r3, #4]
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <Paint_DrawChar+0x12c>
            ptr++;
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8004ce0:	8bfb      	ldrh	r3, [r7, #30]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	83fb      	strh	r3, [r7, #30]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	88db      	ldrh	r3, [r3, #6]
 8004cea:	8bfa      	ldrh	r2, [r7, #30]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d398      	bcc.n	8004c22 <Paint_DrawChar+0x6e>
 8004cf0:	e000      	b.n	8004cf4 <Paint_DrawChar+0x140>
        return;
 8004cf2:	bf00      	nop
    }// Write all
}
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	200002f0 	.word	0x200002f0

08004d00 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60ba      	str	r2, [r7, #8]
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	81fb      	strh	r3, [r7, #14]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8004d12:	89fb      	ldrh	r3, [r7, #14]
 8004d14:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8004d16:	89bb      	ldrh	r3, [r7, #12]
 8004d18:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8004d1a:	4b21      	ldr	r3, [pc, #132]	@ (8004da0 <Paint_DrawString_EN+0xa0>)
 8004d1c:	889b      	ldrh	r3, [r3, #4]
 8004d1e:	89fa      	ldrh	r2, [r7, #14]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d838      	bhi.n	8004d96 <Paint_DrawString_EN+0x96>
 8004d24:	4b1e      	ldr	r3, [pc, #120]	@ (8004da0 <Paint_DrawString_EN+0xa0>)
 8004d26:	88db      	ldrh	r3, [r3, #6]
 8004d28:	89ba      	ldrh	r2, [r7, #12]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d833      	bhi.n	8004d96 <Paint_DrawString_EN+0x96>
 //       Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 8004d2e:	e02d      	b.n	8004d8c <Paint_DrawString_EN+0x8c>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8004d30:	8afb      	ldrh	r3, [r7, #22]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	8892      	ldrh	r2, [r2, #4]
 8004d36:	4413      	add	r3, r2
 8004d38:	4a19      	ldr	r2, [pc, #100]	@ (8004da0 <Paint_DrawString_EN+0xa0>)
 8004d3a:	8892      	ldrh	r2, [r2, #4]
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	dd06      	ble.n	8004d4e <Paint_DrawString_EN+0x4e>
            Xpoint = Xstart;
 8004d40:	89fb      	ldrh	r3, [r7, #14]
 8004d42:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	88da      	ldrh	r2, [r3, #6]
 8004d48:	8abb      	ldrh	r3, [r7, #20]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8004d4e:	8abb      	ldrh	r3, [r7, #20]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	88d2      	ldrh	r2, [r2, #6]
 8004d54:	4413      	add	r3, r2
 8004d56:	4a12      	ldr	r2, [pc, #72]	@ (8004da0 <Paint_DrawString_EN+0xa0>)
 8004d58:	88d2      	ldrh	r2, [r2, #6]
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	dd03      	ble.n	8004d66 <Paint_DrawString_EN+0x66>
            Xpoint = Xstart;
 8004d5e:	89fb      	ldrh	r3, [r7, #14]
 8004d60:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8004d62:	89bb      	ldrh	r3, [r7, #12]
 8004d64:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	8ab9      	ldrh	r1, [r7, #20]
 8004d6c:	8af8      	ldrh	r0, [r7, #22]
 8004d6e:	8c3b      	ldrh	r3, [r7, #32]
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f7ff ff1c 	bl	8004bb4 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	889a      	ldrh	r2, [r3, #4]
 8004d86:	8afb      	ldrh	r3, [r7, #22]
 8004d88:	4413      	add	r3, r2
 8004d8a:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1cd      	bne.n	8004d30 <Paint_DrawString_EN+0x30>
 8004d94:	e000      	b.n	8004d98 <Paint_DrawString_EN+0x98>
        return;
 8004d96:	bf00      	nop
    }
}
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	200002f0 	.word	0x200002f0

08004da4 <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54_V2_Reset(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8004da8:	2201      	movs	r2, #1
 8004daa:	2102      	movs	r1, #2
 8004dac:	480b      	ldr	r0, [pc, #44]	@ (8004ddc <EPD_1IN54_V2_Reset+0x38>)
 8004dae:	f7fd fa23 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8004db2:	20c8      	movs	r0, #200	@ 0xc8
 8004db4:	f7fc fed4 	bl	8001b60 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8004db8:	2200      	movs	r2, #0
 8004dba:	2102      	movs	r1, #2
 8004dbc:	4807      	ldr	r0, [pc, #28]	@ (8004ddc <EPD_1IN54_V2_Reset+0x38>)
 8004dbe:	f7fd fa1b 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8004dc2:	2002      	movs	r0, #2
 8004dc4:	f7fc fecc 	bl	8001b60 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8004dc8:	2201      	movs	r2, #1
 8004dca:	2102      	movs	r1, #2
 8004dcc:	4803      	ldr	r0, [pc, #12]	@ (8004ddc <EPD_1IN54_V2_Reset+0x38>)
 8004dce:	f7fd fa13 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8004dd2:	20c8      	movs	r0, #200	@ 0xc8
 8004dd4:	f7fc fec4 	bl	8001b60 <HAL_Delay>
}
 8004dd8:	bf00      	nop
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40020000 	.word	0x40020000

08004de0 <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8004dea:	2200      	movs	r2, #0
 8004dec:	2104      	movs	r1, #4
 8004dee:	480a      	ldr	r0, [pc, #40]	@ (8004e18 <EPD_1IN54_V2_SendCommand+0x38>)
 8004df0:	f7fd fa02 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004df4:	2200      	movs	r2, #0
 8004df6:	2110      	movs	r1, #16
 8004df8:	4807      	ldr	r0, [pc, #28]	@ (8004e18 <EPD_1IN54_V2_SendCommand+0x38>)
 8004dfa:	f7fd f9fd 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fc11 	bl	8004628 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004e06:	2201      	movs	r2, #1
 8004e08:	2110      	movs	r1, #16
 8004e0a:	4803      	ldr	r0, [pc, #12]	@ (8004e18 <EPD_1IN54_V2_SendCommand+0x38>)
 8004e0c:	f7fd f9f4 	bl	80021f8 <HAL_GPIO_WritePin>
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40020000 	.word	0x40020000

08004e1c <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004e26:	2201      	movs	r2, #1
 8004e28:	2104      	movs	r1, #4
 8004e2a:	480a      	ldr	r0, [pc, #40]	@ (8004e54 <EPD_1IN54_V2_SendData+0x38>)
 8004e2c:	f7fd f9e4 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004e30:	2200      	movs	r2, #0
 8004e32:	2110      	movs	r1, #16
 8004e34:	4807      	ldr	r0, [pc, #28]	@ (8004e54 <EPD_1IN54_V2_SendData+0x38>)
 8004e36:	f7fd f9df 	bl	80021f8 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fbf3 	bl	8004628 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004e42:	2201      	movs	r2, #1
 8004e44:	2110      	movs	r1, #16
 8004e46:	4803      	ldr	r0, [pc, #12]	@ (8004e54 <EPD_1IN54_V2_SendData+0x38>)
 8004e48:	f7fd f9d6 	bl	80021f8 <HAL_GPIO_WritePin>
}
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40020000 	.word	0x40020000

08004e58 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
bool EPD_1IN54_V2_ReadBusy(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8004e5c:	4809      	ldr	r0, [pc, #36]	@ (8004e84 <EPD_1IN54_V2_ReadBusy+0x2c>)
 8004e5e:	f000 fc55 	bl	800570c <puts>
    while(BUSY_GPIO_Port->IDR & BUSY_Pin) {      //LOW: idle, HIGH: busy
 8004e62:	e002      	b.n	8004e6a <EPD_1IN54_V2_ReadBusy+0x12>
        DEV_Delay_ms(10);
 8004e64:	200a      	movs	r0, #10
 8004e66:	f7fc fe7b 	bl	8001b60 <HAL_Delay>
    while(BUSY_GPIO_Port->IDR & BUSY_Pin) {      //LOW: idle, HIGH: busy
 8004e6a:	4b07      	ldr	r3, [pc, #28]	@ (8004e88 <EPD_1IN54_V2_ReadBusy+0x30>)
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f6      	bne.n	8004e64 <EPD_1IN54_V2_ReadBusy+0xc>
    }
//    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
//        DEV_Delay_ms(10);
//    }
    Debug("e-Paper busy release\r\n");
 8004e76:	4805      	ldr	r0, [pc, #20]	@ (8004e8c <EPD_1IN54_V2_ReadBusy+0x34>)
 8004e78:	f000 fc48 	bl	800570c <puts>
    return 1;
 8004e7c:	2301      	movs	r3, #1
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	0800641c 	.word	0x0800641c
 8004e88:	40020000 	.word	0x40020000
 8004e8c:	08006434 	.word	0x08006434

08004e90 <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 8004e94:	2022      	movs	r0, #34	@ 0x22
 8004e96:	f7ff ffa3 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xc7);
 8004e9a:	20c7      	movs	r0, #199	@ 0xc7
 8004e9c:	f7ff ffbe 	bl	8004e1c <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8004ea0:	2020      	movs	r0, #32
 8004ea2:	f7ff ff9d 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 8004ea6:	f7ff ffd7 	bl	8004e58 <EPD_1IN54_V2_ReadBusy>
}
 8004eaa:	bf00      	nop
 8004eac:	bd80      	pop	{r7, pc}

08004eae <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 8004eb2:	2022      	movs	r0, #34	@ 0x22
 8004eb4:	f7ff ff94 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xcF);
 8004eb8:	20cf      	movs	r0, #207	@ 0xcf
 8004eba:	f7ff ffaf 	bl	8004e1c <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8004ebe:	2020      	movs	r0, #32
 8004ec0:	f7ff ff8e 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 8004ec4:	f7ff ffc8 	bl	8004e58 <EPD_1IN54_V2_ReadBusy>
}
 8004ec8:	bf00      	nop
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <EPD_1IN54_V2_Lut>:

static void EPD_1IN54_V2_Lut(UBYTE *lut)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	EPD_1IN54_V2_SendCommand(0x32);
 8004ed4:	2032      	movs	r0, #50	@ 0x32
 8004ed6:	f7ff ff83 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
	for(UBYTE i=0; i<153; i++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	73fb      	strb	r3, [r7, #15]
 8004ede:	e009      	b.n	8004ef4 <EPD_1IN54_V2_Lut+0x28>
		EPD_1IN54_V2_SendData(lut[i]);
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff ff97 	bl	8004e1c <EPD_1IN54_V2_SendData>
	for(UBYTE i=0; i<153; i++)
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	2b98      	cmp	r3, #152	@ 0x98
 8004ef8:	d9f2      	bls.n	8004ee0 <EPD_1IN54_V2_Lut+0x14>
	EPD_1IN54_V2_ReadBusy();
 8004efa:	f7ff ffad 	bl	8004e58 <EPD_1IN54_V2_ReadBusy>
}
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <EPD_1IN54_V2_SetLut>:

static void EPD_1IN54_V2_SetLut(UBYTE *lut)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
	EPD_1IN54_V2_Lut(lut);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff ffdc 	bl	8004ecc <EPD_1IN54_V2_Lut>
	
    EPD_1IN54_V2_SendCommand(0x3f);
 8004f14:	203f      	movs	r0, #63	@ 0x3f
 8004f16:	f7ff ff63 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[153]);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3399      	adds	r3, #153	@ 0x99
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff ff7b 	bl	8004e1c <EPD_1IN54_V2_SendData>
	
    EPD_1IN54_V2_SendCommand(0x03);
 8004f26:	2003      	movs	r0, #3
 8004f28:	f7ff ff5a 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[154]);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	339a      	adds	r3, #154	@ 0x9a
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ff72 	bl	8004e1c <EPD_1IN54_V2_SendData>
	
    EPD_1IN54_V2_SendCommand(0x04);
 8004f38:	2004      	movs	r0, #4
 8004f3a:	f7ff ff51 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[155]);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	339b      	adds	r3, #155	@ 0x9b
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff ff69 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(lut[156]);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	339c      	adds	r3, #156	@ 0x9c
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff ff63 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(lut[157]);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	339d      	adds	r3, #157	@ 0x9d
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff ff5d 	bl	8004e1c <EPD_1IN54_V2_SendData>
	
	EPD_1IN54_V2_SendCommand(0x2c);
 8004f62:	202c      	movs	r0, #44	@ 0x2c
 8004f64:	f7ff ff3c 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[158]);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	339e      	adds	r3, #158	@ 0x9e
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff ff54 	bl	8004e1c <EPD_1IN54_V2_SendData>
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <EPD_1IN54_V2_SetWindows>:

static void EPD_1IN54_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8004f7c:	b590      	push	{r4, r7, lr}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4604      	mov	r4, r0
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	80fb      	strh	r3, [r7, #6]
 8004f8e:	4603      	mov	r3, r0
 8004f90:	80bb      	strh	r3, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	807b      	strh	r3, [r7, #2]
 8004f96:	4613      	mov	r3, r2
 8004f98:	803b      	strh	r3, [r7, #0]
    EPD_1IN54_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8004f9a:	2044      	movs	r0, #68	@ 0x44
 8004f9c:	f7ff ff20 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData((Xstart>>3) & 0xFF);
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	08db      	lsrs	r3, r3, #3
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff ff37 	bl	8004e1c <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Xend>>3) & 0xFF);
 8004fae:	887b      	ldrh	r3, [r7, #2]
 8004fb0:	08db      	lsrs	r3, r3, #3
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff ff30 	bl	8004e1c <EPD_1IN54_V2_SendData>
	
    EPD_1IN54_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8004fbc:	2045      	movs	r0, #69	@ 0x45
 8004fbe:	f7ff ff0f 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 8004fc2:	88bb      	ldrh	r3, [r7, #4]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff ff28 	bl	8004e1c <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 8004fcc:	88bb      	ldrh	r3, [r7, #4]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff21 	bl	8004e1c <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(Yend & 0xFF);
 8004fda:	883b      	ldrh	r3, [r7, #0]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff ff1c 	bl	8004e1c <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Yend >> 8) & 0xFF);
 8004fe4:	883b      	ldrh	r3, [r7, #0]
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff ff15 	bl	8004e1c <EPD_1IN54_V2_SendData>
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd90      	pop	{r4, r7, pc}

08004ffa <EPD_1IN54_V2_SetCursor>:

static void EPD_1IN54_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	4603      	mov	r3, r0
 8005002:	460a      	mov	r2, r1
 8005004:	80fb      	strh	r3, [r7, #6]
 8005006:	4613      	mov	r3, r2
 8005008:	80bb      	strh	r3, [r7, #4]
    EPD_1IN54_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800500a:	204e      	movs	r0, #78	@ 0x4e
 800500c:	f7ff fee8 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Xstart & 0xFF);
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff ff01 	bl	8004e1c <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 800501a:	204f      	movs	r0, #79	@ 0x4f
 800501c:	f7ff fee0 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 8005020:	88bb      	ldrh	r3, [r7, #4]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fef9 	bl	8004e1c <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 800502a:	88bb      	ldrh	r3, [r7, #4]
 800502c:	0a1b      	lsrs	r3, r3, #8
 800502e:	b29b      	uxth	r3, r3
 8005030:	b2db      	uxtb	r3, r3
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fef2 	bl	8004e1c <EPD_1IN54_V2_SendData>
}
 8005038:	bf00      	nop
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 8005044:	f7ff feae 	bl	8004da4 <EPD_1IN54_V2_Reset>

    EPD_1IN54_V2_ReadBusy();
 8005048:	f7ff ff06 	bl	8004e58 <EPD_1IN54_V2_ReadBusy>
    EPD_1IN54_V2_SendCommand(0x12);  //SWRESET
 800504c:	2012      	movs	r0, #18
 800504e:	f7ff fec7 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 8005052:	f7ff ff01 	bl	8004e58 <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SendCommand(0x01); //Driver output control
 8005056:	2001      	movs	r0, #1
 8005058:	f7ff fec2 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800505c:	20c7      	movs	r0, #199	@ 0xc7
 800505e:	f7ff fedd 	bl	8004e1c <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8005062:	2000      	movs	r0, #0
 8005064:	f7ff feda 	bl	8004e1c <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 8005068:	2001      	movs	r0, #1
 800506a:	f7ff fed7 	bl	8004e1c <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); //data entry mode
 800506e:	2011      	movs	r0, #17
 8005070:	f7ff feb6 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8005074:	2001      	movs	r0, #1
 8005076:	f7ff fed1 	bl	8004e1c <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SetWindows(0, EPD_1IN54_V2_HEIGHT-1, EPD_1IN54_V2_WIDTH-1, 0);
 800507a:	2300      	movs	r3, #0
 800507c:	22c7      	movs	r2, #199	@ 0xc7
 800507e:	21c7      	movs	r1, #199	@ 0xc7
 8005080:	2000      	movs	r0, #0
 8005082:	f7ff ff7b 	bl	8004f7c <EPD_1IN54_V2_SetWindows>

    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 8005086:	203c      	movs	r0, #60	@ 0x3c
 8005088:	f7ff feaa 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800508c:	2001      	movs	r0, #1
 800508e:	f7ff fec5 	bl	8004e1c <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 8005092:	2018      	movs	r0, #24
 8005094:	f7ff fea4 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 8005098:	2080      	movs	r0, #128	@ 0x80
 800509a:	f7ff febf 	bl	8004e1c <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // //Load Temperature and waveform setting.
 800509e:	2022      	movs	r0, #34	@ 0x22
 80050a0:	f7ff fe9e 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 80050a4:	20b1      	movs	r0, #177	@ 0xb1
 80050a6:	f7ff feb9 	bl	8004e1c <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 80050aa:	2020      	movs	r0, #32
 80050ac:	f7ff fe98 	bl	8004de0 <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SetCursor(0, EPD_1IN54_V2_HEIGHT-1);
 80050b0:	21c7      	movs	r1, #199	@ 0xc7
 80050b2:	2000      	movs	r0, #0
 80050b4:	f7ff ffa1 	bl	8004ffa <EPD_1IN54_V2_SetCursor>
    EPD_1IN54_V2_ReadBusy();
 80050b8:	f7ff fece 	bl	8004e58 <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SetLut(WF_Full_1IN54);
 80050bc:	4802      	ldr	r0, [pc, #8]	@ (80050c8 <EPD_1IN54_V2_Init+0x88>)
 80050be:	f7ff ff22 	bl	8004f06 <EPD_1IN54_V2_SetLut>
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000018 	.word	0x20000018

080050cc <EPD_1IN54_V2_Init_Partial>:
/******************************************************************************
function :	Initialize the e-Paper register (Partial display)
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init_Partial(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
	EPD_1IN54_V2_Reset();
 80050d0:	f7ff fe68 	bl	8004da4 <EPD_1IN54_V2_Reset>
	EPD_1IN54_V2_ReadBusy();
 80050d4:	f7ff fec0 	bl	8004e58 <EPD_1IN54_V2_ReadBusy>
	
	EPD_1IN54_V2_SetLut(WF_PARTIAL_1IN54_0);
 80050d8:	481b      	ldr	r0, [pc, #108]	@ (8005148 <EPD_1IN54_V2_Init_Partial+0x7c>)
 80050da:	f7ff ff14 	bl	8004f06 <EPD_1IN54_V2_SetLut>
	EPD_1IN54_V2_SendCommand(0x37); 
 80050de:	2037      	movs	r0, #55	@ 0x37
 80050e0:	f7ff fe7e 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
	EPD_1IN54_V2_SendData(0x00);  
 80050e4:	2000      	movs	r0, #0
 80050e6:	f7ff fe99 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(0x00);  
 80050ea:	2000      	movs	r0, #0
 80050ec:	f7ff fe96 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(0x00);  
 80050f0:	2000      	movs	r0, #0
 80050f2:	f7ff fe93 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(0x00); 
 80050f6:	2000      	movs	r0, #0
 80050f8:	f7ff fe90 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(0x00);  	
 80050fc:	2000      	movs	r0, #0
 80050fe:	f7ff fe8d 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(0x40);  
 8005102:	2040      	movs	r0, #64	@ 0x40
 8005104:	f7ff fe8a 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(0x00);  
 8005108:	2000      	movs	r0, #0
 800510a:	f7ff fe87 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(0x00);   
 800510e:	2000      	movs	r0, #0
 8005110:	f7ff fe84 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(0x00);  
 8005114:	2000      	movs	r0, #0
 8005116:	f7ff fe81 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(0x00);
 800511a:	2000      	movs	r0, #0
 800511c:	f7ff fe7e 	bl	8004e1c <EPD_1IN54_V2_SendData>

	EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 8005120:	203c      	movs	r0, #60	@ 0x3c
 8005122:	f7ff fe5d 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
	EPD_1IN54_V2_SendData(0x80);
 8005126:	2080      	movs	r0, #128	@ 0x80
 8005128:	f7ff fe78 	bl	8004e1c <EPD_1IN54_V2_SendData>
	
	EPD_1IN54_V2_SendCommand(0x22); 
 800512c:	2022      	movs	r0, #34	@ 0x22
 800512e:	f7ff fe57 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
	EPD_1IN54_V2_SendData(0xc0); 
 8005132:	20c0      	movs	r0, #192	@ 0xc0
 8005134:	f7ff fe72 	bl	8004e1c <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendCommand(0x20); 
 8005138:	2020      	movs	r0, #32
 800513a:	f7ff fe51 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
	EPD_1IN54_V2_ReadBusy();
 800513e:	f7ff fe8b 	bl	8004e58 <EPD_1IN54_V2_ReadBusy>
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200000b8 	.word	0x200000b8

0800514c <EPD_1IN54_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_1IN54_V2_Clear(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8005152:	2319      	movs	r3, #25
 8005154:	80fb      	strh	r3, [r7, #6]
    Height = EPD_1IN54_V2_HEIGHT;
 8005156:	23c8      	movs	r3, #200	@ 0xc8
 8005158:	80bb      	strh	r3, [r7, #4]

    EPD_1IN54_V2_SendCommand(0x24);
 800515a:	2024      	movs	r0, #36	@ 0x24
 800515c:	f7ff fe40 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8005160:	2300      	movs	r3, #0
 8005162:	81fb      	strh	r3, [r7, #14]
 8005164:	e00f      	b.n	8005186 <EPD_1IN54_V2_Clear+0x3a>
        for (UWORD i = 0; i < Width; i++) {
 8005166:	2300      	movs	r3, #0
 8005168:	81bb      	strh	r3, [r7, #12]
 800516a:	e005      	b.n	8005178 <EPD_1IN54_V2_Clear+0x2c>
            EPD_1IN54_V2_SendData(0XFF);
 800516c:	20ff      	movs	r0, #255	@ 0xff
 800516e:	f7ff fe55 	bl	8004e1c <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8005172:	89bb      	ldrh	r3, [r7, #12]
 8005174:	3301      	adds	r3, #1
 8005176:	81bb      	strh	r3, [r7, #12]
 8005178:	89ba      	ldrh	r2, [r7, #12]
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	429a      	cmp	r2, r3
 800517e:	d3f5      	bcc.n	800516c <EPD_1IN54_V2_Clear+0x20>
    for (UWORD j = 0; j < Height; j++) {
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	3301      	adds	r3, #1
 8005184:	81fb      	strh	r3, [r7, #14]
 8005186:	89fa      	ldrh	r2, [r7, #14]
 8005188:	88bb      	ldrh	r3, [r7, #4]
 800518a:	429a      	cmp	r2, r3
 800518c:	d3eb      	bcc.n	8005166 <EPD_1IN54_V2_Clear+0x1a>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 800518e:	2026      	movs	r0, #38	@ 0x26
 8005190:	f7ff fe26 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8005194:	2300      	movs	r3, #0
 8005196:	817b      	strh	r3, [r7, #10]
 8005198:	e00f      	b.n	80051ba <EPD_1IN54_V2_Clear+0x6e>
        for (UWORD i = 0; i < Width; i++) {
 800519a:	2300      	movs	r3, #0
 800519c:	813b      	strh	r3, [r7, #8]
 800519e:	e005      	b.n	80051ac <EPD_1IN54_V2_Clear+0x60>
            EPD_1IN54_V2_SendData(0XFF);
 80051a0:	20ff      	movs	r0, #255	@ 0xff
 80051a2:	f7ff fe3b 	bl	8004e1c <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80051a6:	893b      	ldrh	r3, [r7, #8]
 80051a8:	3301      	adds	r3, #1
 80051aa:	813b      	strh	r3, [r7, #8]
 80051ac:	893a      	ldrh	r2, [r7, #8]
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d3f5      	bcc.n	80051a0 <EPD_1IN54_V2_Clear+0x54>
    for (UWORD j = 0; j < Height; j++) {
 80051b4:	897b      	ldrh	r3, [r7, #10]
 80051b6:	3301      	adds	r3, #1
 80051b8:	817b      	strh	r3, [r7, #10]
 80051ba:	897a      	ldrh	r2, [r7, #10]
 80051bc:	88bb      	ldrh	r3, [r7, #4]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d3eb      	bcc.n	800519a <EPD_1IN54_V2_Clear+0x4e>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 80051c2:	f7ff fe65 	bl	8004e90 <EPD_1IN54_V2_TurnOnDisplay>
}
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b086      	sub	sp, #24
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80051d6:	2319      	movs	r3, #25
 80051d8:	827b      	strh	r3, [r7, #18]
    Height = EPD_1IN54_V2_HEIGHT;
 80051da:	23c8      	movs	r3, #200	@ 0xc8
 80051dc:	823b      	strh	r3, [r7, #16]

    UDOUBLE Addr = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 80051e2:	2024      	movs	r0, #36	@ 0x24
 80051e4:	f7ff fdfc 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80051e8:	2300      	movs	r3, #0
 80051ea:	82fb      	strh	r3, [r7, #22]
 80051ec:	e01a      	b.n	8005224 <EPD_1IN54_V2_Display+0x56>
        for (UWORD i = 0; i < Width; i++) {
 80051ee:	2300      	movs	r3, #0
 80051f0:	82bb      	strh	r3, [r7, #20]
 80051f2:	e010      	b.n	8005216 <EPD_1IN54_V2_Display+0x48>
            Addr = i + j * Width;
 80051f4:	8aba      	ldrh	r2, [r7, #20]
 80051f6:	8afb      	ldrh	r3, [r7, #22]
 80051f8:	8a79      	ldrh	r1, [r7, #18]
 80051fa:	fb01 f303 	mul.w	r3, r1, r3
 80051fe:	4413      	add	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff fe06 	bl	8004e1c <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8005210:	8abb      	ldrh	r3, [r7, #20]
 8005212:	3301      	adds	r3, #1
 8005214:	82bb      	strh	r3, [r7, #20]
 8005216:	8aba      	ldrh	r2, [r7, #20]
 8005218:	8a7b      	ldrh	r3, [r7, #18]
 800521a:	429a      	cmp	r2, r3
 800521c:	d3ea      	bcc.n	80051f4 <EPD_1IN54_V2_Display+0x26>
    for (UWORD j = 0; j < Height; j++) {
 800521e:	8afb      	ldrh	r3, [r7, #22]
 8005220:	3301      	adds	r3, #1
 8005222:	82fb      	strh	r3, [r7, #22]
 8005224:	8afa      	ldrh	r2, [r7, #22]
 8005226:	8a3b      	ldrh	r3, [r7, #16]
 8005228:	429a      	cmp	r2, r3
 800522a:	d3e0      	bcc.n	80051ee <EPD_1IN54_V2_Display+0x20>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 800522c:	f7ff fe30 	bl	8004e90 <EPD_1IN54_V2_TurnOnDisplay>


}
 8005230:	bf00      	nop
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
		         first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8005240:	2319      	movs	r3, #25
 8005242:	81fb      	strh	r3, [r7, #14]
    Height = EPD_1IN54_V2_HEIGHT;
 8005244:	23c8      	movs	r3, #200	@ 0xc8
 8005246:	81bb      	strh	r3, [r7, #12]

    UDOUBLE Addr = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 800524c:	2024      	movs	r0, #36	@ 0x24
 800524e:	f7ff fdc7 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8005252:	2300      	movs	r3, #0
 8005254:	82fb      	strh	r3, [r7, #22]
 8005256:	e01a      	b.n	800528e <EPD_1IN54_V2_DisplayPartBaseImage+0x56>
        for (UWORD i = 0; i < Width; i++) {
 8005258:	2300      	movs	r3, #0
 800525a:	82bb      	strh	r3, [r7, #20]
 800525c:	e010      	b.n	8005280 <EPD_1IN54_V2_DisplayPartBaseImage+0x48>
            Addr = i + j * Width;
 800525e:	8aba      	ldrh	r2, [r7, #20]
 8005260:	8afb      	ldrh	r3, [r7, #22]
 8005262:	89f9      	ldrh	r1, [r7, #14]
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	4413      	add	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4413      	add	r3, r2
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fdd1 	bl	8004e1c <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800527a:	8abb      	ldrh	r3, [r7, #20]
 800527c:	3301      	adds	r3, #1
 800527e:	82bb      	strh	r3, [r7, #20]
 8005280:	8aba      	ldrh	r2, [r7, #20]
 8005282:	89fb      	ldrh	r3, [r7, #14]
 8005284:	429a      	cmp	r2, r3
 8005286:	d3ea      	bcc.n	800525e <EPD_1IN54_V2_DisplayPartBaseImage+0x26>
    for (UWORD j = 0; j < Height; j++) {
 8005288:	8afb      	ldrh	r3, [r7, #22]
 800528a:	3301      	adds	r3, #1
 800528c:	82fb      	strh	r3, [r7, #22]
 800528e:	8afa      	ldrh	r2, [r7, #22]
 8005290:	89bb      	ldrh	r3, [r7, #12]
 8005292:	429a      	cmp	r2, r3
 8005294:	d3e0      	bcc.n	8005258 <EPD_1IN54_V2_DisplayPartBaseImage+0x20>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 8005296:	2026      	movs	r0, #38	@ 0x26
 8005298:	f7ff fda2 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800529c:	2300      	movs	r3, #0
 800529e:	827b      	strh	r3, [r7, #18]
 80052a0:	e01a      	b.n	80052d8 <EPD_1IN54_V2_DisplayPartBaseImage+0xa0>
        for (UWORD i = 0; i < Width; i++) {
 80052a2:	2300      	movs	r3, #0
 80052a4:	823b      	strh	r3, [r7, #16]
 80052a6:	e010      	b.n	80052ca <EPD_1IN54_V2_DisplayPartBaseImage+0x92>
            Addr = i + j * Width;
 80052a8:	8a3a      	ldrh	r2, [r7, #16]
 80052aa:	8a7b      	ldrh	r3, [r7, #18]
 80052ac:	89f9      	ldrh	r1, [r7, #14]
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4413      	add	r3, r2
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fdac 	bl	8004e1c <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80052c4:	8a3b      	ldrh	r3, [r7, #16]
 80052c6:	3301      	adds	r3, #1
 80052c8:	823b      	strh	r3, [r7, #16]
 80052ca:	8a3a      	ldrh	r2, [r7, #16]
 80052cc:	89fb      	ldrh	r3, [r7, #14]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d3ea      	bcc.n	80052a8 <EPD_1IN54_V2_DisplayPartBaseImage+0x70>
    for (UWORD j = 0; j < Height; j++) {
 80052d2:	8a7b      	ldrh	r3, [r7, #18]
 80052d4:	3301      	adds	r3, #1
 80052d6:	827b      	strh	r3, [r7, #18]
 80052d8:	8a7a      	ldrh	r2, [r7, #18]
 80052da:	89bb      	ldrh	r3, [r7, #12]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d3e0      	bcc.n	80052a2 <EPD_1IN54_V2_DisplayPartBaseImage+0x6a>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 80052e0:	f7ff fde5 	bl	8004eae <EPD_1IN54_V2_TurnOnDisplayPart>
}
 80052e4:	bf00      	nop
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80052f4:	2319      	movs	r3, #25
 80052f6:	827b      	strh	r3, [r7, #18]
    Height = EPD_1IN54_V2_HEIGHT;
 80052f8:	23c8      	movs	r3, #200	@ 0xc8
 80052fa:	823b      	strh	r3, [r7, #16]
	
    UDOUBLE Addr = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 8005300:	2024      	movs	r0, #36	@ 0x24
 8005302:	f7ff fd6d 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8005306:	2300      	movs	r3, #0
 8005308:	82fb      	strh	r3, [r7, #22]
 800530a:	e01a      	b.n	8005342 <EPD_1IN54_V2_DisplayPart+0x56>
        for (UWORD i = 0; i < Width; i++) {
 800530c:	2300      	movs	r3, #0
 800530e:	82bb      	strh	r3, [r7, #20]
 8005310:	e010      	b.n	8005334 <EPD_1IN54_V2_DisplayPart+0x48>
            Addr = i + j * Width;
 8005312:	8aba      	ldrh	r2, [r7, #20]
 8005314:	8afb      	ldrh	r3, [r7, #22]
 8005316:	8a79      	ldrh	r1, [r7, #18]
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	4413      	add	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fd77 	bl	8004e1c <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800532e:	8abb      	ldrh	r3, [r7, #20]
 8005330:	3301      	adds	r3, #1
 8005332:	82bb      	strh	r3, [r7, #20]
 8005334:	8aba      	ldrh	r2, [r7, #20]
 8005336:	8a7b      	ldrh	r3, [r7, #18]
 8005338:	429a      	cmp	r2, r3
 800533a:	d3ea      	bcc.n	8005312 <EPD_1IN54_V2_DisplayPart+0x26>
    for (UWORD j = 0; j < Height; j++) {
 800533c:	8afb      	ldrh	r3, [r7, #22]
 800533e:	3301      	adds	r3, #1
 8005340:	82fb      	strh	r3, [r7, #22]
 8005342:	8afa      	ldrh	r2, [r7, #22]
 8005344:	8a3b      	ldrh	r3, [r7, #16]
 8005346:	429a      	cmp	r2, r3
 8005348:	d3e0      	bcc.n	800530c <EPD_1IN54_V2_DisplayPart+0x20>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 800534a:	f7ff fdb0 	bl	8004eae <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800534e:	bf00      	nop
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <EPD_1IN54_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_1IN54_V2_Sleep(void)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x10); //enter deep sleep
 800535a:	2010      	movs	r0, #16
 800535c:	f7ff fd40 	bl	8004de0 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8005360:	2001      	movs	r0, #1
 8005362:	f7ff fd5b 	bl	8004e1c <EPD_1IN54_V2_SendData>
    DEV_Delay_ms(100);
 8005366:	2064      	movs	r0, #100	@ 0x64
 8005368:	f7fc fbfa 	bl	8001b60 <HAL_Delay>
}
 800536c:	bf00      	nop
 800536e:	bd80      	pop	{r7, pc}

08005370 <malloc>:
 8005370:	4b02      	ldr	r3, [pc, #8]	@ (800537c <malloc+0xc>)
 8005372:	4601      	mov	r1, r0
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	f000 b825 	b.w	80053c4 <_malloc_r>
 800537a:	bf00      	nop
 800537c:	20000164 	.word	0x20000164

08005380 <sbrk_aligned>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	4e0f      	ldr	r6, [pc, #60]	@ (80053c0 <sbrk_aligned+0x40>)
 8005384:	460c      	mov	r4, r1
 8005386:	6831      	ldr	r1, [r6, #0]
 8005388:	4605      	mov	r5, r0
 800538a:	b911      	cbnz	r1, 8005392 <sbrk_aligned+0x12>
 800538c:	f000 fafa 	bl	8005984 <_sbrk_r>
 8005390:	6030      	str	r0, [r6, #0]
 8005392:	4621      	mov	r1, r4
 8005394:	4628      	mov	r0, r5
 8005396:	f000 faf5 	bl	8005984 <_sbrk_r>
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	d103      	bne.n	80053a6 <sbrk_aligned+0x26>
 800539e:	f04f 34ff 	mov.w	r4, #4294967295
 80053a2:	4620      	mov	r0, r4
 80053a4:	bd70      	pop	{r4, r5, r6, pc}
 80053a6:	1cc4      	adds	r4, r0, #3
 80053a8:	f024 0403 	bic.w	r4, r4, #3
 80053ac:	42a0      	cmp	r0, r4
 80053ae:	d0f8      	beq.n	80053a2 <sbrk_aligned+0x22>
 80053b0:	1a21      	subs	r1, r4, r0
 80053b2:	4628      	mov	r0, r5
 80053b4:	f000 fae6 	bl	8005984 <_sbrk_r>
 80053b8:	3001      	adds	r0, #1
 80053ba:	d1f2      	bne.n	80053a2 <sbrk_aligned+0x22>
 80053bc:	e7ef      	b.n	800539e <sbrk_aligned+0x1e>
 80053be:	bf00      	nop
 80053c0:	20000308 	.word	0x20000308

080053c4 <_malloc_r>:
 80053c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c8:	1ccd      	adds	r5, r1, #3
 80053ca:	f025 0503 	bic.w	r5, r5, #3
 80053ce:	3508      	adds	r5, #8
 80053d0:	2d0c      	cmp	r5, #12
 80053d2:	bf38      	it	cc
 80053d4:	250c      	movcc	r5, #12
 80053d6:	2d00      	cmp	r5, #0
 80053d8:	4606      	mov	r6, r0
 80053da:	db01      	blt.n	80053e0 <_malloc_r+0x1c>
 80053dc:	42a9      	cmp	r1, r5
 80053de:	d904      	bls.n	80053ea <_malloc_r+0x26>
 80053e0:	230c      	movs	r3, #12
 80053e2:	6033      	str	r3, [r6, #0]
 80053e4:	2000      	movs	r0, #0
 80053e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054c0 <_malloc_r+0xfc>
 80053ee:	f000 f869 	bl	80054c4 <__malloc_lock>
 80053f2:	f8d8 3000 	ldr.w	r3, [r8]
 80053f6:	461c      	mov	r4, r3
 80053f8:	bb44      	cbnz	r4, 800544c <_malloc_r+0x88>
 80053fa:	4629      	mov	r1, r5
 80053fc:	4630      	mov	r0, r6
 80053fe:	f7ff ffbf 	bl	8005380 <sbrk_aligned>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	4604      	mov	r4, r0
 8005406:	d158      	bne.n	80054ba <_malloc_r+0xf6>
 8005408:	f8d8 4000 	ldr.w	r4, [r8]
 800540c:	4627      	mov	r7, r4
 800540e:	2f00      	cmp	r7, #0
 8005410:	d143      	bne.n	800549a <_malloc_r+0xd6>
 8005412:	2c00      	cmp	r4, #0
 8005414:	d04b      	beq.n	80054ae <_malloc_r+0xea>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	4639      	mov	r1, r7
 800541a:	4630      	mov	r0, r6
 800541c:	eb04 0903 	add.w	r9, r4, r3
 8005420:	f000 fab0 	bl	8005984 <_sbrk_r>
 8005424:	4581      	cmp	r9, r0
 8005426:	d142      	bne.n	80054ae <_malloc_r+0xea>
 8005428:	6821      	ldr	r1, [r4, #0]
 800542a:	1a6d      	subs	r5, r5, r1
 800542c:	4629      	mov	r1, r5
 800542e:	4630      	mov	r0, r6
 8005430:	f7ff ffa6 	bl	8005380 <sbrk_aligned>
 8005434:	3001      	adds	r0, #1
 8005436:	d03a      	beq.n	80054ae <_malloc_r+0xea>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	442b      	add	r3, r5
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	f8d8 3000 	ldr.w	r3, [r8]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	bb62      	cbnz	r2, 80054a0 <_malloc_r+0xdc>
 8005446:	f8c8 7000 	str.w	r7, [r8]
 800544a:	e00f      	b.n	800546c <_malloc_r+0xa8>
 800544c:	6822      	ldr	r2, [r4, #0]
 800544e:	1b52      	subs	r2, r2, r5
 8005450:	d420      	bmi.n	8005494 <_malloc_r+0xd0>
 8005452:	2a0b      	cmp	r2, #11
 8005454:	d917      	bls.n	8005486 <_malloc_r+0xc2>
 8005456:	1961      	adds	r1, r4, r5
 8005458:	42a3      	cmp	r3, r4
 800545a:	6025      	str	r5, [r4, #0]
 800545c:	bf18      	it	ne
 800545e:	6059      	strne	r1, [r3, #4]
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	bf08      	it	eq
 8005464:	f8c8 1000 	streq.w	r1, [r8]
 8005468:	5162      	str	r2, [r4, r5]
 800546a:	604b      	str	r3, [r1, #4]
 800546c:	4630      	mov	r0, r6
 800546e:	f000 f82f 	bl	80054d0 <__malloc_unlock>
 8005472:	f104 000b 	add.w	r0, r4, #11
 8005476:	1d23      	adds	r3, r4, #4
 8005478:	f020 0007 	bic.w	r0, r0, #7
 800547c:	1ac2      	subs	r2, r0, r3
 800547e:	bf1c      	itt	ne
 8005480:	1a1b      	subne	r3, r3, r0
 8005482:	50a3      	strne	r3, [r4, r2]
 8005484:	e7af      	b.n	80053e6 <_malloc_r+0x22>
 8005486:	6862      	ldr	r2, [r4, #4]
 8005488:	42a3      	cmp	r3, r4
 800548a:	bf0c      	ite	eq
 800548c:	f8c8 2000 	streq.w	r2, [r8]
 8005490:	605a      	strne	r2, [r3, #4]
 8005492:	e7eb      	b.n	800546c <_malloc_r+0xa8>
 8005494:	4623      	mov	r3, r4
 8005496:	6864      	ldr	r4, [r4, #4]
 8005498:	e7ae      	b.n	80053f8 <_malloc_r+0x34>
 800549a:	463c      	mov	r4, r7
 800549c:	687f      	ldr	r7, [r7, #4]
 800549e:	e7b6      	b.n	800540e <_malloc_r+0x4a>
 80054a0:	461a      	mov	r2, r3
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	d1fb      	bne.n	80054a0 <_malloc_r+0xdc>
 80054a8:	2300      	movs	r3, #0
 80054aa:	6053      	str	r3, [r2, #4]
 80054ac:	e7de      	b.n	800546c <_malloc_r+0xa8>
 80054ae:	230c      	movs	r3, #12
 80054b0:	6033      	str	r3, [r6, #0]
 80054b2:	4630      	mov	r0, r6
 80054b4:	f000 f80c 	bl	80054d0 <__malloc_unlock>
 80054b8:	e794      	b.n	80053e4 <_malloc_r+0x20>
 80054ba:	6005      	str	r5, [r0, #0]
 80054bc:	e7d6      	b.n	800546c <_malloc_r+0xa8>
 80054be:	bf00      	nop
 80054c0:	2000030c 	.word	0x2000030c

080054c4 <__malloc_lock>:
 80054c4:	4801      	ldr	r0, [pc, #4]	@ (80054cc <__malloc_lock+0x8>)
 80054c6:	f000 baaa 	b.w	8005a1e <__retarget_lock_acquire_recursive>
 80054ca:	bf00      	nop
 80054cc:	20000450 	.word	0x20000450

080054d0 <__malloc_unlock>:
 80054d0:	4801      	ldr	r0, [pc, #4]	@ (80054d8 <__malloc_unlock+0x8>)
 80054d2:	f000 baa5 	b.w	8005a20 <__retarget_lock_release_recursive>
 80054d6:	bf00      	nop
 80054d8:	20000450 	.word	0x20000450

080054dc <std>:
 80054dc:	2300      	movs	r3, #0
 80054de:	b510      	push	{r4, lr}
 80054e0:	4604      	mov	r4, r0
 80054e2:	e9c0 3300 	strd	r3, r3, [r0]
 80054e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ea:	6083      	str	r3, [r0, #8]
 80054ec:	8181      	strh	r1, [r0, #12]
 80054ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80054f0:	81c2      	strh	r2, [r0, #14]
 80054f2:	6183      	str	r3, [r0, #24]
 80054f4:	4619      	mov	r1, r3
 80054f6:	2208      	movs	r2, #8
 80054f8:	305c      	adds	r0, #92	@ 0x5c
 80054fa:	f000 fa07 	bl	800590c <memset>
 80054fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005534 <std+0x58>)
 8005500:	6263      	str	r3, [r4, #36]	@ 0x24
 8005502:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <std+0x5c>)
 8005504:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005506:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <std+0x60>)
 8005508:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800550a:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <std+0x64>)
 800550c:	6323      	str	r3, [r4, #48]	@ 0x30
 800550e:	4b0d      	ldr	r3, [pc, #52]	@ (8005544 <std+0x68>)
 8005510:	6224      	str	r4, [r4, #32]
 8005512:	429c      	cmp	r4, r3
 8005514:	d006      	beq.n	8005524 <std+0x48>
 8005516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800551a:	4294      	cmp	r4, r2
 800551c:	d002      	beq.n	8005524 <std+0x48>
 800551e:	33d0      	adds	r3, #208	@ 0xd0
 8005520:	429c      	cmp	r4, r3
 8005522:	d105      	bne.n	8005530 <std+0x54>
 8005524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800552c:	f000 ba76 	b.w	8005a1c <__retarget_lock_init_recursive>
 8005530:	bd10      	pop	{r4, pc}
 8005532:	bf00      	nop
 8005534:	0800575d 	.word	0x0800575d
 8005538:	0800577f 	.word	0x0800577f
 800553c:	080057b7 	.word	0x080057b7
 8005540:	080057db 	.word	0x080057db
 8005544:	20000310 	.word	0x20000310

08005548 <stdio_exit_handler>:
 8005548:	4a02      	ldr	r2, [pc, #8]	@ (8005554 <stdio_exit_handler+0xc>)
 800554a:	4903      	ldr	r1, [pc, #12]	@ (8005558 <stdio_exit_handler+0x10>)
 800554c:	4803      	ldr	r0, [pc, #12]	@ (800555c <stdio_exit_handler+0x14>)
 800554e:	f000 b869 	b.w	8005624 <_fwalk_sglue>
 8005552:	bf00      	nop
 8005554:	20000158 	.word	0x20000158
 8005558:	0800618d 	.word	0x0800618d
 800555c:	20000168 	.word	0x20000168

08005560 <cleanup_stdio>:
 8005560:	6841      	ldr	r1, [r0, #4]
 8005562:	4b0c      	ldr	r3, [pc, #48]	@ (8005594 <cleanup_stdio+0x34>)
 8005564:	4299      	cmp	r1, r3
 8005566:	b510      	push	{r4, lr}
 8005568:	4604      	mov	r4, r0
 800556a:	d001      	beq.n	8005570 <cleanup_stdio+0x10>
 800556c:	f000 fe0e 	bl	800618c <_fflush_r>
 8005570:	68a1      	ldr	r1, [r4, #8]
 8005572:	4b09      	ldr	r3, [pc, #36]	@ (8005598 <cleanup_stdio+0x38>)
 8005574:	4299      	cmp	r1, r3
 8005576:	d002      	beq.n	800557e <cleanup_stdio+0x1e>
 8005578:	4620      	mov	r0, r4
 800557a:	f000 fe07 	bl	800618c <_fflush_r>
 800557e:	68e1      	ldr	r1, [r4, #12]
 8005580:	4b06      	ldr	r3, [pc, #24]	@ (800559c <cleanup_stdio+0x3c>)
 8005582:	4299      	cmp	r1, r3
 8005584:	d004      	beq.n	8005590 <cleanup_stdio+0x30>
 8005586:	4620      	mov	r0, r4
 8005588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800558c:	f000 bdfe 	b.w	800618c <_fflush_r>
 8005590:	bd10      	pop	{r4, pc}
 8005592:	bf00      	nop
 8005594:	20000310 	.word	0x20000310
 8005598:	20000378 	.word	0x20000378
 800559c:	200003e0 	.word	0x200003e0

080055a0 <global_stdio_init.part.0>:
 80055a0:	b510      	push	{r4, lr}
 80055a2:	4b0b      	ldr	r3, [pc, #44]	@ (80055d0 <global_stdio_init.part.0+0x30>)
 80055a4:	4c0b      	ldr	r4, [pc, #44]	@ (80055d4 <global_stdio_init.part.0+0x34>)
 80055a6:	4a0c      	ldr	r2, [pc, #48]	@ (80055d8 <global_stdio_init.part.0+0x38>)
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	4620      	mov	r0, r4
 80055ac:	2200      	movs	r2, #0
 80055ae:	2104      	movs	r1, #4
 80055b0:	f7ff ff94 	bl	80054dc <std>
 80055b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055b8:	2201      	movs	r2, #1
 80055ba:	2109      	movs	r1, #9
 80055bc:	f7ff ff8e 	bl	80054dc <std>
 80055c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055c4:	2202      	movs	r2, #2
 80055c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ca:	2112      	movs	r1, #18
 80055cc:	f7ff bf86 	b.w	80054dc <std>
 80055d0:	20000448 	.word	0x20000448
 80055d4:	20000310 	.word	0x20000310
 80055d8:	08005549 	.word	0x08005549

080055dc <__sfp_lock_acquire>:
 80055dc:	4801      	ldr	r0, [pc, #4]	@ (80055e4 <__sfp_lock_acquire+0x8>)
 80055de:	f000 ba1e 	b.w	8005a1e <__retarget_lock_acquire_recursive>
 80055e2:	bf00      	nop
 80055e4:	20000451 	.word	0x20000451

080055e8 <__sfp_lock_release>:
 80055e8:	4801      	ldr	r0, [pc, #4]	@ (80055f0 <__sfp_lock_release+0x8>)
 80055ea:	f000 ba19 	b.w	8005a20 <__retarget_lock_release_recursive>
 80055ee:	bf00      	nop
 80055f0:	20000451 	.word	0x20000451

080055f4 <__sinit>:
 80055f4:	b510      	push	{r4, lr}
 80055f6:	4604      	mov	r4, r0
 80055f8:	f7ff fff0 	bl	80055dc <__sfp_lock_acquire>
 80055fc:	6a23      	ldr	r3, [r4, #32]
 80055fe:	b11b      	cbz	r3, 8005608 <__sinit+0x14>
 8005600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005604:	f7ff bff0 	b.w	80055e8 <__sfp_lock_release>
 8005608:	4b04      	ldr	r3, [pc, #16]	@ (800561c <__sinit+0x28>)
 800560a:	6223      	str	r3, [r4, #32]
 800560c:	4b04      	ldr	r3, [pc, #16]	@ (8005620 <__sinit+0x2c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f5      	bne.n	8005600 <__sinit+0xc>
 8005614:	f7ff ffc4 	bl	80055a0 <global_stdio_init.part.0>
 8005618:	e7f2      	b.n	8005600 <__sinit+0xc>
 800561a:	bf00      	nop
 800561c:	08005561 	.word	0x08005561
 8005620:	20000448 	.word	0x20000448

08005624 <_fwalk_sglue>:
 8005624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005628:	4607      	mov	r7, r0
 800562a:	4688      	mov	r8, r1
 800562c:	4614      	mov	r4, r2
 800562e:	2600      	movs	r6, #0
 8005630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005634:	f1b9 0901 	subs.w	r9, r9, #1
 8005638:	d505      	bpl.n	8005646 <_fwalk_sglue+0x22>
 800563a:	6824      	ldr	r4, [r4, #0]
 800563c:	2c00      	cmp	r4, #0
 800563e:	d1f7      	bne.n	8005630 <_fwalk_sglue+0xc>
 8005640:	4630      	mov	r0, r6
 8005642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005646:	89ab      	ldrh	r3, [r5, #12]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d907      	bls.n	800565c <_fwalk_sglue+0x38>
 800564c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005650:	3301      	adds	r3, #1
 8005652:	d003      	beq.n	800565c <_fwalk_sglue+0x38>
 8005654:	4629      	mov	r1, r5
 8005656:	4638      	mov	r0, r7
 8005658:	47c0      	blx	r8
 800565a:	4306      	orrs	r6, r0
 800565c:	3568      	adds	r5, #104	@ 0x68
 800565e:	e7e9      	b.n	8005634 <_fwalk_sglue+0x10>

08005660 <_puts_r>:
 8005660:	6a03      	ldr	r3, [r0, #32]
 8005662:	b570      	push	{r4, r5, r6, lr}
 8005664:	6884      	ldr	r4, [r0, #8]
 8005666:	4605      	mov	r5, r0
 8005668:	460e      	mov	r6, r1
 800566a:	b90b      	cbnz	r3, 8005670 <_puts_r+0x10>
 800566c:	f7ff ffc2 	bl	80055f4 <__sinit>
 8005670:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005672:	07db      	lsls	r3, r3, #31
 8005674:	d405      	bmi.n	8005682 <_puts_r+0x22>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	0598      	lsls	r0, r3, #22
 800567a:	d402      	bmi.n	8005682 <_puts_r+0x22>
 800567c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800567e:	f000 f9ce 	bl	8005a1e <__retarget_lock_acquire_recursive>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	0719      	lsls	r1, r3, #28
 8005686:	d502      	bpl.n	800568e <_puts_r+0x2e>
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d135      	bne.n	80056fa <_puts_r+0x9a>
 800568e:	4621      	mov	r1, r4
 8005690:	4628      	mov	r0, r5
 8005692:	f000 f8e5 	bl	8005860 <__swsetup_r>
 8005696:	b380      	cbz	r0, 80056fa <_puts_r+0x9a>
 8005698:	f04f 35ff 	mov.w	r5, #4294967295
 800569c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800569e:	07da      	lsls	r2, r3, #31
 80056a0:	d405      	bmi.n	80056ae <_puts_r+0x4e>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	059b      	lsls	r3, r3, #22
 80056a6:	d402      	bmi.n	80056ae <_puts_r+0x4e>
 80056a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056aa:	f000 f9b9 	bl	8005a20 <__retarget_lock_release_recursive>
 80056ae:	4628      	mov	r0, r5
 80056b0:	bd70      	pop	{r4, r5, r6, pc}
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da04      	bge.n	80056c0 <_puts_r+0x60>
 80056b6:	69a2      	ldr	r2, [r4, #24]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	dc17      	bgt.n	80056ec <_puts_r+0x8c>
 80056bc:	290a      	cmp	r1, #10
 80056be:	d015      	beq.n	80056ec <_puts_r+0x8c>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	6022      	str	r2, [r4, #0]
 80056c6:	7019      	strb	r1, [r3, #0]
 80056c8:	68a3      	ldr	r3, [r4, #8]
 80056ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056ce:	3b01      	subs	r3, #1
 80056d0:	60a3      	str	r3, [r4, #8]
 80056d2:	2900      	cmp	r1, #0
 80056d4:	d1ed      	bne.n	80056b2 <_puts_r+0x52>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	da11      	bge.n	80056fe <_puts_r+0x9e>
 80056da:	4622      	mov	r2, r4
 80056dc:	210a      	movs	r1, #10
 80056de:	4628      	mov	r0, r5
 80056e0:	f000 f87f 	bl	80057e2 <__swbuf_r>
 80056e4:	3001      	adds	r0, #1
 80056e6:	d0d7      	beq.n	8005698 <_puts_r+0x38>
 80056e8:	250a      	movs	r5, #10
 80056ea:	e7d7      	b.n	800569c <_puts_r+0x3c>
 80056ec:	4622      	mov	r2, r4
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 f877 	bl	80057e2 <__swbuf_r>
 80056f4:	3001      	adds	r0, #1
 80056f6:	d1e7      	bne.n	80056c8 <_puts_r+0x68>
 80056f8:	e7ce      	b.n	8005698 <_puts_r+0x38>
 80056fa:	3e01      	subs	r6, #1
 80056fc:	e7e4      	b.n	80056c8 <_puts_r+0x68>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	6022      	str	r2, [r4, #0]
 8005704:	220a      	movs	r2, #10
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e7ee      	b.n	80056e8 <_puts_r+0x88>
	...

0800570c <puts>:
 800570c:	4b02      	ldr	r3, [pc, #8]	@ (8005718 <puts+0xc>)
 800570e:	4601      	mov	r1, r0
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	f7ff bfa5 	b.w	8005660 <_puts_r>
 8005716:	bf00      	nop
 8005718:	20000164 	.word	0x20000164

0800571c <siprintf>:
 800571c:	b40e      	push	{r1, r2, r3}
 800571e:	b500      	push	{lr}
 8005720:	b09c      	sub	sp, #112	@ 0x70
 8005722:	ab1d      	add	r3, sp, #116	@ 0x74
 8005724:	9002      	str	r0, [sp, #8]
 8005726:	9006      	str	r0, [sp, #24]
 8005728:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800572c:	4809      	ldr	r0, [pc, #36]	@ (8005754 <siprintf+0x38>)
 800572e:	9107      	str	r1, [sp, #28]
 8005730:	9104      	str	r1, [sp, #16]
 8005732:	4909      	ldr	r1, [pc, #36]	@ (8005758 <siprintf+0x3c>)
 8005734:	f853 2b04 	ldr.w	r2, [r3], #4
 8005738:	9105      	str	r1, [sp, #20]
 800573a:	6800      	ldr	r0, [r0, #0]
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	a902      	add	r1, sp, #8
 8005740:	f000 fa16 	bl	8005b70 <_svfiprintf_r>
 8005744:	9b02      	ldr	r3, [sp, #8]
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	b01c      	add	sp, #112	@ 0x70
 800574c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005750:	b003      	add	sp, #12
 8005752:	4770      	bx	lr
 8005754:	20000164 	.word	0x20000164
 8005758:	ffff0208 	.word	0xffff0208

0800575c <__sread>:
 800575c:	b510      	push	{r4, lr}
 800575e:	460c      	mov	r4, r1
 8005760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005764:	f000 f8fc 	bl	8005960 <_read_r>
 8005768:	2800      	cmp	r0, #0
 800576a:	bfab      	itete	ge
 800576c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800576e:	89a3      	ldrhlt	r3, [r4, #12]
 8005770:	181b      	addge	r3, r3, r0
 8005772:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005776:	bfac      	ite	ge
 8005778:	6563      	strge	r3, [r4, #84]	@ 0x54
 800577a:	81a3      	strhlt	r3, [r4, #12]
 800577c:	bd10      	pop	{r4, pc}

0800577e <__swrite>:
 800577e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005782:	461f      	mov	r7, r3
 8005784:	898b      	ldrh	r3, [r1, #12]
 8005786:	05db      	lsls	r3, r3, #23
 8005788:	4605      	mov	r5, r0
 800578a:	460c      	mov	r4, r1
 800578c:	4616      	mov	r6, r2
 800578e:	d505      	bpl.n	800579c <__swrite+0x1e>
 8005790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005794:	2302      	movs	r3, #2
 8005796:	2200      	movs	r2, #0
 8005798:	f000 f8d0 	bl	800593c <_lseek_r>
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057a6:	81a3      	strh	r3, [r4, #12]
 80057a8:	4632      	mov	r2, r6
 80057aa:	463b      	mov	r3, r7
 80057ac:	4628      	mov	r0, r5
 80057ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057b2:	f000 b8f7 	b.w	80059a4 <_write_r>

080057b6 <__sseek>:
 80057b6:	b510      	push	{r4, lr}
 80057b8:	460c      	mov	r4, r1
 80057ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057be:	f000 f8bd 	bl	800593c <_lseek_r>
 80057c2:	1c43      	adds	r3, r0, #1
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	bf15      	itete	ne
 80057c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80057ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057d2:	81a3      	strheq	r3, [r4, #12]
 80057d4:	bf18      	it	ne
 80057d6:	81a3      	strhne	r3, [r4, #12]
 80057d8:	bd10      	pop	{r4, pc}

080057da <__sclose>:
 80057da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057de:	f000 b89d 	b.w	800591c <_close_r>

080057e2 <__swbuf_r>:
 80057e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e4:	460e      	mov	r6, r1
 80057e6:	4614      	mov	r4, r2
 80057e8:	4605      	mov	r5, r0
 80057ea:	b118      	cbz	r0, 80057f4 <__swbuf_r+0x12>
 80057ec:	6a03      	ldr	r3, [r0, #32]
 80057ee:	b90b      	cbnz	r3, 80057f4 <__swbuf_r+0x12>
 80057f0:	f7ff ff00 	bl	80055f4 <__sinit>
 80057f4:	69a3      	ldr	r3, [r4, #24]
 80057f6:	60a3      	str	r3, [r4, #8]
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	071a      	lsls	r2, r3, #28
 80057fc:	d501      	bpl.n	8005802 <__swbuf_r+0x20>
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	b943      	cbnz	r3, 8005814 <__swbuf_r+0x32>
 8005802:	4621      	mov	r1, r4
 8005804:	4628      	mov	r0, r5
 8005806:	f000 f82b 	bl	8005860 <__swsetup_r>
 800580a:	b118      	cbz	r0, 8005814 <__swbuf_r+0x32>
 800580c:	f04f 37ff 	mov.w	r7, #4294967295
 8005810:	4638      	mov	r0, r7
 8005812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	6922      	ldr	r2, [r4, #16]
 8005818:	1a98      	subs	r0, r3, r2
 800581a:	6963      	ldr	r3, [r4, #20]
 800581c:	b2f6      	uxtb	r6, r6
 800581e:	4283      	cmp	r3, r0
 8005820:	4637      	mov	r7, r6
 8005822:	dc05      	bgt.n	8005830 <__swbuf_r+0x4e>
 8005824:	4621      	mov	r1, r4
 8005826:	4628      	mov	r0, r5
 8005828:	f000 fcb0 	bl	800618c <_fflush_r>
 800582c:	2800      	cmp	r0, #0
 800582e:	d1ed      	bne.n	800580c <__swbuf_r+0x2a>
 8005830:	68a3      	ldr	r3, [r4, #8]
 8005832:	3b01      	subs	r3, #1
 8005834:	60a3      	str	r3, [r4, #8]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	6022      	str	r2, [r4, #0]
 800583c:	701e      	strb	r6, [r3, #0]
 800583e:	6962      	ldr	r2, [r4, #20]
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	429a      	cmp	r2, r3
 8005844:	d004      	beq.n	8005850 <__swbuf_r+0x6e>
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	07db      	lsls	r3, r3, #31
 800584a:	d5e1      	bpl.n	8005810 <__swbuf_r+0x2e>
 800584c:	2e0a      	cmp	r6, #10
 800584e:	d1df      	bne.n	8005810 <__swbuf_r+0x2e>
 8005850:	4621      	mov	r1, r4
 8005852:	4628      	mov	r0, r5
 8005854:	f000 fc9a 	bl	800618c <_fflush_r>
 8005858:	2800      	cmp	r0, #0
 800585a:	d0d9      	beq.n	8005810 <__swbuf_r+0x2e>
 800585c:	e7d6      	b.n	800580c <__swbuf_r+0x2a>
	...

08005860 <__swsetup_r>:
 8005860:	b538      	push	{r3, r4, r5, lr}
 8005862:	4b29      	ldr	r3, [pc, #164]	@ (8005908 <__swsetup_r+0xa8>)
 8005864:	4605      	mov	r5, r0
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	460c      	mov	r4, r1
 800586a:	b118      	cbz	r0, 8005874 <__swsetup_r+0x14>
 800586c:	6a03      	ldr	r3, [r0, #32]
 800586e:	b90b      	cbnz	r3, 8005874 <__swsetup_r+0x14>
 8005870:	f7ff fec0 	bl	80055f4 <__sinit>
 8005874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005878:	0719      	lsls	r1, r3, #28
 800587a:	d422      	bmi.n	80058c2 <__swsetup_r+0x62>
 800587c:	06da      	lsls	r2, r3, #27
 800587e:	d407      	bmi.n	8005890 <__swsetup_r+0x30>
 8005880:	2209      	movs	r2, #9
 8005882:	602a      	str	r2, [r5, #0]
 8005884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	f04f 30ff 	mov.w	r0, #4294967295
 800588e:	e033      	b.n	80058f8 <__swsetup_r+0x98>
 8005890:	0758      	lsls	r0, r3, #29
 8005892:	d512      	bpl.n	80058ba <__swsetup_r+0x5a>
 8005894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005896:	b141      	cbz	r1, 80058aa <__swsetup_r+0x4a>
 8005898:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800589c:	4299      	cmp	r1, r3
 800589e:	d002      	beq.n	80058a6 <__swsetup_r+0x46>
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 f8bf 	bl	8005a24 <_free_r>
 80058a6:	2300      	movs	r3, #0
 80058a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	2300      	movs	r3, #0
 80058b4:	6063      	str	r3, [r4, #4]
 80058b6:	6923      	ldr	r3, [r4, #16]
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	f043 0308 	orr.w	r3, r3, #8
 80058c0:	81a3      	strh	r3, [r4, #12]
 80058c2:	6923      	ldr	r3, [r4, #16]
 80058c4:	b94b      	cbnz	r3, 80058da <__swsetup_r+0x7a>
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80058cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058d0:	d003      	beq.n	80058da <__swsetup_r+0x7a>
 80058d2:	4621      	mov	r1, r4
 80058d4:	4628      	mov	r0, r5
 80058d6:	f000 fca7 	bl	8006228 <__smakebuf_r>
 80058da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058de:	f013 0201 	ands.w	r2, r3, #1
 80058e2:	d00a      	beq.n	80058fa <__swsetup_r+0x9a>
 80058e4:	2200      	movs	r2, #0
 80058e6:	60a2      	str	r2, [r4, #8]
 80058e8:	6962      	ldr	r2, [r4, #20]
 80058ea:	4252      	negs	r2, r2
 80058ec:	61a2      	str	r2, [r4, #24]
 80058ee:	6922      	ldr	r2, [r4, #16]
 80058f0:	b942      	cbnz	r2, 8005904 <__swsetup_r+0xa4>
 80058f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058f6:	d1c5      	bne.n	8005884 <__swsetup_r+0x24>
 80058f8:	bd38      	pop	{r3, r4, r5, pc}
 80058fa:	0799      	lsls	r1, r3, #30
 80058fc:	bf58      	it	pl
 80058fe:	6962      	ldrpl	r2, [r4, #20]
 8005900:	60a2      	str	r2, [r4, #8]
 8005902:	e7f4      	b.n	80058ee <__swsetup_r+0x8e>
 8005904:	2000      	movs	r0, #0
 8005906:	e7f7      	b.n	80058f8 <__swsetup_r+0x98>
 8005908:	20000164 	.word	0x20000164

0800590c <memset>:
 800590c:	4402      	add	r2, r0
 800590e:	4603      	mov	r3, r0
 8005910:	4293      	cmp	r3, r2
 8005912:	d100      	bne.n	8005916 <memset+0xa>
 8005914:	4770      	bx	lr
 8005916:	f803 1b01 	strb.w	r1, [r3], #1
 800591a:	e7f9      	b.n	8005910 <memset+0x4>

0800591c <_close_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4d06      	ldr	r5, [pc, #24]	@ (8005938 <_close_r+0x1c>)
 8005920:	2300      	movs	r3, #0
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	f7fc f801 	bl	800192e <_close>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_close_r+0x1a>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b103      	cbz	r3, 8005936 <_close_r+0x1a>
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	2000044c 	.word	0x2000044c

0800593c <_lseek_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4d07      	ldr	r5, [pc, #28]	@ (800595c <_lseek_r+0x20>)
 8005940:	4604      	mov	r4, r0
 8005942:	4608      	mov	r0, r1
 8005944:	4611      	mov	r1, r2
 8005946:	2200      	movs	r2, #0
 8005948:	602a      	str	r2, [r5, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	f7fc f816 	bl	800197c <_lseek>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d102      	bne.n	800595a <_lseek_r+0x1e>
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	b103      	cbz	r3, 800595a <_lseek_r+0x1e>
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	2000044c 	.word	0x2000044c

08005960 <_read_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	4d07      	ldr	r5, [pc, #28]	@ (8005980 <_read_r+0x20>)
 8005964:	4604      	mov	r4, r0
 8005966:	4608      	mov	r0, r1
 8005968:	4611      	mov	r1, r2
 800596a:	2200      	movs	r2, #0
 800596c:	602a      	str	r2, [r5, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	f7fb ffa4 	bl	80018bc <_read>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d102      	bne.n	800597e <_read_r+0x1e>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	b103      	cbz	r3, 800597e <_read_r+0x1e>
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	2000044c 	.word	0x2000044c

08005984 <_sbrk_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d06      	ldr	r5, [pc, #24]	@ (80059a0 <_sbrk_r+0x1c>)
 8005988:	2300      	movs	r3, #0
 800598a:	4604      	mov	r4, r0
 800598c:	4608      	mov	r0, r1
 800598e:	602b      	str	r3, [r5, #0]
 8005990:	f7fc f802 	bl	8001998 <_sbrk>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_sbrk_r+0x1a>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_sbrk_r+0x1a>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	2000044c 	.word	0x2000044c

080059a4 <_write_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d07      	ldr	r5, [pc, #28]	@ (80059c4 <_write_r+0x20>)
 80059a8:	4604      	mov	r4, r0
 80059aa:	4608      	mov	r0, r1
 80059ac:	4611      	mov	r1, r2
 80059ae:	2200      	movs	r2, #0
 80059b0:	602a      	str	r2, [r5, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f7fb ff9f 	bl	80018f6 <_write>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_write_r+0x1e>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_write_r+0x1e>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	2000044c 	.word	0x2000044c

080059c8 <__errno>:
 80059c8:	4b01      	ldr	r3, [pc, #4]	@ (80059d0 <__errno+0x8>)
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20000164 	.word	0x20000164

080059d4 <__libc_init_array>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	4d0d      	ldr	r5, [pc, #52]	@ (8005a0c <__libc_init_array+0x38>)
 80059d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005a10 <__libc_init_array+0x3c>)
 80059da:	1b64      	subs	r4, r4, r5
 80059dc:	10a4      	asrs	r4, r4, #2
 80059de:	2600      	movs	r6, #0
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	d109      	bne.n	80059f8 <__libc_init_array+0x24>
 80059e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005a14 <__libc_init_array+0x40>)
 80059e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005a18 <__libc_init_array+0x44>)
 80059e8:	f000 fcda 	bl	80063a0 <_init>
 80059ec:	1b64      	subs	r4, r4, r5
 80059ee:	10a4      	asrs	r4, r4, #2
 80059f0:	2600      	movs	r6, #0
 80059f2:	42a6      	cmp	r6, r4
 80059f4:	d105      	bne.n	8005a02 <__libc_init_array+0x2e>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fc:	4798      	blx	r3
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7ee      	b.n	80059e0 <__libc_init_array+0xc>
 8005a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a06:	4798      	blx	r3
 8005a08:	3601      	adds	r6, #1
 8005a0a:	e7f2      	b.n	80059f2 <__libc_init_array+0x1e>
 8005a0c:	08007088 	.word	0x08007088
 8005a10:	08007088 	.word	0x08007088
 8005a14:	08007088 	.word	0x08007088
 8005a18:	0800708c 	.word	0x0800708c

08005a1c <__retarget_lock_init_recursive>:
 8005a1c:	4770      	bx	lr

08005a1e <__retarget_lock_acquire_recursive>:
 8005a1e:	4770      	bx	lr

08005a20 <__retarget_lock_release_recursive>:
 8005a20:	4770      	bx	lr
	...

08005a24 <_free_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4605      	mov	r5, r0
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	d041      	beq.n	8005ab0 <_free_r+0x8c>
 8005a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a30:	1f0c      	subs	r4, r1, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bfb8      	it	lt
 8005a36:	18e4      	addlt	r4, r4, r3
 8005a38:	f7ff fd44 	bl	80054c4 <__malloc_lock>
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab4 <_free_r+0x90>)
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	b933      	cbnz	r3, 8005a50 <_free_r+0x2c>
 8005a42:	6063      	str	r3, [r4, #4]
 8005a44:	6014      	str	r4, [r2, #0]
 8005a46:	4628      	mov	r0, r5
 8005a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a4c:	f7ff bd40 	b.w	80054d0 <__malloc_unlock>
 8005a50:	42a3      	cmp	r3, r4
 8005a52:	d908      	bls.n	8005a66 <_free_r+0x42>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	1821      	adds	r1, r4, r0
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf01      	itttt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	1809      	addeq	r1, r1, r0
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	e7ed      	b.n	8005a42 <_free_r+0x1e>
 8005a66:	461a      	mov	r2, r3
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	b10b      	cbz	r3, 8005a70 <_free_r+0x4c>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d9fa      	bls.n	8005a66 <_free_r+0x42>
 8005a70:	6811      	ldr	r1, [r2, #0]
 8005a72:	1850      	adds	r0, r2, r1
 8005a74:	42a0      	cmp	r0, r4
 8005a76:	d10b      	bne.n	8005a90 <_free_r+0x6c>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	4401      	add	r1, r0
 8005a7c:	1850      	adds	r0, r2, r1
 8005a7e:	4283      	cmp	r3, r0
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	d1e0      	bne.n	8005a46 <_free_r+0x22>
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	6053      	str	r3, [r2, #4]
 8005a8a:	4408      	add	r0, r1
 8005a8c:	6010      	str	r0, [r2, #0]
 8005a8e:	e7da      	b.n	8005a46 <_free_r+0x22>
 8005a90:	d902      	bls.n	8005a98 <_free_r+0x74>
 8005a92:	230c      	movs	r3, #12
 8005a94:	602b      	str	r3, [r5, #0]
 8005a96:	e7d6      	b.n	8005a46 <_free_r+0x22>
 8005a98:	6820      	ldr	r0, [r4, #0]
 8005a9a:	1821      	adds	r1, r4, r0
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	bf04      	itt	eq
 8005aa0:	6819      	ldreq	r1, [r3, #0]
 8005aa2:	685b      	ldreq	r3, [r3, #4]
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	bf04      	itt	eq
 8005aa8:	1809      	addeq	r1, r1, r0
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6054      	str	r4, [r2, #4]
 8005aae:	e7ca      	b.n	8005a46 <_free_r+0x22>
 8005ab0:	bd38      	pop	{r3, r4, r5, pc}
 8005ab2:	bf00      	nop
 8005ab4:	2000030c 	.word	0x2000030c

08005ab8 <__ssputs_r>:
 8005ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005abc:	688e      	ldr	r6, [r1, #8]
 8005abe:	461f      	mov	r7, r3
 8005ac0:	42be      	cmp	r6, r7
 8005ac2:	680b      	ldr	r3, [r1, #0]
 8005ac4:	4682      	mov	sl, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	4690      	mov	r8, r2
 8005aca:	d82d      	bhi.n	8005b28 <__ssputs_r+0x70>
 8005acc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ad0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ad4:	d026      	beq.n	8005b24 <__ssputs_r+0x6c>
 8005ad6:	6965      	ldr	r5, [r4, #20]
 8005ad8:	6909      	ldr	r1, [r1, #16]
 8005ada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ade:	eba3 0901 	sub.w	r9, r3, r1
 8005ae2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ae6:	1c7b      	adds	r3, r7, #1
 8005ae8:	444b      	add	r3, r9
 8005aea:	106d      	asrs	r5, r5, #1
 8005aec:	429d      	cmp	r5, r3
 8005aee:	bf38      	it	cc
 8005af0:	461d      	movcc	r5, r3
 8005af2:	0553      	lsls	r3, r2, #21
 8005af4:	d527      	bpl.n	8005b46 <__ssputs_r+0x8e>
 8005af6:	4629      	mov	r1, r5
 8005af8:	f7ff fc64 	bl	80053c4 <_malloc_r>
 8005afc:	4606      	mov	r6, r0
 8005afe:	b360      	cbz	r0, 8005b5a <__ssputs_r+0xa2>
 8005b00:	6921      	ldr	r1, [r4, #16]
 8005b02:	464a      	mov	r2, r9
 8005b04:	f000 fc08 	bl	8006318 <memcpy>
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b12:	81a3      	strh	r3, [r4, #12]
 8005b14:	6126      	str	r6, [r4, #16]
 8005b16:	6165      	str	r5, [r4, #20]
 8005b18:	444e      	add	r6, r9
 8005b1a:	eba5 0509 	sub.w	r5, r5, r9
 8005b1e:	6026      	str	r6, [r4, #0]
 8005b20:	60a5      	str	r5, [r4, #8]
 8005b22:	463e      	mov	r6, r7
 8005b24:	42be      	cmp	r6, r7
 8005b26:	d900      	bls.n	8005b2a <__ssputs_r+0x72>
 8005b28:	463e      	mov	r6, r7
 8005b2a:	6820      	ldr	r0, [r4, #0]
 8005b2c:	4632      	mov	r2, r6
 8005b2e:	4641      	mov	r1, r8
 8005b30:	f000 fbb6 	bl	80062a0 <memmove>
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	1b9b      	subs	r3, r3, r6
 8005b38:	60a3      	str	r3, [r4, #8]
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	4433      	add	r3, r6
 8005b3e:	6023      	str	r3, [r4, #0]
 8005b40:	2000      	movs	r0, #0
 8005b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b46:	462a      	mov	r2, r5
 8005b48:	f000 fbf4 	bl	8006334 <_realloc_r>
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d1e0      	bne.n	8005b14 <__ssputs_r+0x5c>
 8005b52:	6921      	ldr	r1, [r4, #16]
 8005b54:	4650      	mov	r0, sl
 8005b56:	f7ff ff65 	bl	8005a24 <_free_r>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	f8ca 3000 	str.w	r3, [sl]
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	e7e9      	b.n	8005b42 <__ssputs_r+0x8a>
	...

08005b70 <_svfiprintf_r>:
 8005b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b74:	4698      	mov	r8, r3
 8005b76:	898b      	ldrh	r3, [r1, #12]
 8005b78:	061b      	lsls	r3, r3, #24
 8005b7a:	b09d      	sub	sp, #116	@ 0x74
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	460d      	mov	r5, r1
 8005b80:	4614      	mov	r4, r2
 8005b82:	d510      	bpl.n	8005ba6 <_svfiprintf_r+0x36>
 8005b84:	690b      	ldr	r3, [r1, #16]
 8005b86:	b973      	cbnz	r3, 8005ba6 <_svfiprintf_r+0x36>
 8005b88:	2140      	movs	r1, #64	@ 0x40
 8005b8a:	f7ff fc1b 	bl	80053c4 <_malloc_r>
 8005b8e:	6028      	str	r0, [r5, #0]
 8005b90:	6128      	str	r0, [r5, #16]
 8005b92:	b930      	cbnz	r0, 8005ba2 <_svfiprintf_r+0x32>
 8005b94:	230c      	movs	r3, #12
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	b01d      	add	sp, #116	@ 0x74
 8005b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba2:	2340      	movs	r3, #64	@ 0x40
 8005ba4:	616b      	str	r3, [r5, #20]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005baa:	2320      	movs	r3, #32
 8005bac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bb4:	2330      	movs	r3, #48	@ 0x30
 8005bb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d54 <_svfiprintf_r+0x1e4>
 8005bba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bbe:	f04f 0901 	mov.w	r9, #1
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	469a      	mov	sl, r3
 8005bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bca:	b10a      	cbz	r2, 8005bd0 <_svfiprintf_r+0x60>
 8005bcc:	2a25      	cmp	r2, #37	@ 0x25
 8005bce:	d1f9      	bne.n	8005bc4 <_svfiprintf_r+0x54>
 8005bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd4:	d00b      	beq.n	8005bee <_svfiprintf_r+0x7e>
 8005bd6:	465b      	mov	r3, fp
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4629      	mov	r1, r5
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f7ff ff6b 	bl	8005ab8 <__ssputs_r>
 8005be2:	3001      	adds	r0, #1
 8005be4:	f000 80a7 	beq.w	8005d36 <_svfiprintf_r+0x1c6>
 8005be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bea:	445a      	add	r2, fp
 8005bec:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bee:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 809f 	beq.w	8005d36 <_svfiprintf_r+0x1c6>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c02:	f10a 0a01 	add.w	sl, sl, #1
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	9307      	str	r3, [sp, #28]
 8005c0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c10:	4654      	mov	r4, sl
 8005c12:	2205      	movs	r2, #5
 8005c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c18:	484e      	ldr	r0, [pc, #312]	@ (8005d54 <_svfiprintf_r+0x1e4>)
 8005c1a:	f7fa fae1 	bl	80001e0 <memchr>
 8005c1e:	9a04      	ldr	r2, [sp, #16]
 8005c20:	b9d8      	cbnz	r0, 8005c5a <_svfiprintf_r+0xea>
 8005c22:	06d0      	lsls	r0, r2, #27
 8005c24:	bf44      	itt	mi
 8005c26:	2320      	movmi	r3, #32
 8005c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c2c:	0711      	lsls	r1, r2, #28
 8005c2e:	bf44      	itt	mi
 8005c30:	232b      	movmi	r3, #43	@ 0x2b
 8005c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c36:	f89a 3000 	ldrb.w	r3, [sl]
 8005c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c3c:	d015      	beq.n	8005c6a <_svfiprintf_r+0xfa>
 8005c3e:	9a07      	ldr	r2, [sp, #28]
 8005c40:	4654      	mov	r4, sl
 8005c42:	2000      	movs	r0, #0
 8005c44:	f04f 0c0a 	mov.w	ip, #10
 8005c48:	4621      	mov	r1, r4
 8005c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c4e:	3b30      	subs	r3, #48	@ 0x30
 8005c50:	2b09      	cmp	r3, #9
 8005c52:	d94b      	bls.n	8005cec <_svfiprintf_r+0x17c>
 8005c54:	b1b0      	cbz	r0, 8005c84 <_svfiprintf_r+0x114>
 8005c56:	9207      	str	r2, [sp, #28]
 8005c58:	e014      	b.n	8005c84 <_svfiprintf_r+0x114>
 8005c5a:	eba0 0308 	sub.w	r3, r0, r8
 8005c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c62:	4313      	orrs	r3, r2
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	46a2      	mov	sl, r4
 8005c68:	e7d2      	b.n	8005c10 <_svfiprintf_r+0xa0>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	1d19      	adds	r1, r3, #4
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	9103      	str	r1, [sp, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bfbb      	ittet	lt
 8005c76:	425b      	neglt	r3, r3
 8005c78:	f042 0202 	orrlt.w	r2, r2, #2
 8005c7c:	9307      	strge	r3, [sp, #28]
 8005c7e:	9307      	strlt	r3, [sp, #28]
 8005c80:	bfb8      	it	lt
 8005c82:	9204      	strlt	r2, [sp, #16]
 8005c84:	7823      	ldrb	r3, [r4, #0]
 8005c86:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c88:	d10a      	bne.n	8005ca0 <_svfiprintf_r+0x130>
 8005c8a:	7863      	ldrb	r3, [r4, #1]
 8005c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c8e:	d132      	bne.n	8005cf6 <_svfiprintf_r+0x186>
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	1d1a      	adds	r2, r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	9203      	str	r2, [sp, #12]
 8005c98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c9c:	3402      	adds	r4, #2
 8005c9e:	9305      	str	r3, [sp, #20]
 8005ca0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d64 <_svfiprintf_r+0x1f4>
 8005ca4:	7821      	ldrb	r1, [r4, #0]
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	4650      	mov	r0, sl
 8005caa:	f7fa fa99 	bl	80001e0 <memchr>
 8005cae:	b138      	cbz	r0, 8005cc0 <_svfiprintf_r+0x150>
 8005cb0:	9b04      	ldr	r3, [sp, #16]
 8005cb2:	eba0 000a 	sub.w	r0, r0, sl
 8005cb6:	2240      	movs	r2, #64	@ 0x40
 8005cb8:	4082      	lsls	r2, r0
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	3401      	adds	r4, #1
 8005cbe:	9304      	str	r3, [sp, #16]
 8005cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc4:	4824      	ldr	r0, [pc, #144]	@ (8005d58 <_svfiprintf_r+0x1e8>)
 8005cc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cca:	2206      	movs	r2, #6
 8005ccc:	f7fa fa88 	bl	80001e0 <memchr>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d036      	beq.n	8005d42 <_svfiprintf_r+0x1d2>
 8005cd4:	4b21      	ldr	r3, [pc, #132]	@ (8005d5c <_svfiprintf_r+0x1ec>)
 8005cd6:	bb1b      	cbnz	r3, 8005d20 <_svfiprintf_r+0x1b0>
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	3307      	adds	r3, #7
 8005cdc:	f023 0307 	bic.w	r3, r3, #7
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	9303      	str	r3, [sp, #12]
 8005ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce6:	4433      	add	r3, r6
 8005ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cea:	e76a      	b.n	8005bc2 <_svfiprintf_r+0x52>
 8005cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	e7a8      	b.n	8005c48 <_svfiprintf_r+0xd8>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	3401      	adds	r4, #1
 8005cfa:	9305      	str	r3, [sp, #20]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f04f 0c0a 	mov.w	ip, #10
 8005d02:	4620      	mov	r0, r4
 8005d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d08:	3a30      	subs	r2, #48	@ 0x30
 8005d0a:	2a09      	cmp	r2, #9
 8005d0c:	d903      	bls.n	8005d16 <_svfiprintf_r+0x1a6>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0c6      	beq.n	8005ca0 <_svfiprintf_r+0x130>
 8005d12:	9105      	str	r1, [sp, #20]
 8005d14:	e7c4      	b.n	8005ca0 <_svfiprintf_r+0x130>
 8005d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e7f0      	b.n	8005d02 <_svfiprintf_r+0x192>
 8005d20:	ab03      	add	r3, sp, #12
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	462a      	mov	r2, r5
 8005d26:	4b0e      	ldr	r3, [pc, #56]	@ (8005d60 <_svfiprintf_r+0x1f0>)
 8005d28:	a904      	add	r1, sp, #16
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	f3af 8000 	nop.w
 8005d30:	1c42      	adds	r2, r0, #1
 8005d32:	4606      	mov	r6, r0
 8005d34:	d1d6      	bne.n	8005ce4 <_svfiprintf_r+0x174>
 8005d36:	89ab      	ldrh	r3, [r5, #12]
 8005d38:	065b      	lsls	r3, r3, #25
 8005d3a:	f53f af2d 	bmi.w	8005b98 <_svfiprintf_r+0x28>
 8005d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d40:	e72c      	b.n	8005b9c <_svfiprintf_r+0x2c>
 8005d42:	ab03      	add	r3, sp, #12
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	462a      	mov	r2, r5
 8005d48:	4b05      	ldr	r3, [pc, #20]	@ (8005d60 <_svfiprintf_r+0x1f0>)
 8005d4a:	a904      	add	r1, sp, #16
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f000 f879 	bl	8005e44 <_printf_i>
 8005d52:	e7ed      	b.n	8005d30 <_svfiprintf_r+0x1c0>
 8005d54:	0800704c 	.word	0x0800704c
 8005d58:	08007056 	.word	0x08007056
 8005d5c:	00000000 	.word	0x00000000
 8005d60:	08005ab9 	.word	0x08005ab9
 8005d64:	08007052 	.word	0x08007052

08005d68 <_printf_common>:
 8005d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	4698      	mov	r8, r3
 8005d70:	688a      	ldr	r2, [r1, #8]
 8005d72:	690b      	ldr	r3, [r1, #16]
 8005d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	bfb8      	it	lt
 8005d7c:	4613      	movlt	r3, r2
 8005d7e:	6033      	str	r3, [r6, #0]
 8005d80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d84:	4607      	mov	r7, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	b10a      	cbz	r2, 8005d8e <_printf_common+0x26>
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	0699      	lsls	r1, r3, #26
 8005d92:	bf42      	ittt	mi
 8005d94:	6833      	ldrmi	r3, [r6, #0]
 8005d96:	3302      	addmi	r3, #2
 8005d98:	6033      	strmi	r3, [r6, #0]
 8005d9a:	6825      	ldr	r5, [r4, #0]
 8005d9c:	f015 0506 	ands.w	r5, r5, #6
 8005da0:	d106      	bne.n	8005db0 <_printf_common+0x48>
 8005da2:	f104 0a19 	add.w	sl, r4, #25
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	6832      	ldr	r2, [r6, #0]
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc26      	bgt.n	8005dfe <_printf_common+0x96>
 8005db0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005db4:	6822      	ldr	r2, [r4, #0]
 8005db6:	3b00      	subs	r3, #0
 8005db8:	bf18      	it	ne
 8005dba:	2301      	movne	r3, #1
 8005dbc:	0692      	lsls	r2, r2, #26
 8005dbe:	d42b      	bmi.n	8005e18 <_printf_common+0xb0>
 8005dc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	47c8      	blx	r9
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d01e      	beq.n	8005e0c <_printf_common+0xa4>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	6922      	ldr	r2, [r4, #16]
 8005dd2:	f003 0306 	and.w	r3, r3, #6
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	bf02      	ittt	eq
 8005dda:	68e5      	ldreq	r5, [r4, #12]
 8005ddc:	6833      	ldreq	r3, [r6, #0]
 8005dde:	1aed      	subeq	r5, r5, r3
 8005de0:	68a3      	ldr	r3, [r4, #8]
 8005de2:	bf0c      	ite	eq
 8005de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de8:	2500      	movne	r5, #0
 8005dea:	4293      	cmp	r3, r2
 8005dec:	bfc4      	itt	gt
 8005dee:	1a9b      	subgt	r3, r3, r2
 8005df0:	18ed      	addgt	r5, r5, r3
 8005df2:	2600      	movs	r6, #0
 8005df4:	341a      	adds	r4, #26
 8005df6:	42b5      	cmp	r5, r6
 8005df8:	d11a      	bne.n	8005e30 <_printf_common+0xc8>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e008      	b.n	8005e10 <_printf_common+0xa8>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4652      	mov	r2, sl
 8005e02:	4641      	mov	r1, r8
 8005e04:	4638      	mov	r0, r7
 8005e06:	47c8      	blx	r9
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d103      	bne.n	8005e14 <_printf_common+0xac>
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e14:	3501      	adds	r5, #1
 8005e16:	e7c6      	b.n	8005da6 <_printf_common+0x3e>
 8005e18:	18e1      	adds	r1, r4, r3
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	2030      	movs	r0, #48	@ 0x30
 8005e1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e22:	4422      	add	r2, r4
 8005e24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	e7c7      	b.n	8005dc0 <_printf_common+0x58>
 8005e30:	2301      	movs	r3, #1
 8005e32:	4622      	mov	r2, r4
 8005e34:	4641      	mov	r1, r8
 8005e36:	4638      	mov	r0, r7
 8005e38:	47c8      	blx	r9
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d0e6      	beq.n	8005e0c <_printf_common+0xa4>
 8005e3e:	3601      	adds	r6, #1
 8005e40:	e7d9      	b.n	8005df6 <_printf_common+0x8e>
	...

08005e44 <_printf_i>:
 8005e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	7e0f      	ldrb	r7, [r1, #24]
 8005e4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e4c:	2f78      	cmp	r7, #120	@ 0x78
 8005e4e:	4691      	mov	r9, r2
 8005e50:	4680      	mov	r8, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	469a      	mov	sl, r3
 8005e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e5a:	d807      	bhi.n	8005e6c <_printf_i+0x28>
 8005e5c:	2f62      	cmp	r7, #98	@ 0x62
 8005e5e:	d80a      	bhi.n	8005e76 <_printf_i+0x32>
 8005e60:	2f00      	cmp	r7, #0
 8005e62:	f000 80d2 	beq.w	800600a <_printf_i+0x1c6>
 8005e66:	2f58      	cmp	r7, #88	@ 0x58
 8005e68:	f000 80b9 	beq.w	8005fde <_printf_i+0x19a>
 8005e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e74:	e03a      	b.n	8005eec <_printf_i+0xa8>
 8005e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e7a:	2b15      	cmp	r3, #21
 8005e7c:	d8f6      	bhi.n	8005e6c <_printf_i+0x28>
 8005e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e84 <_printf_i+0x40>)
 8005e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e84:	08005edd 	.word	0x08005edd
 8005e88:	08005ef1 	.word	0x08005ef1
 8005e8c:	08005e6d 	.word	0x08005e6d
 8005e90:	08005e6d 	.word	0x08005e6d
 8005e94:	08005e6d 	.word	0x08005e6d
 8005e98:	08005e6d 	.word	0x08005e6d
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005e6d 	.word	0x08005e6d
 8005ea4:	08005e6d 	.word	0x08005e6d
 8005ea8:	08005e6d 	.word	0x08005e6d
 8005eac:	08005e6d 	.word	0x08005e6d
 8005eb0:	08005ff1 	.word	0x08005ff1
 8005eb4:	08005f1b 	.word	0x08005f1b
 8005eb8:	08005fab 	.word	0x08005fab
 8005ebc:	08005e6d 	.word	0x08005e6d
 8005ec0:	08005e6d 	.word	0x08005e6d
 8005ec4:	08006013 	.word	0x08006013
 8005ec8:	08005e6d 	.word	0x08005e6d
 8005ecc:	08005f1b 	.word	0x08005f1b
 8005ed0:	08005e6d 	.word	0x08005e6d
 8005ed4:	08005e6d 	.word	0x08005e6d
 8005ed8:	08005fb3 	.word	0x08005fb3
 8005edc:	6833      	ldr	r3, [r6, #0]
 8005ede:	1d1a      	adds	r2, r3, #4
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6032      	str	r2, [r6, #0]
 8005ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005eec:	2301      	movs	r3, #1
 8005eee:	e09d      	b.n	800602c <_printf_i+0x1e8>
 8005ef0:	6833      	ldr	r3, [r6, #0]
 8005ef2:	6820      	ldr	r0, [r4, #0]
 8005ef4:	1d19      	adds	r1, r3, #4
 8005ef6:	6031      	str	r1, [r6, #0]
 8005ef8:	0606      	lsls	r6, r0, #24
 8005efa:	d501      	bpl.n	8005f00 <_printf_i+0xbc>
 8005efc:	681d      	ldr	r5, [r3, #0]
 8005efe:	e003      	b.n	8005f08 <_printf_i+0xc4>
 8005f00:	0645      	lsls	r5, r0, #25
 8005f02:	d5fb      	bpl.n	8005efc <_printf_i+0xb8>
 8005f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f08:	2d00      	cmp	r5, #0
 8005f0a:	da03      	bge.n	8005f14 <_printf_i+0xd0>
 8005f0c:	232d      	movs	r3, #45	@ 0x2d
 8005f0e:	426d      	negs	r5, r5
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f14:	4859      	ldr	r0, [pc, #356]	@ (800607c <_printf_i+0x238>)
 8005f16:	230a      	movs	r3, #10
 8005f18:	e011      	b.n	8005f3e <_printf_i+0xfa>
 8005f1a:	6821      	ldr	r1, [r4, #0]
 8005f1c:	6833      	ldr	r3, [r6, #0]
 8005f1e:	0608      	lsls	r0, r1, #24
 8005f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f24:	d402      	bmi.n	8005f2c <_printf_i+0xe8>
 8005f26:	0649      	lsls	r1, r1, #25
 8005f28:	bf48      	it	mi
 8005f2a:	b2ad      	uxthmi	r5, r5
 8005f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f2e:	4853      	ldr	r0, [pc, #332]	@ (800607c <_printf_i+0x238>)
 8005f30:	6033      	str	r3, [r6, #0]
 8005f32:	bf14      	ite	ne
 8005f34:	230a      	movne	r3, #10
 8005f36:	2308      	moveq	r3, #8
 8005f38:	2100      	movs	r1, #0
 8005f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f3e:	6866      	ldr	r6, [r4, #4]
 8005f40:	60a6      	str	r6, [r4, #8]
 8005f42:	2e00      	cmp	r6, #0
 8005f44:	bfa2      	ittt	ge
 8005f46:	6821      	ldrge	r1, [r4, #0]
 8005f48:	f021 0104 	bicge.w	r1, r1, #4
 8005f4c:	6021      	strge	r1, [r4, #0]
 8005f4e:	b90d      	cbnz	r5, 8005f54 <_printf_i+0x110>
 8005f50:	2e00      	cmp	r6, #0
 8005f52:	d04b      	beq.n	8005fec <_printf_i+0x1a8>
 8005f54:	4616      	mov	r6, r2
 8005f56:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f5a:	fb03 5711 	mls	r7, r3, r1, r5
 8005f5e:	5dc7      	ldrb	r7, [r0, r7]
 8005f60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f64:	462f      	mov	r7, r5
 8005f66:	42bb      	cmp	r3, r7
 8005f68:	460d      	mov	r5, r1
 8005f6a:	d9f4      	bls.n	8005f56 <_printf_i+0x112>
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d10b      	bne.n	8005f88 <_printf_i+0x144>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	07df      	lsls	r7, r3, #31
 8005f74:	d508      	bpl.n	8005f88 <_printf_i+0x144>
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	6861      	ldr	r1, [r4, #4]
 8005f7a:	4299      	cmp	r1, r3
 8005f7c:	bfde      	ittt	le
 8005f7e:	2330      	movle	r3, #48	@ 0x30
 8005f80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f88:	1b92      	subs	r2, r2, r6
 8005f8a:	6122      	str	r2, [r4, #16]
 8005f8c:	f8cd a000 	str.w	sl, [sp]
 8005f90:	464b      	mov	r3, r9
 8005f92:	aa03      	add	r2, sp, #12
 8005f94:	4621      	mov	r1, r4
 8005f96:	4640      	mov	r0, r8
 8005f98:	f7ff fee6 	bl	8005d68 <_printf_common>
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d14a      	bne.n	8006036 <_printf_i+0x1f2>
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	b004      	add	sp, #16
 8005fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	f043 0320 	orr.w	r3, r3, #32
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	4833      	ldr	r0, [pc, #204]	@ (8006080 <_printf_i+0x23c>)
 8005fb4:	2778      	movs	r7, #120	@ 0x78
 8005fb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	6831      	ldr	r1, [r6, #0]
 8005fbe:	061f      	lsls	r7, r3, #24
 8005fc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fc4:	d402      	bmi.n	8005fcc <_printf_i+0x188>
 8005fc6:	065f      	lsls	r7, r3, #25
 8005fc8:	bf48      	it	mi
 8005fca:	b2ad      	uxthmi	r5, r5
 8005fcc:	6031      	str	r1, [r6, #0]
 8005fce:	07d9      	lsls	r1, r3, #31
 8005fd0:	bf44      	itt	mi
 8005fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd6:	6023      	strmi	r3, [r4, #0]
 8005fd8:	b11d      	cbz	r5, 8005fe2 <_printf_i+0x19e>
 8005fda:	2310      	movs	r3, #16
 8005fdc:	e7ac      	b.n	8005f38 <_printf_i+0xf4>
 8005fde:	4827      	ldr	r0, [pc, #156]	@ (800607c <_printf_i+0x238>)
 8005fe0:	e7e9      	b.n	8005fb6 <_printf_i+0x172>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	f023 0320 	bic.w	r3, r3, #32
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	e7f6      	b.n	8005fda <_printf_i+0x196>
 8005fec:	4616      	mov	r6, r2
 8005fee:	e7bd      	b.n	8005f6c <_printf_i+0x128>
 8005ff0:	6833      	ldr	r3, [r6, #0]
 8005ff2:	6825      	ldr	r5, [r4, #0]
 8005ff4:	6961      	ldr	r1, [r4, #20]
 8005ff6:	1d18      	adds	r0, r3, #4
 8005ff8:	6030      	str	r0, [r6, #0]
 8005ffa:	062e      	lsls	r6, r5, #24
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	d501      	bpl.n	8006004 <_printf_i+0x1c0>
 8006000:	6019      	str	r1, [r3, #0]
 8006002:	e002      	b.n	800600a <_printf_i+0x1c6>
 8006004:	0668      	lsls	r0, r5, #25
 8006006:	d5fb      	bpl.n	8006000 <_printf_i+0x1bc>
 8006008:	8019      	strh	r1, [r3, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	4616      	mov	r6, r2
 8006010:	e7bc      	b.n	8005f8c <_printf_i+0x148>
 8006012:	6833      	ldr	r3, [r6, #0]
 8006014:	1d1a      	adds	r2, r3, #4
 8006016:	6032      	str	r2, [r6, #0]
 8006018:	681e      	ldr	r6, [r3, #0]
 800601a:	6862      	ldr	r2, [r4, #4]
 800601c:	2100      	movs	r1, #0
 800601e:	4630      	mov	r0, r6
 8006020:	f7fa f8de 	bl	80001e0 <memchr>
 8006024:	b108      	cbz	r0, 800602a <_printf_i+0x1e6>
 8006026:	1b80      	subs	r0, r0, r6
 8006028:	6060      	str	r0, [r4, #4]
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	6123      	str	r3, [r4, #16]
 800602e:	2300      	movs	r3, #0
 8006030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006034:	e7aa      	b.n	8005f8c <_printf_i+0x148>
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	4632      	mov	r2, r6
 800603a:	4649      	mov	r1, r9
 800603c:	4640      	mov	r0, r8
 800603e:	47d0      	blx	sl
 8006040:	3001      	adds	r0, #1
 8006042:	d0ad      	beq.n	8005fa0 <_printf_i+0x15c>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	079b      	lsls	r3, r3, #30
 8006048:	d413      	bmi.n	8006072 <_printf_i+0x22e>
 800604a:	68e0      	ldr	r0, [r4, #12]
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	4298      	cmp	r0, r3
 8006050:	bfb8      	it	lt
 8006052:	4618      	movlt	r0, r3
 8006054:	e7a6      	b.n	8005fa4 <_printf_i+0x160>
 8006056:	2301      	movs	r3, #1
 8006058:	4632      	mov	r2, r6
 800605a:	4649      	mov	r1, r9
 800605c:	4640      	mov	r0, r8
 800605e:	47d0      	blx	sl
 8006060:	3001      	adds	r0, #1
 8006062:	d09d      	beq.n	8005fa0 <_printf_i+0x15c>
 8006064:	3501      	adds	r5, #1
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	9903      	ldr	r1, [sp, #12]
 800606a:	1a5b      	subs	r3, r3, r1
 800606c:	42ab      	cmp	r3, r5
 800606e:	dcf2      	bgt.n	8006056 <_printf_i+0x212>
 8006070:	e7eb      	b.n	800604a <_printf_i+0x206>
 8006072:	2500      	movs	r5, #0
 8006074:	f104 0619 	add.w	r6, r4, #25
 8006078:	e7f5      	b.n	8006066 <_printf_i+0x222>
 800607a:	bf00      	nop
 800607c:	0800705d 	.word	0x0800705d
 8006080:	0800706e 	.word	0x0800706e

08006084 <__sflush_r>:
 8006084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800608c:	0716      	lsls	r6, r2, #28
 800608e:	4605      	mov	r5, r0
 8006090:	460c      	mov	r4, r1
 8006092:	d454      	bmi.n	800613e <__sflush_r+0xba>
 8006094:	684b      	ldr	r3, [r1, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	dc02      	bgt.n	80060a0 <__sflush_r+0x1c>
 800609a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	dd48      	ble.n	8006132 <__sflush_r+0xae>
 80060a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060a2:	2e00      	cmp	r6, #0
 80060a4:	d045      	beq.n	8006132 <__sflush_r+0xae>
 80060a6:	2300      	movs	r3, #0
 80060a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80060ac:	682f      	ldr	r7, [r5, #0]
 80060ae:	6a21      	ldr	r1, [r4, #32]
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	d030      	beq.n	8006116 <__sflush_r+0x92>
 80060b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	0759      	lsls	r1, r3, #29
 80060ba:	d505      	bpl.n	80060c8 <__sflush_r+0x44>
 80060bc:	6863      	ldr	r3, [r4, #4]
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060c2:	b10b      	cbz	r3, 80060c8 <__sflush_r+0x44>
 80060c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060c6:	1ad2      	subs	r2, r2, r3
 80060c8:	2300      	movs	r3, #0
 80060ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060cc:	6a21      	ldr	r1, [r4, #32]
 80060ce:	4628      	mov	r0, r5
 80060d0:	47b0      	blx	r6
 80060d2:	1c43      	adds	r3, r0, #1
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	d106      	bne.n	80060e6 <__sflush_r+0x62>
 80060d8:	6829      	ldr	r1, [r5, #0]
 80060da:	291d      	cmp	r1, #29
 80060dc:	d82b      	bhi.n	8006136 <__sflush_r+0xb2>
 80060de:	4a2a      	ldr	r2, [pc, #168]	@ (8006188 <__sflush_r+0x104>)
 80060e0:	410a      	asrs	r2, r1
 80060e2:	07d6      	lsls	r6, r2, #31
 80060e4:	d427      	bmi.n	8006136 <__sflush_r+0xb2>
 80060e6:	2200      	movs	r2, #0
 80060e8:	6062      	str	r2, [r4, #4]
 80060ea:	04d9      	lsls	r1, r3, #19
 80060ec:	6922      	ldr	r2, [r4, #16]
 80060ee:	6022      	str	r2, [r4, #0]
 80060f0:	d504      	bpl.n	80060fc <__sflush_r+0x78>
 80060f2:	1c42      	adds	r2, r0, #1
 80060f4:	d101      	bne.n	80060fa <__sflush_r+0x76>
 80060f6:	682b      	ldr	r3, [r5, #0]
 80060f8:	b903      	cbnz	r3, 80060fc <__sflush_r+0x78>
 80060fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80060fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060fe:	602f      	str	r7, [r5, #0]
 8006100:	b1b9      	cbz	r1, 8006132 <__sflush_r+0xae>
 8006102:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006106:	4299      	cmp	r1, r3
 8006108:	d002      	beq.n	8006110 <__sflush_r+0x8c>
 800610a:	4628      	mov	r0, r5
 800610c:	f7ff fc8a 	bl	8005a24 <_free_r>
 8006110:	2300      	movs	r3, #0
 8006112:	6363      	str	r3, [r4, #52]	@ 0x34
 8006114:	e00d      	b.n	8006132 <__sflush_r+0xae>
 8006116:	2301      	movs	r3, #1
 8006118:	4628      	mov	r0, r5
 800611a:	47b0      	blx	r6
 800611c:	4602      	mov	r2, r0
 800611e:	1c50      	adds	r0, r2, #1
 8006120:	d1c9      	bne.n	80060b6 <__sflush_r+0x32>
 8006122:	682b      	ldr	r3, [r5, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0c6      	beq.n	80060b6 <__sflush_r+0x32>
 8006128:	2b1d      	cmp	r3, #29
 800612a:	d001      	beq.n	8006130 <__sflush_r+0xac>
 800612c:	2b16      	cmp	r3, #22
 800612e:	d11e      	bne.n	800616e <__sflush_r+0xea>
 8006130:	602f      	str	r7, [r5, #0]
 8006132:	2000      	movs	r0, #0
 8006134:	e022      	b.n	800617c <__sflush_r+0xf8>
 8006136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800613a:	b21b      	sxth	r3, r3
 800613c:	e01b      	b.n	8006176 <__sflush_r+0xf2>
 800613e:	690f      	ldr	r7, [r1, #16]
 8006140:	2f00      	cmp	r7, #0
 8006142:	d0f6      	beq.n	8006132 <__sflush_r+0xae>
 8006144:	0793      	lsls	r3, r2, #30
 8006146:	680e      	ldr	r6, [r1, #0]
 8006148:	bf08      	it	eq
 800614a:	694b      	ldreq	r3, [r1, #20]
 800614c:	600f      	str	r7, [r1, #0]
 800614e:	bf18      	it	ne
 8006150:	2300      	movne	r3, #0
 8006152:	eba6 0807 	sub.w	r8, r6, r7
 8006156:	608b      	str	r3, [r1, #8]
 8006158:	f1b8 0f00 	cmp.w	r8, #0
 800615c:	dde9      	ble.n	8006132 <__sflush_r+0xae>
 800615e:	6a21      	ldr	r1, [r4, #32]
 8006160:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006162:	4643      	mov	r3, r8
 8006164:	463a      	mov	r2, r7
 8006166:	4628      	mov	r0, r5
 8006168:	47b0      	blx	r6
 800616a:	2800      	cmp	r0, #0
 800616c:	dc08      	bgt.n	8006180 <__sflush_r+0xfc>
 800616e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006176:	81a3      	strh	r3, [r4, #12]
 8006178:	f04f 30ff 	mov.w	r0, #4294967295
 800617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006180:	4407      	add	r7, r0
 8006182:	eba8 0800 	sub.w	r8, r8, r0
 8006186:	e7e7      	b.n	8006158 <__sflush_r+0xd4>
 8006188:	dfbffffe 	.word	0xdfbffffe

0800618c <_fflush_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	690b      	ldr	r3, [r1, #16]
 8006190:	4605      	mov	r5, r0
 8006192:	460c      	mov	r4, r1
 8006194:	b913      	cbnz	r3, 800619c <_fflush_r+0x10>
 8006196:	2500      	movs	r5, #0
 8006198:	4628      	mov	r0, r5
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	b118      	cbz	r0, 80061a6 <_fflush_r+0x1a>
 800619e:	6a03      	ldr	r3, [r0, #32]
 80061a0:	b90b      	cbnz	r3, 80061a6 <_fflush_r+0x1a>
 80061a2:	f7ff fa27 	bl	80055f4 <__sinit>
 80061a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f3      	beq.n	8006196 <_fflush_r+0xa>
 80061ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061b0:	07d0      	lsls	r0, r2, #31
 80061b2:	d404      	bmi.n	80061be <_fflush_r+0x32>
 80061b4:	0599      	lsls	r1, r3, #22
 80061b6:	d402      	bmi.n	80061be <_fflush_r+0x32>
 80061b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061ba:	f7ff fc30 	bl	8005a1e <__retarget_lock_acquire_recursive>
 80061be:	4628      	mov	r0, r5
 80061c0:	4621      	mov	r1, r4
 80061c2:	f7ff ff5f 	bl	8006084 <__sflush_r>
 80061c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061c8:	07da      	lsls	r2, r3, #31
 80061ca:	4605      	mov	r5, r0
 80061cc:	d4e4      	bmi.n	8006198 <_fflush_r+0xc>
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	059b      	lsls	r3, r3, #22
 80061d2:	d4e1      	bmi.n	8006198 <_fflush_r+0xc>
 80061d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061d6:	f7ff fc23 	bl	8005a20 <__retarget_lock_release_recursive>
 80061da:	e7dd      	b.n	8006198 <_fflush_r+0xc>

080061dc <__swhatbuf_r>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	460c      	mov	r4, r1
 80061e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e4:	2900      	cmp	r1, #0
 80061e6:	b096      	sub	sp, #88	@ 0x58
 80061e8:	4615      	mov	r5, r2
 80061ea:	461e      	mov	r6, r3
 80061ec:	da0d      	bge.n	800620a <__swhatbuf_r+0x2e>
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80061f4:	f04f 0100 	mov.w	r1, #0
 80061f8:	bf14      	ite	ne
 80061fa:	2340      	movne	r3, #64	@ 0x40
 80061fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006200:	2000      	movs	r0, #0
 8006202:	6031      	str	r1, [r6, #0]
 8006204:	602b      	str	r3, [r5, #0]
 8006206:	b016      	add	sp, #88	@ 0x58
 8006208:	bd70      	pop	{r4, r5, r6, pc}
 800620a:	466a      	mov	r2, sp
 800620c:	f000 f862 	bl	80062d4 <_fstat_r>
 8006210:	2800      	cmp	r0, #0
 8006212:	dbec      	blt.n	80061ee <__swhatbuf_r+0x12>
 8006214:	9901      	ldr	r1, [sp, #4]
 8006216:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800621a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800621e:	4259      	negs	r1, r3
 8006220:	4159      	adcs	r1, r3
 8006222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006226:	e7eb      	b.n	8006200 <__swhatbuf_r+0x24>

08006228 <__smakebuf_r>:
 8006228:	898b      	ldrh	r3, [r1, #12]
 800622a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800622c:	079d      	lsls	r5, r3, #30
 800622e:	4606      	mov	r6, r0
 8006230:	460c      	mov	r4, r1
 8006232:	d507      	bpl.n	8006244 <__smakebuf_r+0x1c>
 8006234:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	2301      	movs	r3, #1
 800623e:	6163      	str	r3, [r4, #20]
 8006240:	b003      	add	sp, #12
 8006242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006244:	ab01      	add	r3, sp, #4
 8006246:	466a      	mov	r2, sp
 8006248:	f7ff ffc8 	bl	80061dc <__swhatbuf_r>
 800624c:	9f00      	ldr	r7, [sp, #0]
 800624e:	4605      	mov	r5, r0
 8006250:	4639      	mov	r1, r7
 8006252:	4630      	mov	r0, r6
 8006254:	f7ff f8b6 	bl	80053c4 <_malloc_r>
 8006258:	b948      	cbnz	r0, 800626e <__smakebuf_r+0x46>
 800625a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800625e:	059a      	lsls	r2, r3, #22
 8006260:	d4ee      	bmi.n	8006240 <__smakebuf_r+0x18>
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	f043 0302 	orr.w	r3, r3, #2
 800626a:	81a3      	strh	r3, [r4, #12]
 800626c:	e7e2      	b.n	8006234 <__smakebuf_r+0xc>
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	6020      	str	r0, [r4, #0]
 8006272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	9b01      	ldr	r3, [sp, #4]
 800627a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800627e:	b15b      	cbz	r3, 8006298 <__smakebuf_r+0x70>
 8006280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006284:	4630      	mov	r0, r6
 8006286:	f000 f837 	bl	80062f8 <_isatty_r>
 800628a:	b128      	cbz	r0, 8006298 <__smakebuf_r+0x70>
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	f023 0303 	bic.w	r3, r3, #3
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	81a3      	strh	r3, [r4, #12]
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	431d      	orrs	r5, r3
 800629c:	81a5      	strh	r5, [r4, #12]
 800629e:	e7cf      	b.n	8006240 <__smakebuf_r+0x18>

080062a0 <memmove>:
 80062a0:	4288      	cmp	r0, r1
 80062a2:	b510      	push	{r4, lr}
 80062a4:	eb01 0402 	add.w	r4, r1, r2
 80062a8:	d902      	bls.n	80062b0 <memmove+0x10>
 80062aa:	4284      	cmp	r4, r0
 80062ac:	4623      	mov	r3, r4
 80062ae:	d807      	bhi.n	80062c0 <memmove+0x20>
 80062b0:	1e43      	subs	r3, r0, #1
 80062b2:	42a1      	cmp	r1, r4
 80062b4:	d008      	beq.n	80062c8 <memmove+0x28>
 80062b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062be:	e7f8      	b.n	80062b2 <memmove+0x12>
 80062c0:	4402      	add	r2, r0
 80062c2:	4601      	mov	r1, r0
 80062c4:	428a      	cmp	r2, r1
 80062c6:	d100      	bne.n	80062ca <memmove+0x2a>
 80062c8:	bd10      	pop	{r4, pc}
 80062ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062d2:	e7f7      	b.n	80062c4 <memmove+0x24>

080062d4 <_fstat_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d07      	ldr	r5, [pc, #28]	@ (80062f4 <_fstat_r+0x20>)
 80062d8:	2300      	movs	r3, #0
 80062da:	4604      	mov	r4, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	4611      	mov	r1, r2
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	f7fb fb30 	bl	8001946 <_fstat>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	d102      	bne.n	80062f0 <_fstat_r+0x1c>
 80062ea:	682b      	ldr	r3, [r5, #0]
 80062ec:	b103      	cbz	r3, 80062f0 <_fstat_r+0x1c>
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	bd38      	pop	{r3, r4, r5, pc}
 80062f2:	bf00      	nop
 80062f4:	2000044c 	.word	0x2000044c

080062f8 <_isatty_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d06      	ldr	r5, [pc, #24]	@ (8006314 <_isatty_r+0x1c>)
 80062fc:	2300      	movs	r3, #0
 80062fe:	4604      	mov	r4, r0
 8006300:	4608      	mov	r0, r1
 8006302:	602b      	str	r3, [r5, #0]
 8006304:	f7fb fb2f 	bl	8001966 <_isatty>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_isatty_r+0x1a>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	b103      	cbz	r3, 8006312 <_isatty_r+0x1a>
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	2000044c 	.word	0x2000044c

08006318 <memcpy>:
 8006318:	440a      	add	r2, r1
 800631a:	4291      	cmp	r1, r2
 800631c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006320:	d100      	bne.n	8006324 <memcpy+0xc>
 8006322:	4770      	bx	lr
 8006324:	b510      	push	{r4, lr}
 8006326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800632a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800632e:	4291      	cmp	r1, r2
 8006330:	d1f9      	bne.n	8006326 <memcpy+0xe>
 8006332:	bd10      	pop	{r4, pc}

08006334 <_realloc_r>:
 8006334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006338:	4680      	mov	r8, r0
 800633a:	4615      	mov	r5, r2
 800633c:	460c      	mov	r4, r1
 800633e:	b921      	cbnz	r1, 800634a <_realloc_r+0x16>
 8006340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006344:	4611      	mov	r1, r2
 8006346:	f7ff b83d 	b.w	80053c4 <_malloc_r>
 800634a:	b92a      	cbnz	r2, 8006358 <_realloc_r+0x24>
 800634c:	f7ff fb6a 	bl	8005a24 <_free_r>
 8006350:	2400      	movs	r4, #0
 8006352:	4620      	mov	r0, r4
 8006354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006358:	f000 f81a 	bl	8006390 <_malloc_usable_size_r>
 800635c:	4285      	cmp	r5, r0
 800635e:	4606      	mov	r6, r0
 8006360:	d802      	bhi.n	8006368 <_realloc_r+0x34>
 8006362:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006366:	d8f4      	bhi.n	8006352 <_realloc_r+0x1e>
 8006368:	4629      	mov	r1, r5
 800636a:	4640      	mov	r0, r8
 800636c:	f7ff f82a 	bl	80053c4 <_malloc_r>
 8006370:	4607      	mov	r7, r0
 8006372:	2800      	cmp	r0, #0
 8006374:	d0ec      	beq.n	8006350 <_realloc_r+0x1c>
 8006376:	42b5      	cmp	r5, r6
 8006378:	462a      	mov	r2, r5
 800637a:	4621      	mov	r1, r4
 800637c:	bf28      	it	cs
 800637e:	4632      	movcs	r2, r6
 8006380:	f7ff ffca 	bl	8006318 <memcpy>
 8006384:	4621      	mov	r1, r4
 8006386:	4640      	mov	r0, r8
 8006388:	f7ff fb4c 	bl	8005a24 <_free_r>
 800638c:	463c      	mov	r4, r7
 800638e:	e7e0      	b.n	8006352 <_realloc_r+0x1e>

08006390 <_malloc_usable_size_r>:
 8006390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006394:	1f18      	subs	r0, r3, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	bfbc      	itt	lt
 800639a:	580b      	ldrlt	r3, [r1, r0]
 800639c:	18c0      	addlt	r0, r0, r3
 800639e:	4770      	bx	lr

080063a0 <_init>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	bf00      	nop
 80063a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a6:	bc08      	pop	{r3}
 80063a8:	469e      	mov	lr, r3
 80063aa:	4770      	bx	lr

080063ac <_fini>:
 80063ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ae:	bf00      	nop
 80063b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b2:	bc08      	pop	{r3}
 80063b4:	469e      	mov	lr, r3
 80063b6:	4770      	bx	lr
